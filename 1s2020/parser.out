Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> global_declaration
Rule 2     global_declaration -> function_definition
Rule 3     global_declaration -> declaration
Rule 4     function_definition -> type_specifier declarator declaration_list compound_statement
Rule 5     function_definition -> declarator declaration_list compound_statement
Rule 6     declaration -> type_specifier SEMI
Rule 7     declaration -> type_specifier init_declarator_list SEMI
Rule 8     init_declarator_list -> init_declarator
Rule 9     init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 10    init_declarator -> declarator
Rule 11    init_declarator -> declarator EQUALS initializer
Rule 12    initializer -> assignment_expression
Rule 13    initializer -> LBRACE initializer_list RBRACE
Rule 14    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 15    initializer_list -> initializer
Rule 16    initializer_list -> initializer_list COMMA initializer
Rule 17    declaration_list -> declaration
Rule 18    declaration_list -> declaration_list declaration
Rule 19    declarator -> pointer direct_declarator
Rule 20    declarator -> direct_declarator
Rule 21    parameter_list -> parameter_declaration
Rule 22    parameter_list -> parameter_list COMMA parameter_declaration
Rule 23    parameter_declaration -> type_specifier declarator
Rule 24    compound_statement -> LBRACE declaration_list statement_list RBRACE
Rule 25    expression_statement -> expression
Rule 26    expression_statement -> empty
Rule 27    expression -> assignment_expression
Rule 28    expression -> expression COMMA assignment_expression
Rule 29    selection_statement -> IF LPAREN expression RPAREN statement
Rule 30    selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 31    iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 32    iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
Rule 33    iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement
Rule 34    iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement
Rule 35    iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement
Rule 36    iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement
Rule 37    iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement
Rule 38    iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement
Rule 39    iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement
Rule 40    iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement
Rule 41    iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement
Rule 42    iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement
Rule 43    iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement
Rule 44    jump_statement -> BREAK SEMI
Rule 45    jump_statement -> RETURN expression SEMI
Rule 46    jump_statement -> RETURN SEMI
Rule 47    assert_statement -> ASSERT expression SEMI
Rule 48    assert_statement -> ASSERT SEMI
Rule 49    print_statement -> PRINT LPAREN expression RPAREN SEMI
Rule 50    print_statement -> PRINT LPAREN RPAREN SEMI
Rule 51    read_statement -> READ LPAREN argument_expression RPAREN SEMI
Rule 52    statement -> expression_statement
Rule 53    statement -> compound_statement
Rule 54    statement -> selection_statement
Rule 55    statement -> iteration_statement
Rule 56    statement -> jump_statement
Rule 57    statement -> assert_statement
Rule 58    statement -> print_statement
Rule 59    statement -> read_statement
Rule 60    statement_list -> statement
Rule 61    statement_list -> statement_list statement
Rule 62    assignment_expression -> binary_expression
Rule 63    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 64    binary_expression -> cast_expression
Rule 65    binary_expression -> binary_expression PLUS binary_expression
Rule 66    binary_expression -> binary_expression MINUS binary_expression
Rule 67    binary_expression -> binary_expression TIMES binary_expression
Rule 68    binary_expression -> binary_expression DIVIDE binary_expression
Rule 69    binary_expression -> binary_expression MOD binary_expression
Rule 70    binary_expression -> binary_expression LT binary_expression
Rule 71    binary_expression -> binary_expression LE binary_expression
Rule 72    binary_expression -> binary_expression GT binary_expression
Rule 73    binary_expression -> binary_expression GE binary_expression
Rule 74    binary_expression -> binary_expression EQ binary_expression
Rule 75    binary_expression -> binary_expression NQ binary_expression
Rule 76    binary_expression -> binary_expression AND binary_expression
Rule 77    binary_expression -> binary_expression OR binary_expression
Rule 78    unary_expression -> postfix_expression
Rule 79    unary_expression -> INCREASE unary_expression
Rule 80    unary_expression -> DECREASE unary_expression
Rule 81    unary_expression -> unary_operator cast_expression
Rule 82    postfix_expression -> primary_expression
Rule 83    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 84    postfix_expression -> postfix_expression LPAREN argument_expression RPAREN
Rule 85    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 86    postfix_expression -> postfix_expression INCREASE
Rule 87    postfix_expression -> postfix_expression DECREASE
Rule 88    cast_expression -> unary_expression
Rule 89    cast_expression -> LPAREN type_specifier RPAREN cast_expression
Rule 90    primary_expression -> ID
Rule 91    primary_expression -> constant
Rule 92    primary_expression -> STRING
Rule 93    primary_expression -> LPAREN expression RPAREN
Rule 94    argument_expression -> assignment_expression
Rule 95    argument_expression -> argument_expression COMMA assignment_expression
Rule 96    constant_expression -> binary_expression
Rule 97    assignment_operator -> EQUALS
Rule 98    assignment_operator -> EQTIMES
Rule 99    assignment_operator -> EQDIV
Rule 100   assignment_operator -> EQMOD
Rule 101   assignment_operator -> EQPLUS
Rule 102   assignment_operator -> EQMINUS
Rule 103   unary_operator -> ADDRESS
Rule 104   unary_operator -> TIMES
Rule 105   unary_operator -> PLUS
Rule 106   unary_operator -> UMINUS
Rule 107   unary_operator -> NOT
Rule 108   constant -> INT_CONST
Rule 109   constant -> FLOAT_CONST
Rule 110   constant -> CHAR_CONST
Rule 111   pointer -> TIMES pointer
Rule 112   pointer -> TIMES
Rule 113   direct_declarator -> ID
Rule 114   direct_declarator -> LPAREN declarator RPAREN
Rule 115   direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET
Rule 116   direct_declarator -> direct_declarator LBRACKET RBRACKET
Rule 117   direct_declarator -> direct_declarator LPAREN parameter_list RPAREN
Rule 118   direct_declarator -> direct_declarator LPAREN id_list RPAREN
Rule 119   id_list -> ID
Rule 120   id_list -> id_list ID
Rule 121   type_specifier -> VOID
Rule 122   type_specifier -> INT
Rule 123   type_specifier -> FLOAT
Rule 124   type_specifier -> CHAR
Rule 125   empty -> <empty>

Terminals, with rules where they appear

ADDRESS              : 103
AND                  : 76
ASSERT               : 47 48
BREAK                : 44
CHAR                 : 124
CHAR_CONST           : 110
COMMA                : 9 14 16 22 28 95
DECREASE             : 80 87
DIVIDE               : 68
ELSE                 : 30
EQ                   : 74
EQDIV                : 99
EQMINUS              : 102
EQMOD                : 100
EQPLUS               : 101
EQTIMES              : 98
EQUALS               : 11 97
FLOAT                : 123
FLOAT_CONST          : 109
FOR                  : 32 33 34 35 36 37 38 39 40 41 42 43
GE                   : 73
GT                   : 72
ID                   : 90 113 119 120
IF                   : 29 30
INCREASE             : 79 86
INT                  : 122
INT_CONST            : 108
LBRACE               : 13 14 24
LBRACKET             : 83 115 116
LE                   : 71
LPAREN               : 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 49 50 51 84 85 89 93 114 117 118
LT                   : 70
MINUS                : 66
MOD                  : 69
NOT                  : 107
NQ                   : 75
OR                   : 77
PLUS                 : 65 105
PRINT                : 49 50
RBRACE               : 13 14 24
RBRACKET             : 83 115 116
READ                 : 51
RETURN               : 45 46
RPAREN               : 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 49 50 51 84 85 89 93 114 117 118
SEMI                 : 6 7 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 41 42 43 44 45 46 47 48 49 50 51
STRING               : 92
TIMES                : 67 104 111 112
UMINUS               : 106
VOID                 : 121
WHILE                : 31
error                : 

Nonterminals, with rules where they appear

argument_expression  : 51 84 95
assert_statement     : 57
assignment_expression : 12 27 28 63 94 95
assignment_operator  : 63
binary_expression    : 62 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 96
cast_expression      : 64 81 89
compound_statement   : 4 5 53
constant             : 91
constant_expression  : 115
declaration          : 3 17 18 40 41 42 43
declaration_list     : 4 5 18 24
declarator           : 4 5 10 11 23 114
direct_declarator    : 19 20 115 116 117 118
empty                : 26
expression           : 25 28 29 30 31 32 32 32 33 33 34 34 35 36 36 37 38 40 40 41 42 45 47 49 83 93
expression_statement : 52
function_definition  : 2
global_declaration   : 1
id_list              : 118 120
init_declarator      : 8 9
init_declarator_list : 7 9
initializer          : 11 15 16
initializer_list     : 13 14 16
iteration_statement  : 55
jump_statement       : 56
parameter_declaration : 21 22
parameter_list       : 22 117
pointer              : 19 111
postfix_expression   : 78 83 84 85 86 87
primary_expression   : 82
print_statement      : 58
program              : 0
read_statement       : 59
selection_statement  : 54
statement            : 29 30 30 31 32 33 34 35 36 37 38 39 40 41 42 43 60 61
statement_list       : 24 61
type_specifier       : 4 6 7 23 89
unary_expression     : 63 79 80 88
unary_operator       : 81

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . global_declaration
    (2) global_declaration -> . function_definition
    (3) global_declaration -> . declaration
    (4) function_definition -> . type_specifier declarator declaration_list compound_statement
    (5) function_definition -> . declarator declaration_list compound_statement
    (6) declaration -> . type_specifier SEMI
    (7) declaration -> . type_specifier init_declarator_list SEMI
    (121) type_specifier -> . VOID
    (122) type_specifier -> . INT
    (123) type_specifier -> . FLOAT
    (124) type_specifier -> . CHAR
    (19) declarator -> . pointer direct_declarator
    (20) declarator -> . direct_declarator
    (111) pointer -> . TIMES pointer
    (112) pointer -> . TIMES
    (113) direct_declarator -> . ID
    (114) direct_declarator -> . LPAREN declarator RPAREN
    (115) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (116) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (117) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (118) direct_declarator -> . direct_declarator LPAREN id_list RPAREN

    VOID            shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    TIMES           shift and go to state 13
    ID              shift and go to state 14
    LPAREN          shift and go to state 15

    program                        shift and go to state 1
    global_declaration             shift and go to state 2
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    type_specifier                 shift and go to state 5
    declarator                     shift and go to state 6
    pointer                        shift and go to state 11
    direct_declarator              shift and go to state 12

state 1

    (0) S' -> program .



state 2

    (1) program -> global_declaration .

    $end            reduce using rule 1 (program -> global_declaration .)


state 3

    (2) global_declaration -> function_definition .

    $end            reduce using rule 2 (global_declaration -> function_definition .)


state 4

    (3) global_declaration -> declaration .

    $end            reduce using rule 3 (global_declaration -> declaration .)


state 5

    (4) function_definition -> type_specifier . declarator declaration_list compound_statement
    (6) declaration -> type_specifier . SEMI
    (7) declaration -> type_specifier . init_declarator_list SEMI
    (19) declarator -> . pointer direct_declarator
    (20) declarator -> . direct_declarator
    (8) init_declarator_list -> . init_declarator
    (9) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (111) pointer -> . TIMES pointer
    (112) pointer -> . TIMES
    (113) direct_declarator -> . ID
    (114) direct_declarator -> . LPAREN declarator RPAREN
    (115) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (116) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (117) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (118) direct_declarator -> . direct_declarator LPAREN id_list RPAREN
    (10) init_declarator -> . declarator
    (11) init_declarator -> . declarator EQUALS initializer

    SEMI            shift and go to state 17
    TIMES           shift and go to state 13
    ID              shift and go to state 14
    LPAREN          shift and go to state 15

    declarator                     shift and go to state 16
    init_declarator_list           shift and go to state 18
    pointer                        shift and go to state 11
    direct_declarator              shift and go to state 12
    init_declarator                shift and go to state 19

state 6

    (5) function_definition -> declarator . declaration_list compound_statement
    (17) declaration_list -> . declaration
    (18) declaration_list -> . declaration_list declaration
    (6) declaration -> . type_specifier SEMI
    (7) declaration -> . type_specifier init_declarator_list SEMI
    (121) type_specifier -> . VOID
    (122) type_specifier -> . INT
    (123) type_specifier -> . FLOAT
    (124) type_specifier -> . CHAR

    VOID            shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10

    declaration_list               shift and go to state 20
    declaration                    shift and go to state 21
    type_specifier                 shift and go to state 22

state 7

    (121) type_specifier -> VOID .

    SEMI            reduce using rule 121 (type_specifier -> VOID .)
    TIMES           reduce using rule 121 (type_specifier -> VOID .)
    ID              reduce using rule 121 (type_specifier -> VOID .)
    LPAREN          reduce using rule 121 (type_specifier -> VOID .)
    RPAREN          reduce using rule 121 (type_specifier -> VOID .)


state 8

    (122) type_specifier -> INT .

    SEMI            reduce using rule 122 (type_specifier -> INT .)
    TIMES           reduce using rule 122 (type_specifier -> INT .)
    ID              reduce using rule 122 (type_specifier -> INT .)
    LPAREN          reduce using rule 122 (type_specifier -> INT .)
    RPAREN          reduce using rule 122 (type_specifier -> INT .)


state 9

    (123) type_specifier -> FLOAT .

    SEMI            reduce using rule 123 (type_specifier -> FLOAT .)
    TIMES           reduce using rule 123 (type_specifier -> FLOAT .)
    ID              reduce using rule 123 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 123 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 123 (type_specifier -> FLOAT .)


state 10

    (124) type_specifier -> CHAR .

    SEMI            reduce using rule 124 (type_specifier -> CHAR .)
    TIMES           reduce using rule 124 (type_specifier -> CHAR .)
    ID              reduce using rule 124 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 124 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 124 (type_specifier -> CHAR .)


state 11

    (19) declarator -> pointer . direct_declarator
    (113) direct_declarator -> . ID
    (114) direct_declarator -> . LPAREN declarator RPAREN
    (115) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (116) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (117) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (118) direct_declarator -> . direct_declarator LPAREN id_list RPAREN

    ID              shift and go to state 14
    LPAREN          shift and go to state 15

    direct_declarator              shift and go to state 23

state 12

    (20) declarator -> direct_declarator .
    (115) direct_declarator -> direct_declarator . LBRACKET constant_expression RBRACKET
    (116) direct_declarator -> direct_declarator . LBRACKET RBRACKET
    (117) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (118) direct_declarator -> direct_declarator . LPAREN id_list RPAREN

    VOID            reduce using rule 20 (declarator -> direct_declarator .)
    INT             reduce using rule 20 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 20 (declarator -> direct_declarator .)
    CHAR            reduce using rule 20 (declarator -> direct_declarator .)
    EQUALS          reduce using rule 20 (declarator -> direct_declarator .)
    SEMI            reduce using rule 20 (declarator -> direct_declarator .)
    COMMA           reduce using rule 20 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 20 (declarator -> direct_declarator .)
    LBRACKET        shift and go to state 24
    LPAREN          shift and go to state 25


state 13

    (111) pointer -> TIMES . pointer
    (112) pointer -> TIMES .
    (111) pointer -> . TIMES pointer
    (112) pointer -> . TIMES

    ID              reduce using rule 112 (pointer -> TIMES .)
    LPAREN          reduce using rule 112 (pointer -> TIMES .)
    TIMES           shift and go to state 13

    pointer                        shift and go to state 26

state 14

    (113) direct_declarator -> ID .

    LBRACKET        reduce using rule 113 (direct_declarator -> ID .)
    LPAREN          reduce using rule 113 (direct_declarator -> ID .)
    VOID            reduce using rule 113 (direct_declarator -> ID .)
    INT             reduce using rule 113 (direct_declarator -> ID .)
    FLOAT           reduce using rule 113 (direct_declarator -> ID .)
    CHAR            reduce using rule 113 (direct_declarator -> ID .)
    EQUALS          reduce using rule 113 (direct_declarator -> ID .)
    SEMI            reduce using rule 113 (direct_declarator -> ID .)
    COMMA           reduce using rule 113 (direct_declarator -> ID .)
    RPAREN          reduce using rule 113 (direct_declarator -> ID .)


state 15

    (114) direct_declarator -> LPAREN . declarator RPAREN
    (19) declarator -> . pointer direct_declarator
    (20) declarator -> . direct_declarator
    (111) pointer -> . TIMES pointer
    (112) pointer -> . TIMES
    (113) direct_declarator -> . ID
    (114) direct_declarator -> . LPAREN declarator RPAREN
    (115) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (116) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (117) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (118) direct_declarator -> . direct_declarator LPAREN id_list RPAREN

    TIMES           shift and go to state 13
    ID              shift and go to state 14
    LPAREN          shift and go to state 15

    declarator                     shift and go to state 27
    pointer                        shift and go to state 11
    direct_declarator              shift and go to state 12

state 16

    (4) function_definition -> type_specifier declarator . declaration_list compound_statement
    (10) init_declarator -> declarator .
    (11) init_declarator -> declarator . EQUALS initializer
    (17) declaration_list -> . declaration
    (18) declaration_list -> . declaration_list declaration
    (6) declaration -> . type_specifier SEMI
    (7) declaration -> . type_specifier init_declarator_list SEMI
    (121) type_specifier -> . VOID
    (122) type_specifier -> . INT
    (123) type_specifier -> . FLOAT
    (124) type_specifier -> . CHAR

    SEMI            reduce using rule 10 (init_declarator -> declarator .)
    COMMA           reduce using rule 10 (init_declarator -> declarator .)
    EQUALS          shift and go to state 29
    VOID            shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10

    type_specifier                 shift and go to state 22
    declaration_list               shift and go to state 28
    declaration                    shift and go to state 21

state 17

    (6) declaration -> type_specifier SEMI .

    $end            reduce using rule 6 (declaration -> type_specifier SEMI .)
    LBRACE          reduce using rule 6 (declaration -> type_specifier SEMI .)
    VOID            reduce using rule 6 (declaration -> type_specifier SEMI .)
    INT             reduce using rule 6 (declaration -> type_specifier SEMI .)
    FLOAT           reduce using rule 6 (declaration -> type_specifier SEMI .)
    CHAR            reduce using rule 6 (declaration -> type_specifier SEMI .)
    IF              reduce using rule 6 (declaration -> type_specifier SEMI .)
    WHILE           reduce using rule 6 (declaration -> type_specifier SEMI .)
    FOR             reduce using rule 6 (declaration -> type_specifier SEMI .)
    BREAK           reduce using rule 6 (declaration -> type_specifier SEMI .)
    RETURN          reduce using rule 6 (declaration -> type_specifier SEMI .)
    ASSERT          reduce using rule 6 (declaration -> type_specifier SEMI .)
    PRINT           reduce using rule 6 (declaration -> type_specifier SEMI .)
    READ            reduce using rule 6 (declaration -> type_specifier SEMI .)
    INCREASE        reduce using rule 6 (declaration -> type_specifier SEMI .)
    DECREASE        reduce using rule 6 (declaration -> type_specifier SEMI .)
    LPAREN          reduce using rule 6 (declaration -> type_specifier SEMI .)
    ADDRESS         reduce using rule 6 (declaration -> type_specifier SEMI .)
    TIMES           reduce using rule 6 (declaration -> type_specifier SEMI .)
    PLUS            reduce using rule 6 (declaration -> type_specifier SEMI .)
    UMINUS          reduce using rule 6 (declaration -> type_specifier SEMI .)
    NOT             reduce using rule 6 (declaration -> type_specifier SEMI .)
    ID              reduce using rule 6 (declaration -> type_specifier SEMI .)
    STRING          reduce using rule 6 (declaration -> type_specifier SEMI .)
    INT_CONST       reduce using rule 6 (declaration -> type_specifier SEMI .)
    FLOAT_CONST     reduce using rule 6 (declaration -> type_specifier SEMI .)
    CHAR_CONST      reduce using rule 6 (declaration -> type_specifier SEMI .)
    RBRACE          reduce using rule 6 (declaration -> type_specifier SEMI .)
    SEMI            reduce using rule 6 (declaration -> type_specifier SEMI .)


state 18

    (7) declaration -> type_specifier init_declarator_list . SEMI
    (9) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            shift and go to state 30
    COMMA           shift and go to state 31


state 19

    (8) init_declarator_list -> init_declarator .

    SEMI            reduce using rule 8 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 8 (init_declarator_list -> init_declarator .)


state 20

    (5) function_definition -> declarator declaration_list . compound_statement
    (18) declaration_list -> declaration_list . declaration
    (24) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (6) declaration -> . type_specifier SEMI
    (7) declaration -> . type_specifier init_declarator_list SEMI
    (121) type_specifier -> . VOID
    (122) type_specifier -> . INT
    (123) type_specifier -> . FLOAT
    (124) type_specifier -> . CHAR

    LBRACE          shift and go to state 34
    VOID            shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10

    compound_statement             shift and go to state 32
    declaration                    shift and go to state 33
    type_specifier                 shift and go to state 22

state 21

    (17) declaration_list -> declaration .

    LBRACE          reduce using rule 17 (declaration_list -> declaration .)
    VOID            reduce using rule 17 (declaration_list -> declaration .)
    INT             reduce using rule 17 (declaration_list -> declaration .)
    FLOAT           reduce using rule 17 (declaration_list -> declaration .)
    CHAR            reduce using rule 17 (declaration_list -> declaration .)
    IF              reduce using rule 17 (declaration_list -> declaration .)
    WHILE           reduce using rule 17 (declaration_list -> declaration .)
    FOR             reduce using rule 17 (declaration_list -> declaration .)
    BREAK           reduce using rule 17 (declaration_list -> declaration .)
    RETURN          reduce using rule 17 (declaration_list -> declaration .)
    ASSERT          reduce using rule 17 (declaration_list -> declaration .)
    PRINT           reduce using rule 17 (declaration_list -> declaration .)
    READ            reduce using rule 17 (declaration_list -> declaration .)
    INCREASE        reduce using rule 17 (declaration_list -> declaration .)
    DECREASE        reduce using rule 17 (declaration_list -> declaration .)
    LPAREN          reduce using rule 17 (declaration_list -> declaration .)
    ADDRESS         reduce using rule 17 (declaration_list -> declaration .)
    TIMES           reduce using rule 17 (declaration_list -> declaration .)
    PLUS            reduce using rule 17 (declaration_list -> declaration .)
    UMINUS          reduce using rule 17 (declaration_list -> declaration .)
    NOT             reduce using rule 17 (declaration_list -> declaration .)
    ID              reduce using rule 17 (declaration_list -> declaration .)
    STRING          reduce using rule 17 (declaration_list -> declaration .)
    INT_CONST       reduce using rule 17 (declaration_list -> declaration .)
    FLOAT_CONST     reduce using rule 17 (declaration_list -> declaration .)
    CHAR_CONST      reduce using rule 17 (declaration_list -> declaration .)
    RBRACE          reduce using rule 17 (declaration_list -> declaration .)


state 22

    (6) declaration -> type_specifier . SEMI
    (7) declaration -> type_specifier . init_declarator_list SEMI
    (8) init_declarator_list -> . init_declarator
    (9) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (10) init_declarator -> . declarator
    (11) init_declarator -> . declarator EQUALS initializer
    (19) declarator -> . pointer direct_declarator
    (20) declarator -> . direct_declarator
    (111) pointer -> . TIMES pointer
    (112) pointer -> . TIMES
    (113) direct_declarator -> . ID
    (114) direct_declarator -> . LPAREN declarator RPAREN
    (115) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (116) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (117) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (118) direct_declarator -> . direct_declarator LPAREN id_list RPAREN

    SEMI            shift and go to state 17
    TIMES           shift and go to state 13
    ID              shift and go to state 14
    LPAREN          shift and go to state 15

    init_declarator_list           shift and go to state 18
    init_declarator                shift and go to state 19
    declarator                     shift and go to state 35
    pointer                        shift and go to state 11
    direct_declarator              shift and go to state 12

state 23

    (19) declarator -> pointer direct_declarator .
    (115) direct_declarator -> direct_declarator . LBRACKET constant_expression RBRACKET
    (116) direct_declarator -> direct_declarator . LBRACKET RBRACKET
    (117) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (118) direct_declarator -> direct_declarator . LPAREN id_list RPAREN

    VOID            reduce using rule 19 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 19 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 19 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 19 (declarator -> pointer direct_declarator .)
    EQUALS          reduce using rule 19 (declarator -> pointer direct_declarator .)
    SEMI            reduce using rule 19 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 19 (declarator -> pointer direct_declarator .)
    RPAREN          reduce using rule 19 (declarator -> pointer direct_declarator .)
    LBRACKET        shift and go to state 24
    LPAREN          shift and go to state 25


state 24

    (115) direct_declarator -> direct_declarator LBRACKET . constant_expression RBRACKET
    (116) direct_declarator -> direct_declarator LBRACKET . RBRACKET
    (96) constant_expression -> . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    RBRACKET        shift and go to state 37
    LPAREN          shift and go to state 43
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    constant_expression            shift and go to state 36
    binary_expression              shift and go to state 38
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 25

    (117) direct_declarator -> direct_declarator LPAREN . parameter_list RPAREN
    (118) direct_declarator -> direct_declarator LPAREN . id_list RPAREN
    (21) parameter_list -> . parameter_declaration
    (22) parameter_list -> . parameter_list COMMA parameter_declaration
    (119) id_list -> . ID
    (120) id_list -> . id_list ID
    (23) parameter_declaration -> . type_specifier declarator
    (121) type_specifier -> . VOID
    (122) type_specifier -> . INT
    (123) type_specifier -> . FLOAT
    (124) type_specifier -> . CHAR

    ID              shift and go to state 61
    VOID            shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10

    parameter_list                 shift and go to state 58
    id_list                        shift and go to state 59
    parameter_declaration          shift and go to state 60
    type_specifier                 shift and go to state 62

state 26

    (111) pointer -> TIMES pointer .

    ID              reduce using rule 111 (pointer -> TIMES pointer .)
    LPAREN          reduce using rule 111 (pointer -> TIMES pointer .)


state 27

    (114) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 63


state 28

    (4) function_definition -> type_specifier declarator declaration_list . compound_statement
    (18) declaration_list -> declaration_list . declaration
    (24) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (6) declaration -> . type_specifier SEMI
    (7) declaration -> . type_specifier init_declarator_list SEMI
    (121) type_specifier -> . VOID
    (122) type_specifier -> . INT
    (123) type_specifier -> . FLOAT
    (124) type_specifier -> . CHAR

    LBRACE          shift and go to state 34
    VOID            shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10

    type_specifier                 shift and go to state 22
    compound_statement             shift and go to state 64
    declaration                    shift and go to state 33

state 29

    (11) init_declarator -> declarator EQUALS . initializer
    (12) initializer -> . assignment_expression
    (13) initializer -> . LBRACE initializer_list RBRACE
    (14) initializer -> . LBRACE initializer_list COMMA RBRACE
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    LBRACE          shift and go to state 67
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    initializer                    shift and go to state 65
    assignment_expression          shift and go to state 66
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 30

    (7) declaration -> type_specifier init_declarator_list SEMI .

    $end            reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    LBRACE          reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    VOID            reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    INT             reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    FLOAT           reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    CHAR            reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    IF              reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    WHILE           reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    FOR             reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    BREAK           reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    RETURN          reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    ASSERT          reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    PRINT           reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    READ            reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    INCREASE        reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    DECREASE        reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    LPAREN          reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    ADDRESS         reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    TIMES           reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    PLUS            reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    UMINUS          reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    NOT             reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    ID              reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    STRING          reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    INT_CONST       reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    FLOAT_CONST     reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    CHAR_CONST      reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    RBRACE          reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)
    SEMI            reduce using rule 7 (declaration -> type_specifier init_declarator_list SEMI .)


state 31

    (9) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (10) init_declarator -> . declarator
    (11) init_declarator -> . declarator EQUALS initializer
    (19) declarator -> . pointer direct_declarator
    (20) declarator -> . direct_declarator
    (111) pointer -> . TIMES pointer
    (112) pointer -> . TIMES
    (113) direct_declarator -> . ID
    (114) direct_declarator -> . LPAREN declarator RPAREN
    (115) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (116) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (117) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (118) direct_declarator -> . direct_declarator LPAREN id_list RPAREN

    TIMES           shift and go to state 13
    ID              shift and go to state 14
    LPAREN          shift and go to state 15

    init_declarator                shift and go to state 70
    declarator                     shift and go to state 35
    pointer                        shift and go to state 11
    direct_declarator              shift and go to state 12

state 32

    (5) function_definition -> declarator declaration_list compound_statement .

    $end            reduce using rule 5 (function_definition -> declarator declaration_list compound_statement .)


state 33

    (18) declaration_list -> declaration_list declaration .

    LBRACE          reduce using rule 18 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 18 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 18 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 18 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 18 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 18 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 18 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 18 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 18 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 18 (declaration_list -> declaration_list declaration .)
    ASSERT          reduce using rule 18 (declaration_list -> declaration_list declaration .)
    PRINT           reduce using rule 18 (declaration_list -> declaration_list declaration .)
    READ            reduce using rule 18 (declaration_list -> declaration_list declaration .)
    INCREASE        reduce using rule 18 (declaration_list -> declaration_list declaration .)
    DECREASE        reduce using rule 18 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 18 (declaration_list -> declaration_list declaration .)
    ADDRESS         reduce using rule 18 (declaration_list -> declaration_list declaration .)
    TIMES           reduce using rule 18 (declaration_list -> declaration_list declaration .)
    PLUS            reduce using rule 18 (declaration_list -> declaration_list declaration .)
    UMINUS          reduce using rule 18 (declaration_list -> declaration_list declaration .)
    NOT             reduce using rule 18 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 18 (declaration_list -> declaration_list declaration .)
    STRING          reduce using rule 18 (declaration_list -> declaration_list declaration .)
    INT_CONST       reduce using rule 18 (declaration_list -> declaration_list declaration .)
    FLOAT_CONST     reduce using rule 18 (declaration_list -> declaration_list declaration .)
    CHAR_CONST      reduce using rule 18 (declaration_list -> declaration_list declaration .)
    RBRACE          reduce using rule 18 (declaration_list -> declaration_list declaration .)


state 34

    (24) compound_statement -> LBRACE . declaration_list statement_list RBRACE
    (17) declaration_list -> . declaration
    (18) declaration_list -> . declaration_list declaration
    (6) declaration -> . type_specifier SEMI
    (7) declaration -> . type_specifier init_declarator_list SEMI
    (121) type_specifier -> . VOID
    (122) type_specifier -> . INT
    (123) type_specifier -> . FLOAT
    (124) type_specifier -> . CHAR

    VOID            shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10

    declaration_list               shift and go to state 71
    declaration                    shift and go to state 21
    type_specifier                 shift and go to state 22

state 35

    (10) init_declarator -> declarator .
    (11) init_declarator -> declarator . EQUALS initializer

    SEMI            reduce using rule 10 (init_declarator -> declarator .)
    COMMA           reduce using rule 10 (init_declarator -> declarator .)
    EQUALS          shift and go to state 29


state 36

    (115) direct_declarator -> direct_declarator LBRACKET constant_expression . RBRACKET

    RBRACKET        shift and go to state 72


state 37

    (116) direct_declarator -> direct_declarator LBRACKET RBRACKET .

    LBRACKET        reduce using rule 116 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    LPAREN          reduce using rule 116 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    VOID            reduce using rule 116 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    INT             reduce using rule 116 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    FLOAT           reduce using rule 116 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    CHAR            reduce using rule 116 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    EQUALS          reduce using rule 116 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    SEMI            reduce using rule 116 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    COMMA           reduce using rule 116 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    RPAREN          reduce using rule 116 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)


state 38

    (96) constant_expression -> binary_expression .
    (65) binary_expression -> binary_expression . PLUS binary_expression
    (66) binary_expression -> binary_expression . MINUS binary_expression
    (67) binary_expression -> binary_expression . TIMES binary_expression
    (68) binary_expression -> binary_expression . DIVIDE binary_expression
    (69) binary_expression -> binary_expression . MOD binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GE binary_expression
    (74) binary_expression -> binary_expression . EQ binary_expression
    (75) binary_expression -> binary_expression . NQ binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 96 (constant_expression -> binary_expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77
    LT              shift and go to state 78
    LE              shift and go to state 79
    GT              shift and go to state 80
    GE              shift and go to state 81
    EQ              shift and go to state 82
    NQ              shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85


state 39

    (64) binary_expression -> cast_expression .

    PLUS            reduce using rule 64 (binary_expression -> cast_expression .)
    MINUS           reduce using rule 64 (binary_expression -> cast_expression .)
    TIMES           reduce using rule 64 (binary_expression -> cast_expression .)
    DIVIDE          reduce using rule 64 (binary_expression -> cast_expression .)
    MOD             reduce using rule 64 (binary_expression -> cast_expression .)
    LT              reduce using rule 64 (binary_expression -> cast_expression .)
    LE              reduce using rule 64 (binary_expression -> cast_expression .)
    GT              reduce using rule 64 (binary_expression -> cast_expression .)
    GE              reduce using rule 64 (binary_expression -> cast_expression .)
    EQ              reduce using rule 64 (binary_expression -> cast_expression .)
    NQ              reduce using rule 64 (binary_expression -> cast_expression .)
    AND             reduce using rule 64 (binary_expression -> cast_expression .)
    OR              reduce using rule 64 (binary_expression -> cast_expression .)
    RBRACKET        reduce using rule 64 (binary_expression -> cast_expression .)
    SEMI            reduce using rule 64 (binary_expression -> cast_expression .)
    COMMA           reduce using rule 64 (binary_expression -> cast_expression .)
    RPAREN          reduce using rule 64 (binary_expression -> cast_expression .)
    RBRACE          reduce using rule 64 (binary_expression -> cast_expression .)
    LBRACE          reduce using rule 64 (binary_expression -> cast_expression .)
    IF              reduce using rule 64 (binary_expression -> cast_expression .)
    WHILE           reduce using rule 64 (binary_expression -> cast_expression .)
    FOR             reduce using rule 64 (binary_expression -> cast_expression .)
    BREAK           reduce using rule 64 (binary_expression -> cast_expression .)
    RETURN          reduce using rule 64 (binary_expression -> cast_expression .)
    ASSERT          reduce using rule 64 (binary_expression -> cast_expression .)
    PRINT           reduce using rule 64 (binary_expression -> cast_expression .)
    READ            reduce using rule 64 (binary_expression -> cast_expression .)
    INCREASE        reduce using rule 64 (binary_expression -> cast_expression .)
    DECREASE        reduce using rule 64 (binary_expression -> cast_expression .)
    LPAREN          reduce using rule 64 (binary_expression -> cast_expression .)
    ADDRESS         reduce using rule 64 (binary_expression -> cast_expression .)
    UMINUS          reduce using rule 64 (binary_expression -> cast_expression .)
    NOT             reduce using rule 64 (binary_expression -> cast_expression .)
    ID              reduce using rule 64 (binary_expression -> cast_expression .)
    STRING          reduce using rule 64 (binary_expression -> cast_expression .)
    INT_CONST       reduce using rule 64 (binary_expression -> cast_expression .)
    FLOAT_CONST     reduce using rule 64 (binary_expression -> cast_expression .)
    CHAR_CONST      reduce using rule 64 (binary_expression -> cast_expression .)
    ELSE            reduce using rule 64 (binary_expression -> cast_expression .)


state 40

    (105) unary_operator -> PLUS .

    LPAREN          reduce using rule 105 (unary_operator -> PLUS .)
    INCREASE        reduce using rule 105 (unary_operator -> PLUS .)
    DECREASE        reduce using rule 105 (unary_operator -> PLUS .)
    ADDRESS         reduce using rule 105 (unary_operator -> PLUS .)
    TIMES           reduce using rule 105 (unary_operator -> PLUS .)
    PLUS            reduce using rule 105 (unary_operator -> PLUS .)
    UMINUS          reduce using rule 105 (unary_operator -> PLUS .)
    NOT             reduce using rule 105 (unary_operator -> PLUS .)
    ID              reduce using rule 105 (unary_operator -> PLUS .)
    STRING          reduce using rule 105 (unary_operator -> PLUS .)
    INT_CONST       reduce using rule 105 (unary_operator -> PLUS .)
    FLOAT_CONST     reduce using rule 105 (unary_operator -> PLUS .)
    CHAR_CONST      reduce using rule 105 (unary_operator -> PLUS .)


state 41

    (104) unary_operator -> TIMES .

    LPAREN          reduce using rule 104 (unary_operator -> TIMES .)
    INCREASE        reduce using rule 104 (unary_operator -> TIMES .)
    DECREASE        reduce using rule 104 (unary_operator -> TIMES .)
    ADDRESS         reduce using rule 104 (unary_operator -> TIMES .)
    TIMES           reduce using rule 104 (unary_operator -> TIMES .)
    PLUS            reduce using rule 104 (unary_operator -> TIMES .)
    UMINUS          reduce using rule 104 (unary_operator -> TIMES .)
    NOT             reduce using rule 104 (unary_operator -> TIMES .)
    ID              reduce using rule 104 (unary_operator -> TIMES .)
    STRING          reduce using rule 104 (unary_operator -> TIMES .)
    INT_CONST       reduce using rule 104 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 104 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 104 (unary_operator -> TIMES .)


state 42

    (88) cast_expression -> unary_expression .

    PLUS            reduce using rule 88 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 88 (cast_expression -> unary_expression .)
    TIMES           reduce using rule 88 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 88 (cast_expression -> unary_expression .)
    MOD             reduce using rule 88 (cast_expression -> unary_expression .)
    LT              reduce using rule 88 (cast_expression -> unary_expression .)
    LE              reduce using rule 88 (cast_expression -> unary_expression .)
    GT              reduce using rule 88 (cast_expression -> unary_expression .)
    GE              reduce using rule 88 (cast_expression -> unary_expression .)
    EQ              reduce using rule 88 (cast_expression -> unary_expression .)
    NQ              reduce using rule 88 (cast_expression -> unary_expression .)
    AND             reduce using rule 88 (cast_expression -> unary_expression .)
    OR              reduce using rule 88 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 88 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 88 (cast_expression -> unary_expression .)
    EQTIMES         reduce using rule 88 (cast_expression -> unary_expression .)
    EQDIV           reduce using rule 88 (cast_expression -> unary_expression .)
    EQMOD           reduce using rule 88 (cast_expression -> unary_expression .)
    EQPLUS          reduce using rule 88 (cast_expression -> unary_expression .)
    EQMINUS         reduce using rule 88 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 88 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 88 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 88 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 88 (cast_expression -> unary_expression .)
    LBRACE          reduce using rule 88 (cast_expression -> unary_expression .)
    IF              reduce using rule 88 (cast_expression -> unary_expression .)
    WHILE           reduce using rule 88 (cast_expression -> unary_expression .)
    FOR             reduce using rule 88 (cast_expression -> unary_expression .)
    BREAK           reduce using rule 88 (cast_expression -> unary_expression .)
    RETURN          reduce using rule 88 (cast_expression -> unary_expression .)
    ASSERT          reduce using rule 88 (cast_expression -> unary_expression .)
    PRINT           reduce using rule 88 (cast_expression -> unary_expression .)
    READ            reduce using rule 88 (cast_expression -> unary_expression .)
    INCREASE        reduce using rule 88 (cast_expression -> unary_expression .)
    DECREASE        reduce using rule 88 (cast_expression -> unary_expression .)
    LPAREN          reduce using rule 88 (cast_expression -> unary_expression .)
    ADDRESS         reduce using rule 88 (cast_expression -> unary_expression .)
    UMINUS          reduce using rule 88 (cast_expression -> unary_expression .)
    NOT             reduce using rule 88 (cast_expression -> unary_expression .)
    ID              reduce using rule 88 (cast_expression -> unary_expression .)
    STRING          reduce using rule 88 (cast_expression -> unary_expression .)
    INT_CONST       reduce using rule 88 (cast_expression -> unary_expression .)
    FLOAT_CONST     reduce using rule 88 (cast_expression -> unary_expression .)
    CHAR_CONST      reduce using rule 88 (cast_expression -> unary_expression .)
    ELSE            reduce using rule 88 (cast_expression -> unary_expression .)


state 43

    (89) cast_expression -> LPAREN . type_specifier RPAREN cast_expression
    (93) primary_expression -> LPAREN . expression RPAREN
    (121) type_specifier -> . VOID
    (122) type_specifier -> . INT
    (123) type_specifier -> . FLOAT
    (124) type_specifier -> . CHAR
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    VOID            shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    type_specifier                 shift and go to state 86
    cast_expression                shift and go to state 39
    expression                     shift and go to state 87
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 44

    (78) unary_expression -> postfix_expression .
    (83) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (84) postfix_expression -> postfix_expression . LPAREN argument_expression RPAREN
    (85) postfix_expression -> postfix_expression . LPAREN RPAREN
    (86) postfix_expression -> postfix_expression . INCREASE
    (87) postfix_expression -> postfix_expression . DECREASE

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INCREASE resolved as shift
  ! shift/reduce conflict for DECREASE resolved as shift
    PLUS            reduce using rule 78 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 78 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 78 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 78 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 78 (unary_expression -> postfix_expression .)
    LT              reduce using rule 78 (unary_expression -> postfix_expression .)
    LE              reduce using rule 78 (unary_expression -> postfix_expression .)
    GT              reduce using rule 78 (unary_expression -> postfix_expression .)
    GE              reduce using rule 78 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 78 (unary_expression -> postfix_expression .)
    NQ              reduce using rule 78 (unary_expression -> postfix_expression .)
    AND             reduce using rule 78 (unary_expression -> postfix_expression .)
    OR              reduce using rule 78 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 78 (unary_expression -> postfix_expression .)
    EQUALS          reduce using rule 78 (unary_expression -> postfix_expression .)
    EQTIMES         reduce using rule 78 (unary_expression -> postfix_expression .)
    EQDIV           reduce using rule 78 (unary_expression -> postfix_expression .)
    EQMOD           reduce using rule 78 (unary_expression -> postfix_expression .)
    EQPLUS          reduce using rule 78 (unary_expression -> postfix_expression .)
    EQMINUS         reduce using rule 78 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 78 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 78 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 78 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 78 (unary_expression -> postfix_expression .)
    LBRACE          reduce using rule 78 (unary_expression -> postfix_expression .)
    IF              reduce using rule 78 (unary_expression -> postfix_expression .)
    WHILE           reduce using rule 78 (unary_expression -> postfix_expression .)
    FOR             reduce using rule 78 (unary_expression -> postfix_expression .)
    BREAK           reduce using rule 78 (unary_expression -> postfix_expression .)
    RETURN          reduce using rule 78 (unary_expression -> postfix_expression .)
    ASSERT          reduce using rule 78 (unary_expression -> postfix_expression .)
    PRINT           reduce using rule 78 (unary_expression -> postfix_expression .)
    READ            reduce using rule 78 (unary_expression -> postfix_expression .)
    ADDRESS         reduce using rule 78 (unary_expression -> postfix_expression .)
    UMINUS          reduce using rule 78 (unary_expression -> postfix_expression .)
    NOT             reduce using rule 78 (unary_expression -> postfix_expression .)
    ID              reduce using rule 78 (unary_expression -> postfix_expression .)
    STRING          reduce using rule 78 (unary_expression -> postfix_expression .)
    INT_CONST       reduce using rule 78 (unary_expression -> postfix_expression .)
    FLOAT_CONST     reduce using rule 78 (unary_expression -> postfix_expression .)
    CHAR_CONST      reduce using rule 78 (unary_expression -> postfix_expression .)
    ELSE            reduce using rule 78 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 89
    LPAREN          shift and go to state 90
    INCREASE        shift and go to state 91
    DECREASE        shift and go to state 92

  ! INCREASE        [ reduce using rule 78 (unary_expression -> postfix_expression .) ]
  ! DECREASE        [ reduce using rule 78 (unary_expression -> postfix_expression .) ]
  ! LPAREN          [ reduce using rule 78 (unary_expression -> postfix_expression .) ]


state 45

    (79) unary_expression -> INCREASE . unary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    LPAREN          shift and go to state 94
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 46

    (80) unary_expression -> DECREASE . unary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    LPAREN          shift and go to state 94
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    unary_expression               shift and go to state 95
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 47

    (81) unary_expression -> unary_operator . cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    LPAREN          shift and go to state 43
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    unary_operator                 shift and go to state 47
    cast_expression                shift and go to state 96
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 44
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 48

    (82) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 82 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 82 (postfix_expression -> primary_expression .)
    INCREASE        reduce using rule 82 (postfix_expression -> primary_expression .)
    DECREASE        reduce using rule 82 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 82 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 82 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 82 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 82 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 82 (postfix_expression -> primary_expression .)
    LT              reduce using rule 82 (postfix_expression -> primary_expression .)
    LE              reduce using rule 82 (postfix_expression -> primary_expression .)
    GT              reduce using rule 82 (postfix_expression -> primary_expression .)
    GE              reduce using rule 82 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 82 (postfix_expression -> primary_expression .)
    NQ              reduce using rule 82 (postfix_expression -> primary_expression .)
    AND             reduce using rule 82 (postfix_expression -> primary_expression .)
    OR              reduce using rule 82 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 82 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 82 (postfix_expression -> primary_expression .)
    EQTIMES         reduce using rule 82 (postfix_expression -> primary_expression .)
    EQDIV           reduce using rule 82 (postfix_expression -> primary_expression .)
    EQMOD           reduce using rule 82 (postfix_expression -> primary_expression .)
    EQPLUS          reduce using rule 82 (postfix_expression -> primary_expression .)
    EQMINUS         reduce using rule 82 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 82 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 82 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 82 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 82 (postfix_expression -> primary_expression .)
    LBRACE          reduce using rule 82 (postfix_expression -> primary_expression .)
    IF              reduce using rule 82 (postfix_expression -> primary_expression .)
    WHILE           reduce using rule 82 (postfix_expression -> primary_expression .)
    FOR             reduce using rule 82 (postfix_expression -> primary_expression .)
    BREAK           reduce using rule 82 (postfix_expression -> primary_expression .)
    RETURN          reduce using rule 82 (postfix_expression -> primary_expression .)
    ASSERT          reduce using rule 82 (postfix_expression -> primary_expression .)
    PRINT           reduce using rule 82 (postfix_expression -> primary_expression .)
    READ            reduce using rule 82 (postfix_expression -> primary_expression .)
    ADDRESS         reduce using rule 82 (postfix_expression -> primary_expression .)
    UMINUS          reduce using rule 82 (postfix_expression -> primary_expression .)
    NOT             reduce using rule 82 (postfix_expression -> primary_expression .)
    ID              reduce using rule 82 (postfix_expression -> primary_expression .)
    STRING          reduce using rule 82 (postfix_expression -> primary_expression .)
    INT_CONST       reduce using rule 82 (postfix_expression -> primary_expression .)
    FLOAT_CONST     reduce using rule 82 (postfix_expression -> primary_expression .)
    CHAR_CONST      reduce using rule 82 (postfix_expression -> primary_expression .)
    ELSE            reduce using rule 82 (postfix_expression -> primary_expression .)


state 49

    (103) unary_operator -> ADDRESS .

    LPAREN          reduce using rule 103 (unary_operator -> ADDRESS .)
    INCREASE        reduce using rule 103 (unary_operator -> ADDRESS .)
    DECREASE        reduce using rule 103 (unary_operator -> ADDRESS .)
    ADDRESS         reduce using rule 103 (unary_operator -> ADDRESS .)
    TIMES           reduce using rule 103 (unary_operator -> ADDRESS .)
    PLUS            reduce using rule 103 (unary_operator -> ADDRESS .)
    UMINUS          reduce using rule 103 (unary_operator -> ADDRESS .)
    NOT             reduce using rule 103 (unary_operator -> ADDRESS .)
    ID              reduce using rule 103 (unary_operator -> ADDRESS .)
    STRING          reduce using rule 103 (unary_operator -> ADDRESS .)
    INT_CONST       reduce using rule 103 (unary_operator -> ADDRESS .)
    FLOAT_CONST     reduce using rule 103 (unary_operator -> ADDRESS .)
    CHAR_CONST      reduce using rule 103 (unary_operator -> ADDRESS .)


state 50

    (106) unary_operator -> UMINUS .

    LPAREN          reduce using rule 106 (unary_operator -> UMINUS .)
    INCREASE        reduce using rule 106 (unary_operator -> UMINUS .)
    DECREASE        reduce using rule 106 (unary_operator -> UMINUS .)
    ADDRESS         reduce using rule 106 (unary_operator -> UMINUS .)
    TIMES           reduce using rule 106 (unary_operator -> UMINUS .)
    PLUS            reduce using rule 106 (unary_operator -> UMINUS .)
    UMINUS          reduce using rule 106 (unary_operator -> UMINUS .)
    NOT             reduce using rule 106 (unary_operator -> UMINUS .)
    ID              reduce using rule 106 (unary_operator -> UMINUS .)
    STRING          reduce using rule 106 (unary_operator -> UMINUS .)
    INT_CONST       reduce using rule 106 (unary_operator -> UMINUS .)
    FLOAT_CONST     reduce using rule 106 (unary_operator -> UMINUS .)
    CHAR_CONST      reduce using rule 106 (unary_operator -> UMINUS .)


state 51

    (107) unary_operator -> NOT .

    LPAREN          reduce using rule 107 (unary_operator -> NOT .)
    INCREASE        reduce using rule 107 (unary_operator -> NOT .)
    DECREASE        reduce using rule 107 (unary_operator -> NOT .)
    ADDRESS         reduce using rule 107 (unary_operator -> NOT .)
    TIMES           reduce using rule 107 (unary_operator -> NOT .)
    PLUS            reduce using rule 107 (unary_operator -> NOT .)
    UMINUS          reduce using rule 107 (unary_operator -> NOT .)
    NOT             reduce using rule 107 (unary_operator -> NOT .)
    ID              reduce using rule 107 (unary_operator -> NOT .)
    STRING          reduce using rule 107 (unary_operator -> NOT .)
    INT_CONST       reduce using rule 107 (unary_operator -> NOT .)
    FLOAT_CONST     reduce using rule 107 (unary_operator -> NOT .)
    CHAR_CONST      reduce using rule 107 (unary_operator -> NOT .)


state 52

    (90) primary_expression -> ID .

    LBRACKET        reduce using rule 90 (primary_expression -> ID .)
    LPAREN          reduce using rule 90 (primary_expression -> ID .)
    INCREASE        reduce using rule 90 (primary_expression -> ID .)
    DECREASE        reduce using rule 90 (primary_expression -> ID .)
    PLUS            reduce using rule 90 (primary_expression -> ID .)
    MINUS           reduce using rule 90 (primary_expression -> ID .)
    TIMES           reduce using rule 90 (primary_expression -> ID .)
    DIVIDE          reduce using rule 90 (primary_expression -> ID .)
    MOD             reduce using rule 90 (primary_expression -> ID .)
    LT              reduce using rule 90 (primary_expression -> ID .)
    LE              reduce using rule 90 (primary_expression -> ID .)
    GT              reduce using rule 90 (primary_expression -> ID .)
    GE              reduce using rule 90 (primary_expression -> ID .)
    EQ              reduce using rule 90 (primary_expression -> ID .)
    NQ              reduce using rule 90 (primary_expression -> ID .)
    AND             reduce using rule 90 (primary_expression -> ID .)
    OR              reduce using rule 90 (primary_expression -> ID .)
    RBRACKET        reduce using rule 90 (primary_expression -> ID .)
    EQUALS          reduce using rule 90 (primary_expression -> ID .)
    EQTIMES         reduce using rule 90 (primary_expression -> ID .)
    EQDIV           reduce using rule 90 (primary_expression -> ID .)
    EQMOD           reduce using rule 90 (primary_expression -> ID .)
    EQPLUS          reduce using rule 90 (primary_expression -> ID .)
    EQMINUS         reduce using rule 90 (primary_expression -> ID .)
    SEMI            reduce using rule 90 (primary_expression -> ID .)
    COMMA           reduce using rule 90 (primary_expression -> ID .)
    RPAREN          reduce using rule 90 (primary_expression -> ID .)
    RBRACE          reduce using rule 90 (primary_expression -> ID .)
    LBRACE          reduce using rule 90 (primary_expression -> ID .)
    IF              reduce using rule 90 (primary_expression -> ID .)
    WHILE           reduce using rule 90 (primary_expression -> ID .)
    FOR             reduce using rule 90 (primary_expression -> ID .)
    BREAK           reduce using rule 90 (primary_expression -> ID .)
    RETURN          reduce using rule 90 (primary_expression -> ID .)
    ASSERT          reduce using rule 90 (primary_expression -> ID .)
    PRINT           reduce using rule 90 (primary_expression -> ID .)
    READ            reduce using rule 90 (primary_expression -> ID .)
    ADDRESS         reduce using rule 90 (primary_expression -> ID .)
    UMINUS          reduce using rule 90 (primary_expression -> ID .)
    NOT             reduce using rule 90 (primary_expression -> ID .)
    ID              reduce using rule 90 (primary_expression -> ID .)
    STRING          reduce using rule 90 (primary_expression -> ID .)
    INT_CONST       reduce using rule 90 (primary_expression -> ID .)
    FLOAT_CONST     reduce using rule 90 (primary_expression -> ID .)
    CHAR_CONST      reduce using rule 90 (primary_expression -> ID .)
    ELSE            reduce using rule 90 (primary_expression -> ID .)


state 53

    (91) primary_expression -> constant .

    LBRACKET        reduce using rule 91 (primary_expression -> constant .)
    LPAREN          reduce using rule 91 (primary_expression -> constant .)
    INCREASE        reduce using rule 91 (primary_expression -> constant .)
    DECREASE        reduce using rule 91 (primary_expression -> constant .)
    PLUS            reduce using rule 91 (primary_expression -> constant .)
    MINUS           reduce using rule 91 (primary_expression -> constant .)
    TIMES           reduce using rule 91 (primary_expression -> constant .)
    DIVIDE          reduce using rule 91 (primary_expression -> constant .)
    MOD             reduce using rule 91 (primary_expression -> constant .)
    LT              reduce using rule 91 (primary_expression -> constant .)
    LE              reduce using rule 91 (primary_expression -> constant .)
    GT              reduce using rule 91 (primary_expression -> constant .)
    GE              reduce using rule 91 (primary_expression -> constant .)
    EQ              reduce using rule 91 (primary_expression -> constant .)
    NQ              reduce using rule 91 (primary_expression -> constant .)
    AND             reduce using rule 91 (primary_expression -> constant .)
    OR              reduce using rule 91 (primary_expression -> constant .)
    RBRACKET        reduce using rule 91 (primary_expression -> constant .)
    EQUALS          reduce using rule 91 (primary_expression -> constant .)
    EQTIMES         reduce using rule 91 (primary_expression -> constant .)
    EQDIV           reduce using rule 91 (primary_expression -> constant .)
    EQMOD           reduce using rule 91 (primary_expression -> constant .)
    EQPLUS          reduce using rule 91 (primary_expression -> constant .)
    EQMINUS         reduce using rule 91 (primary_expression -> constant .)
    SEMI            reduce using rule 91 (primary_expression -> constant .)
    COMMA           reduce using rule 91 (primary_expression -> constant .)
    RPAREN          reduce using rule 91 (primary_expression -> constant .)
    RBRACE          reduce using rule 91 (primary_expression -> constant .)
    LBRACE          reduce using rule 91 (primary_expression -> constant .)
    IF              reduce using rule 91 (primary_expression -> constant .)
    WHILE           reduce using rule 91 (primary_expression -> constant .)
    FOR             reduce using rule 91 (primary_expression -> constant .)
    BREAK           reduce using rule 91 (primary_expression -> constant .)
    RETURN          reduce using rule 91 (primary_expression -> constant .)
    ASSERT          reduce using rule 91 (primary_expression -> constant .)
    PRINT           reduce using rule 91 (primary_expression -> constant .)
    READ            reduce using rule 91 (primary_expression -> constant .)
    ADDRESS         reduce using rule 91 (primary_expression -> constant .)
    UMINUS          reduce using rule 91 (primary_expression -> constant .)
    NOT             reduce using rule 91 (primary_expression -> constant .)
    ID              reduce using rule 91 (primary_expression -> constant .)
    STRING          reduce using rule 91 (primary_expression -> constant .)
    INT_CONST       reduce using rule 91 (primary_expression -> constant .)
    FLOAT_CONST     reduce using rule 91 (primary_expression -> constant .)
    CHAR_CONST      reduce using rule 91 (primary_expression -> constant .)
    ELSE            reduce using rule 91 (primary_expression -> constant .)


state 54

    (92) primary_expression -> STRING .

    LBRACKET        reduce using rule 92 (primary_expression -> STRING .)
    LPAREN          reduce using rule 92 (primary_expression -> STRING .)
    INCREASE        reduce using rule 92 (primary_expression -> STRING .)
    DECREASE        reduce using rule 92 (primary_expression -> STRING .)
    PLUS            reduce using rule 92 (primary_expression -> STRING .)
    MINUS           reduce using rule 92 (primary_expression -> STRING .)
    TIMES           reduce using rule 92 (primary_expression -> STRING .)
    DIVIDE          reduce using rule 92 (primary_expression -> STRING .)
    MOD             reduce using rule 92 (primary_expression -> STRING .)
    LT              reduce using rule 92 (primary_expression -> STRING .)
    LE              reduce using rule 92 (primary_expression -> STRING .)
    GT              reduce using rule 92 (primary_expression -> STRING .)
    GE              reduce using rule 92 (primary_expression -> STRING .)
    EQ              reduce using rule 92 (primary_expression -> STRING .)
    NQ              reduce using rule 92 (primary_expression -> STRING .)
    AND             reduce using rule 92 (primary_expression -> STRING .)
    OR              reduce using rule 92 (primary_expression -> STRING .)
    RBRACKET        reduce using rule 92 (primary_expression -> STRING .)
    EQUALS          reduce using rule 92 (primary_expression -> STRING .)
    EQTIMES         reduce using rule 92 (primary_expression -> STRING .)
    EQDIV           reduce using rule 92 (primary_expression -> STRING .)
    EQMOD           reduce using rule 92 (primary_expression -> STRING .)
    EQPLUS          reduce using rule 92 (primary_expression -> STRING .)
    EQMINUS         reduce using rule 92 (primary_expression -> STRING .)
    SEMI            reduce using rule 92 (primary_expression -> STRING .)
    COMMA           reduce using rule 92 (primary_expression -> STRING .)
    RPAREN          reduce using rule 92 (primary_expression -> STRING .)
    RBRACE          reduce using rule 92 (primary_expression -> STRING .)
    LBRACE          reduce using rule 92 (primary_expression -> STRING .)
    IF              reduce using rule 92 (primary_expression -> STRING .)
    WHILE           reduce using rule 92 (primary_expression -> STRING .)
    FOR             reduce using rule 92 (primary_expression -> STRING .)
    BREAK           reduce using rule 92 (primary_expression -> STRING .)
    RETURN          reduce using rule 92 (primary_expression -> STRING .)
    ASSERT          reduce using rule 92 (primary_expression -> STRING .)
    PRINT           reduce using rule 92 (primary_expression -> STRING .)
    READ            reduce using rule 92 (primary_expression -> STRING .)
    ADDRESS         reduce using rule 92 (primary_expression -> STRING .)
    UMINUS          reduce using rule 92 (primary_expression -> STRING .)
    NOT             reduce using rule 92 (primary_expression -> STRING .)
    ID              reduce using rule 92 (primary_expression -> STRING .)
    STRING          reduce using rule 92 (primary_expression -> STRING .)
    INT_CONST       reduce using rule 92 (primary_expression -> STRING .)
    FLOAT_CONST     reduce using rule 92 (primary_expression -> STRING .)
    CHAR_CONST      reduce using rule 92 (primary_expression -> STRING .)
    ELSE            reduce using rule 92 (primary_expression -> STRING .)


state 55

    (108) constant -> INT_CONST .

    LBRACKET        reduce using rule 108 (constant -> INT_CONST .)
    LPAREN          reduce using rule 108 (constant -> INT_CONST .)
    INCREASE        reduce using rule 108 (constant -> INT_CONST .)
    DECREASE        reduce using rule 108 (constant -> INT_CONST .)
    PLUS            reduce using rule 108 (constant -> INT_CONST .)
    MINUS           reduce using rule 108 (constant -> INT_CONST .)
    TIMES           reduce using rule 108 (constant -> INT_CONST .)
    DIVIDE          reduce using rule 108 (constant -> INT_CONST .)
    MOD             reduce using rule 108 (constant -> INT_CONST .)
    LT              reduce using rule 108 (constant -> INT_CONST .)
    LE              reduce using rule 108 (constant -> INT_CONST .)
    GT              reduce using rule 108 (constant -> INT_CONST .)
    GE              reduce using rule 108 (constant -> INT_CONST .)
    EQ              reduce using rule 108 (constant -> INT_CONST .)
    NQ              reduce using rule 108 (constant -> INT_CONST .)
    AND             reduce using rule 108 (constant -> INT_CONST .)
    OR              reduce using rule 108 (constant -> INT_CONST .)
    RBRACKET        reduce using rule 108 (constant -> INT_CONST .)
    EQUALS          reduce using rule 108 (constant -> INT_CONST .)
    EQTIMES         reduce using rule 108 (constant -> INT_CONST .)
    EQDIV           reduce using rule 108 (constant -> INT_CONST .)
    EQMOD           reduce using rule 108 (constant -> INT_CONST .)
    EQPLUS          reduce using rule 108 (constant -> INT_CONST .)
    EQMINUS         reduce using rule 108 (constant -> INT_CONST .)
    SEMI            reduce using rule 108 (constant -> INT_CONST .)
    COMMA           reduce using rule 108 (constant -> INT_CONST .)
    RPAREN          reduce using rule 108 (constant -> INT_CONST .)
    RBRACE          reduce using rule 108 (constant -> INT_CONST .)
    LBRACE          reduce using rule 108 (constant -> INT_CONST .)
    IF              reduce using rule 108 (constant -> INT_CONST .)
    WHILE           reduce using rule 108 (constant -> INT_CONST .)
    FOR             reduce using rule 108 (constant -> INT_CONST .)
    BREAK           reduce using rule 108 (constant -> INT_CONST .)
    RETURN          reduce using rule 108 (constant -> INT_CONST .)
    ASSERT          reduce using rule 108 (constant -> INT_CONST .)
    PRINT           reduce using rule 108 (constant -> INT_CONST .)
    READ            reduce using rule 108 (constant -> INT_CONST .)
    ADDRESS         reduce using rule 108 (constant -> INT_CONST .)
    UMINUS          reduce using rule 108 (constant -> INT_CONST .)
    NOT             reduce using rule 108 (constant -> INT_CONST .)
    ID              reduce using rule 108 (constant -> INT_CONST .)
    STRING          reduce using rule 108 (constant -> INT_CONST .)
    INT_CONST       reduce using rule 108 (constant -> INT_CONST .)
    FLOAT_CONST     reduce using rule 108 (constant -> INT_CONST .)
    CHAR_CONST      reduce using rule 108 (constant -> INT_CONST .)
    ELSE            reduce using rule 108 (constant -> INT_CONST .)


state 56

    (109) constant -> FLOAT_CONST .

    LBRACKET        reduce using rule 109 (constant -> FLOAT_CONST .)
    LPAREN          reduce using rule 109 (constant -> FLOAT_CONST .)
    INCREASE        reduce using rule 109 (constant -> FLOAT_CONST .)
    DECREASE        reduce using rule 109 (constant -> FLOAT_CONST .)
    PLUS            reduce using rule 109 (constant -> FLOAT_CONST .)
    MINUS           reduce using rule 109 (constant -> FLOAT_CONST .)
    TIMES           reduce using rule 109 (constant -> FLOAT_CONST .)
    DIVIDE          reduce using rule 109 (constant -> FLOAT_CONST .)
    MOD             reduce using rule 109 (constant -> FLOAT_CONST .)
    LT              reduce using rule 109 (constant -> FLOAT_CONST .)
    LE              reduce using rule 109 (constant -> FLOAT_CONST .)
    GT              reduce using rule 109 (constant -> FLOAT_CONST .)
    GE              reduce using rule 109 (constant -> FLOAT_CONST .)
    EQ              reduce using rule 109 (constant -> FLOAT_CONST .)
    NQ              reduce using rule 109 (constant -> FLOAT_CONST .)
    AND             reduce using rule 109 (constant -> FLOAT_CONST .)
    OR              reduce using rule 109 (constant -> FLOAT_CONST .)
    RBRACKET        reduce using rule 109 (constant -> FLOAT_CONST .)
    EQUALS          reduce using rule 109 (constant -> FLOAT_CONST .)
    EQTIMES         reduce using rule 109 (constant -> FLOAT_CONST .)
    EQDIV           reduce using rule 109 (constant -> FLOAT_CONST .)
    EQMOD           reduce using rule 109 (constant -> FLOAT_CONST .)
    EQPLUS          reduce using rule 109 (constant -> FLOAT_CONST .)
    EQMINUS         reduce using rule 109 (constant -> FLOAT_CONST .)
    SEMI            reduce using rule 109 (constant -> FLOAT_CONST .)
    COMMA           reduce using rule 109 (constant -> FLOAT_CONST .)
    RPAREN          reduce using rule 109 (constant -> FLOAT_CONST .)
    RBRACE          reduce using rule 109 (constant -> FLOAT_CONST .)
    LBRACE          reduce using rule 109 (constant -> FLOAT_CONST .)
    IF              reduce using rule 109 (constant -> FLOAT_CONST .)
    WHILE           reduce using rule 109 (constant -> FLOAT_CONST .)
    FOR             reduce using rule 109 (constant -> FLOAT_CONST .)
    BREAK           reduce using rule 109 (constant -> FLOAT_CONST .)
    RETURN          reduce using rule 109 (constant -> FLOAT_CONST .)
    ASSERT          reduce using rule 109 (constant -> FLOAT_CONST .)
    PRINT           reduce using rule 109 (constant -> FLOAT_CONST .)
    READ            reduce using rule 109 (constant -> FLOAT_CONST .)
    ADDRESS         reduce using rule 109 (constant -> FLOAT_CONST .)
    UMINUS          reduce using rule 109 (constant -> FLOAT_CONST .)
    NOT             reduce using rule 109 (constant -> FLOAT_CONST .)
    ID              reduce using rule 109 (constant -> FLOAT_CONST .)
    STRING          reduce using rule 109 (constant -> FLOAT_CONST .)
    INT_CONST       reduce using rule 109 (constant -> FLOAT_CONST .)
    FLOAT_CONST     reduce using rule 109 (constant -> FLOAT_CONST .)
    CHAR_CONST      reduce using rule 109 (constant -> FLOAT_CONST .)
    ELSE            reduce using rule 109 (constant -> FLOAT_CONST .)


state 57

    (110) constant -> CHAR_CONST .

    LBRACKET        reduce using rule 110 (constant -> CHAR_CONST .)
    LPAREN          reduce using rule 110 (constant -> CHAR_CONST .)
    INCREASE        reduce using rule 110 (constant -> CHAR_CONST .)
    DECREASE        reduce using rule 110 (constant -> CHAR_CONST .)
    PLUS            reduce using rule 110 (constant -> CHAR_CONST .)
    MINUS           reduce using rule 110 (constant -> CHAR_CONST .)
    TIMES           reduce using rule 110 (constant -> CHAR_CONST .)
    DIVIDE          reduce using rule 110 (constant -> CHAR_CONST .)
    MOD             reduce using rule 110 (constant -> CHAR_CONST .)
    LT              reduce using rule 110 (constant -> CHAR_CONST .)
    LE              reduce using rule 110 (constant -> CHAR_CONST .)
    GT              reduce using rule 110 (constant -> CHAR_CONST .)
    GE              reduce using rule 110 (constant -> CHAR_CONST .)
    EQ              reduce using rule 110 (constant -> CHAR_CONST .)
    NQ              reduce using rule 110 (constant -> CHAR_CONST .)
    AND             reduce using rule 110 (constant -> CHAR_CONST .)
    OR              reduce using rule 110 (constant -> CHAR_CONST .)
    RBRACKET        reduce using rule 110 (constant -> CHAR_CONST .)
    EQUALS          reduce using rule 110 (constant -> CHAR_CONST .)
    EQTIMES         reduce using rule 110 (constant -> CHAR_CONST .)
    EQDIV           reduce using rule 110 (constant -> CHAR_CONST .)
    EQMOD           reduce using rule 110 (constant -> CHAR_CONST .)
    EQPLUS          reduce using rule 110 (constant -> CHAR_CONST .)
    EQMINUS         reduce using rule 110 (constant -> CHAR_CONST .)
    SEMI            reduce using rule 110 (constant -> CHAR_CONST .)
    COMMA           reduce using rule 110 (constant -> CHAR_CONST .)
    RPAREN          reduce using rule 110 (constant -> CHAR_CONST .)
    RBRACE          reduce using rule 110 (constant -> CHAR_CONST .)
    LBRACE          reduce using rule 110 (constant -> CHAR_CONST .)
    IF              reduce using rule 110 (constant -> CHAR_CONST .)
    WHILE           reduce using rule 110 (constant -> CHAR_CONST .)
    FOR             reduce using rule 110 (constant -> CHAR_CONST .)
    BREAK           reduce using rule 110 (constant -> CHAR_CONST .)
    RETURN          reduce using rule 110 (constant -> CHAR_CONST .)
    ASSERT          reduce using rule 110 (constant -> CHAR_CONST .)
    PRINT           reduce using rule 110 (constant -> CHAR_CONST .)
    READ            reduce using rule 110 (constant -> CHAR_CONST .)
    ADDRESS         reduce using rule 110 (constant -> CHAR_CONST .)
    UMINUS          reduce using rule 110 (constant -> CHAR_CONST .)
    NOT             reduce using rule 110 (constant -> CHAR_CONST .)
    ID              reduce using rule 110 (constant -> CHAR_CONST .)
    STRING          reduce using rule 110 (constant -> CHAR_CONST .)
    INT_CONST       reduce using rule 110 (constant -> CHAR_CONST .)
    FLOAT_CONST     reduce using rule 110 (constant -> CHAR_CONST .)
    CHAR_CONST      reduce using rule 110 (constant -> CHAR_CONST .)
    ELSE            reduce using rule 110 (constant -> CHAR_CONST .)


state 58

    (117) direct_declarator -> direct_declarator LPAREN parameter_list . RPAREN
    (22) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          shift and go to state 97
    COMMA           shift and go to state 98


state 59

    (118) direct_declarator -> direct_declarator LPAREN id_list . RPAREN
    (120) id_list -> id_list . ID

    RPAREN          shift and go to state 99
    ID              shift and go to state 100


state 60

    (21) parameter_list -> parameter_declaration .

    RPAREN          reduce using rule 21 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 21 (parameter_list -> parameter_declaration .)


state 61

    (119) id_list -> ID .

    RPAREN          reduce using rule 119 (id_list -> ID .)
    ID              reduce using rule 119 (id_list -> ID .)


state 62

    (23) parameter_declaration -> type_specifier . declarator
    (19) declarator -> . pointer direct_declarator
    (20) declarator -> . direct_declarator
    (111) pointer -> . TIMES pointer
    (112) pointer -> . TIMES
    (113) direct_declarator -> . ID
    (114) direct_declarator -> . LPAREN declarator RPAREN
    (115) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (116) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (117) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (118) direct_declarator -> . direct_declarator LPAREN id_list RPAREN

    TIMES           shift and go to state 13
    ID              shift and go to state 14
    LPAREN          shift and go to state 15

    declarator                     shift and go to state 101
    pointer                        shift and go to state 11
    direct_declarator              shift and go to state 12

state 63

    (114) direct_declarator -> LPAREN declarator RPAREN .

    LBRACKET        reduce using rule 114 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 114 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 114 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 114 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 114 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 114 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 114 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 114 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 114 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 114 (direct_declarator -> LPAREN declarator RPAREN .)


state 64

    (4) function_definition -> type_specifier declarator declaration_list compound_statement .

    $end            reduce using rule 4 (function_definition -> type_specifier declarator declaration_list compound_statement .)


state 65

    (11) init_declarator -> declarator EQUALS initializer .

    SEMI            reduce using rule 11 (init_declarator -> declarator EQUALS initializer .)
    COMMA           reduce using rule 11 (init_declarator -> declarator EQUALS initializer .)


state 66

    (12) initializer -> assignment_expression .

    SEMI            reduce using rule 12 (initializer -> assignment_expression .)
    COMMA           reduce using rule 12 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 12 (initializer -> assignment_expression .)


state 67

    (13) initializer -> LBRACE . initializer_list RBRACE
    (14) initializer -> LBRACE . initializer_list COMMA RBRACE
    (15) initializer_list -> . initializer
    (16) initializer_list -> . initializer_list COMMA initializer
    (12) initializer -> . assignment_expression
    (13) initializer -> . LBRACE initializer_list RBRACE
    (14) initializer -> . LBRACE initializer_list COMMA RBRACE
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    LBRACE          shift and go to state 67
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    initializer_list               shift and go to state 102
    initializer                    shift and go to state 103
    assignment_expression          shift and go to state 66
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 68

    (62) assignment_expression -> binary_expression .
    (65) binary_expression -> binary_expression . PLUS binary_expression
    (66) binary_expression -> binary_expression . MINUS binary_expression
    (67) binary_expression -> binary_expression . TIMES binary_expression
    (68) binary_expression -> binary_expression . DIVIDE binary_expression
    (69) binary_expression -> binary_expression . MOD binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GE binary_expression
    (74) binary_expression -> binary_expression . EQ binary_expression
    (75) binary_expression -> binary_expression . NQ binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    SEMI            reduce using rule 62 (assignment_expression -> binary_expression .)
    COMMA           reduce using rule 62 (assignment_expression -> binary_expression .)
    RPAREN          reduce using rule 62 (assignment_expression -> binary_expression .)
    RBRACE          reduce using rule 62 (assignment_expression -> binary_expression .)
    LBRACE          reduce using rule 62 (assignment_expression -> binary_expression .)
    IF              reduce using rule 62 (assignment_expression -> binary_expression .)
    WHILE           reduce using rule 62 (assignment_expression -> binary_expression .)
    FOR             reduce using rule 62 (assignment_expression -> binary_expression .)
    BREAK           reduce using rule 62 (assignment_expression -> binary_expression .)
    RETURN          reduce using rule 62 (assignment_expression -> binary_expression .)
    ASSERT          reduce using rule 62 (assignment_expression -> binary_expression .)
    PRINT           reduce using rule 62 (assignment_expression -> binary_expression .)
    READ            reduce using rule 62 (assignment_expression -> binary_expression .)
    INCREASE        reduce using rule 62 (assignment_expression -> binary_expression .)
    DECREASE        reduce using rule 62 (assignment_expression -> binary_expression .)
    LPAREN          reduce using rule 62 (assignment_expression -> binary_expression .)
    ADDRESS         reduce using rule 62 (assignment_expression -> binary_expression .)
    UMINUS          reduce using rule 62 (assignment_expression -> binary_expression .)
    NOT             reduce using rule 62 (assignment_expression -> binary_expression .)
    ID              reduce using rule 62 (assignment_expression -> binary_expression .)
    STRING          reduce using rule 62 (assignment_expression -> binary_expression .)
    INT_CONST       reduce using rule 62 (assignment_expression -> binary_expression .)
    FLOAT_CONST     reduce using rule 62 (assignment_expression -> binary_expression .)
    CHAR_CONST      reduce using rule 62 (assignment_expression -> binary_expression .)
    RBRACKET        reduce using rule 62 (assignment_expression -> binary_expression .)
    ELSE            reduce using rule 62 (assignment_expression -> binary_expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77
    LT              shift and go to state 78
    LE              shift and go to state 79
    GT              shift and go to state 80
    GE              shift and go to state 81
    EQ              shift and go to state 82
    NQ              shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85

  ! TIMES           [ reduce using rule 62 (assignment_expression -> binary_expression .) ]
  ! PLUS            [ reduce using rule 62 (assignment_expression -> binary_expression .) ]


state 69

    (63) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (88) cast_expression -> unary_expression .
    (97) assignment_operator -> . EQUALS
    (98) assignment_operator -> . EQTIMES
    (99) assignment_operator -> . EQDIV
    (100) assignment_operator -> . EQMOD
    (101) assignment_operator -> . EQPLUS
    (102) assignment_operator -> . EQMINUS

    PLUS            reduce using rule 88 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 88 (cast_expression -> unary_expression .)
    TIMES           reduce using rule 88 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 88 (cast_expression -> unary_expression .)
    MOD             reduce using rule 88 (cast_expression -> unary_expression .)
    LT              reduce using rule 88 (cast_expression -> unary_expression .)
    LE              reduce using rule 88 (cast_expression -> unary_expression .)
    GT              reduce using rule 88 (cast_expression -> unary_expression .)
    GE              reduce using rule 88 (cast_expression -> unary_expression .)
    EQ              reduce using rule 88 (cast_expression -> unary_expression .)
    NQ              reduce using rule 88 (cast_expression -> unary_expression .)
    AND             reduce using rule 88 (cast_expression -> unary_expression .)
    OR              reduce using rule 88 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 88 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 88 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 88 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 88 (cast_expression -> unary_expression .)
    LBRACE          reduce using rule 88 (cast_expression -> unary_expression .)
    IF              reduce using rule 88 (cast_expression -> unary_expression .)
    WHILE           reduce using rule 88 (cast_expression -> unary_expression .)
    FOR             reduce using rule 88 (cast_expression -> unary_expression .)
    BREAK           reduce using rule 88 (cast_expression -> unary_expression .)
    RETURN          reduce using rule 88 (cast_expression -> unary_expression .)
    ASSERT          reduce using rule 88 (cast_expression -> unary_expression .)
    PRINT           reduce using rule 88 (cast_expression -> unary_expression .)
    READ            reduce using rule 88 (cast_expression -> unary_expression .)
    INCREASE        reduce using rule 88 (cast_expression -> unary_expression .)
    DECREASE        reduce using rule 88 (cast_expression -> unary_expression .)
    LPAREN          reduce using rule 88 (cast_expression -> unary_expression .)
    ADDRESS         reduce using rule 88 (cast_expression -> unary_expression .)
    UMINUS          reduce using rule 88 (cast_expression -> unary_expression .)
    NOT             reduce using rule 88 (cast_expression -> unary_expression .)
    ID              reduce using rule 88 (cast_expression -> unary_expression .)
    STRING          reduce using rule 88 (cast_expression -> unary_expression .)
    INT_CONST       reduce using rule 88 (cast_expression -> unary_expression .)
    FLOAT_CONST     reduce using rule 88 (cast_expression -> unary_expression .)
    CHAR_CONST      reduce using rule 88 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 88 (cast_expression -> unary_expression .)
    ELSE            reduce using rule 88 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 105
    EQTIMES         shift and go to state 106
    EQDIV           shift and go to state 107
    EQMOD           shift and go to state 108
    EQPLUS          shift and go to state 109
    EQMINUS         shift and go to state 110

    assignment_operator            shift and go to state 104

state 70

    (9) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMI            reduce using rule 9 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 9 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 71

    (24) compound_statement -> LBRACE declaration_list . statement_list RBRACE
    (18) declaration_list -> declaration_list . declaration
    (60) statement_list -> . statement
    (61) statement_list -> . statement_list statement
    (6) declaration -> . type_specifier SEMI
    (7) declaration -> . type_specifier init_declarator_list SEMI
    (52) statement -> . expression_statement
    (53) statement -> . compound_statement
    (54) statement -> . selection_statement
    (55) statement -> . iteration_statement
    (56) statement -> . jump_statement
    (57) statement -> . assert_statement
    (58) statement -> . print_statement
    (59) statement -> . read_statement
    (121) type_specifier -> . VOID
    (122) type_specifier -> . INT
    (123) type_specifier -> . FLOAT
    (124) type_specifier -> . CHAR
    (25) expression_statement -> . expression
    (26) expression_statement -> . empty
    (24) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN statement
    (30) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (31) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (32) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (33) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (34) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (35) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (36) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (37) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (38) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (39) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (40) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (41) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (42) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (43) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (44) jump_statement -> . BREAK SEMI
    (45) jump_statement -> . RETURN expression SEMI
    (46) jump_statement -> . RETURN SEMI
    (47) assert_statement -> . ASSERT expression SEMI
    (48) assert_statement -> . ASSERT SEMI
    (49) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (50) print_statement -> . PRINT LPAREN RPAREN SEMI
    (51) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (125) empty -> .
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for INCREASE resolved as shift
  ! shift/reduce conflict for DECREASE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ADDRESS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for CHAR_CONST resolved as shift
    VOID            shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    LBRACE          shift and go to state 34
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    RETURN          shift and go to state 127
    ASSERT          shift and go to state 128
    PRINT           shift and go to state 129
    READ            shift and go to state 130
    RBRACE          reduce using rule 125 (empty -> .)
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

  ! LBRACE          [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! BREAK           [ reduce using rule 125 (empty -> .) ]
  ! RETURN          [ reduce using rule 125 (empty -> .) ]
  ! ASSERT          [ reduce using rule 125 (empty -> .) ]
  ! PRINT           [ reduce using rule 125 (empty -> .) ]
  ! READ            [ reduce using rule 125 (empty -> .) ]
  ! INCREASE        [ reduce using rule 125 (empty -> .) ]
  ! DECREASE        [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ADDRESS         [ reduce using rule 125 (empty -> .) ]
  ! TIMES           [ reduce using rule 125 (empty -> .) ]
  ! PLUS            [ reduce using rule 125 (empty -> .) ]
  ! UMINUS          [ reduce using rule 125 (empty -> .) ]
  ! NOT             [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]
  ! STRING          [ reduce using rule 125 (empty -> .) ]
  ! INT_CONST       [ reduce using rule 125 (empty -> .) ]
  ! FLOAT_CONST     [ reduce using rule 125 (empty -> .) ]
  ! CHAR_CONST      [ reduce using rule 125 (empty -> .) ]

    statement_list                 shift and go to state 111
    declaration                    shift and go to state 33
    statement                      shift and go to state 112
    type_specifier                 shift and go to state 22
    expression_statement           shift and go to state 113
    compound_statement             shift and go to state 114
    selection_statement            shift and go to state 115
    iteration_statement            shift and go to state 116
    jump_statement                 shift and go to state 117
    assert_statement               shift and go to state 118
    print_statement                shift and go to state 119
    read_statement                 shift and go to state 120
    expression                     shift and go to state 121
    empty                          shift and go to state 122
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 72

    (115) direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .

    LBRACKET        reduce using rule 115 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    LPAREN          reduce using rule 115 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    VOID            reduce using rule 115 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    INT             reduce using rule 115 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    FLOAT           reduce using rule 115 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    CHAR            reduce using rule 115 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    EQUALS          reduce using rule 115 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    SEMI            reduce using rule 115 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    COMMA           reduce using rule 115 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    RPAREN          reduce using rule 115 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)


state 73

    (65) binary_expression -> binary_expression PLUS . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    LPAREN          shift and go to state 43
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    binary_expression              shift and go to state 131
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 74

    (66) binary_expression -> binary_expression MINUS . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    LPAREN          shift and go to state 43
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    binary_expression              shift and go to state 132
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 75

    (67) binary_expression -> binary_expression TIMES . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    LPAREN          shift and go to state 43
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    binary_expression              shift and go to state 133
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 76

    (68) binary_expression -> binary_expression DIVIDE . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    LPAREN          shift and go to state 43
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    binary_expression              shift and go to state 134
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 77

    (69) binary_expression -> binary_expression MOD . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    LPAREN          shift and go to state 43
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    binary_expression              shift and go to state 135
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 78

    (70) binary_expression -> binary_expression LT . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    LPAREN          shift and go to state 43
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    binary_expression              shift and go to state 136
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 79

    (71) binary_expression -> binary_expression LE . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    LPAREN          shift and go to state 43
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    binary_expression              shift and go to state 137
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 80

    (72) binary_expression -> binary_expression GT . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    LPAREN          shift and go to state 43
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    binary_expression              shift and go to state 138
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 81

    (73) binary_expression -> binary_expression GE . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    LPAREN          shift and go to state 43
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    binary_expression              shift and go to state 139
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 82

    (74) binary_expression -> binary_expression EQ . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    LPAREN          shift and go to state 43
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    binary_expression              shift and go to state 140
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 83

    (75) binary_expression -> binary_expression NQ . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    LPAREN          shift and go to state 43
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    binary_expression              shift and go to state 141
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 84

    (76) binary_expression -> binary_expression AND . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    LPAREN          shift and go to state 43
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    binary_expression              shift and go to state 142
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 85

    (77) binary_expression -> binary_expression OR . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    LPAREN          shift and go to state 43
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    binary_expression              shift and go to state 143
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 86

    (89) cast_expression -> LPAREN type_specifier . RPAREN cast_expression

    RPAREN          shift and go to state 144


state 87

    (93) primary_expression -> LPAREN expression . RPAREN
    (28) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 145
    COMMA           shift and go to state 146


state 88

    (27) expression -> assignment_expression .

    RPAREN          reduce using rule 27 (expression -> assignment_expression .)
    COMMA           reduce using rule 27 (expression -> assignment_expression .)
    RBRACE          reduce using rule 27 (expression -> assignment_expression .)
    LBRACE          reduce using rule 27 (expression -> assignment_expression .)
    IF              reduce using rule 27 (expression -> assignment_expression .)
    WHILE           reduce using rule 27 (expression -> assignment_expression .)
    FOR             reduce using rule 27 (expression -> assignment_expression .)
    BREAK           reduce using rule 27 (expression -> assignment_expression .)
    RETURN          reduce using rule 27 (expression -> assignment_expression .)
    ASSERT          reduce using rule 27 (expression -> assignment_expression .)
    PRINT           reduce using rule 27 (expression -> assignment_expression .)
    READ            reduce using rule 27 (expression -> assignment_expression .)
    INCREASE        reduce using rule 27 (expression -> assignment_expression .)
    DECREASE        reduce using rule 27 (expression -> assignment_expression .)
    LPAREN          reduce using rule 27 (expression -> assignment_expression .)
    ADDRESS         reduce using rule 27 (expression -> assignment_expression .)
    TIMES           reduce using rule 27 (expression -> assignment_expression .)
    PLUS            reduce using rule 27 (expression -> assignment_expression .)
    UMINUS          reduce using rule 27 (expression -> assignment_expression .)
    NOT             reduce using rule 27 (expression -> assignment_expression .)
    ID              reduce using rule 27 (expression -> assignment_expression .)
    STRING          reduce using rule 27 (expression -> assignment_expression .)
    INT_CONST       reduce using rule 27 (expression -> assignment_expression .)
    FLOAT_CONST     reduce using rule 27 (expression -> assignment_expression .)
    CHAR_CONST      reduce using rule 27 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 27 (expression -> assignment_expression .)
    SEMI            reduce using rule 27 (expression -> assignment_expression .)
    ELSE            reduce using rule 27 (expression -> assignment_expression .)


state 89

    (83) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    postfix_expression             shift and go to state 44
    expression                     shift and go to state 147
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 90

    (84) postfix_expression -> postfix_expression LPAREN . argument_expression RPAREN
    (85) postfix_expression -> postfix_expression LPAREN . RPAREN
    (94) argument_expression -> . assignment_expression
    (95) argument_expression -> . argument_expression COMMA assignment_expression
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    RPAREN          shift and go to state 149
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    postfix_expression             shift and go to state 44
    argument_expression            shift and go to state 148
    assignment_expression          shift and go to state 150
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 91

    (86) postfix_expression -> postfix_expression INCREASE .

    LBRACKET        reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    LPAREN          reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    INCREASE        reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    DECREASE        reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    PLUS            reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    MINUS           reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    TIMES           reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    DIVIDE          reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    MOD             reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    LT              reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    LE              reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    GT              reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    GE              reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    EQ              reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    NQ              reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    AND             reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    OR              reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    RBRACKET        reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    EQUALS          reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    EQTIMES         reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    EQDIV           reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    EQMOD           reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    EQPLUS          reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    EQMINUS         reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    SEMI            reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    COMMA           reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    RPAREN          reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    RBRACE          reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    LBRACE          reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    IF              reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    WHILE           reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    FOR             reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    BREAK           reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    RETURN          reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    ASSERT          reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    PRINT           reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    READ            reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    ADDRESS         reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    UMINUS          reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    NOT             reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    ID              reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    STRING          reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    INT_CONST       reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    FLOAT_CONST     reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    CHAR_CONST      reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)
    ELSE            reduce using rule 86 (postfix_expression -> postfix_expression INCREASE .)


state 92

    (87) postfix_expression -> postfix_expression DECREASE .

    LBRACKET        reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    LPAREN          reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    INCREASE        reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    DECREASE        reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    PLUS            reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    MINUS           reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    TIMES           reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    DIVIDE          reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    MOD             reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    LT              reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    LE              reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    GT              reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    GE              reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    EQ              reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    NQ              reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    AND             reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    OR              reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    RBRACKET        reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    EQUALS          reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    EQTIMES         reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    EQDIV           reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    EQMOD           reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    EQPLUS          reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    EQMINUS         reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    SEMI            reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    COMMA           reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    RPAREN          reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    RBRACE          reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    LBRACE          reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    IF              reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    WHILE           reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    FOR             reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    BREAK           reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    RETURN          reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    ASSERT          reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    PRINT           reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    READ            reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    ADDRESS         reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    UMINUS          reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    NOT             reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    ID              reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    STRING          reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    INT_CONST       reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    FLOAT_CONST     reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    CHAR_CONST      reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)
    ELSE            reduce using rule 87 (postfix_expression -> postfix_expression DECREASE .)


state 93

    (79) unary_expression -> INCREASE unary_expression .

    PLUS            reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    MINUS           reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    TIMES           reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    DIVIDE          reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    MOD             reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    LT              reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    LE              reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    GT              reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    GE              reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    EQ              reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    NQ              reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    AND             reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    OR              reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    RBRACKET        reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    EQUALS          reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    EQTIMES         reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    EQDIV           reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    EQMOD           reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    EQPLUS          reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    EQMINUS         reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    SEMI            reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    COMMA           reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    RPAREN          reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    RBRACE          reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    LBRACE          reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    IF              reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    WHILE           reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    FOR             reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    BREAK           reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    RETURN          reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    ASSERT          reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    PRINT           reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    READ            reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    INCREASE        reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    DECREASE        reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    LPAREN          reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    ADDRESS         reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    UMINUS          reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    NOT             reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    ID              reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    STRING          reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    INT_CONST       reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    FLOAT_CONST     reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    CHAR_CONST      reduce using rule 79 (unary_expression -> INCREASE unary_expression .)
    ELSE            reduce using rule 79 (unary_expression -> INCREASE unary_expression .)


state 94

    (93) primary_expression -> LPAREN . expression RPAREN
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    expression                     shift and go to state 87
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 95

    (80) unary_expression -> DECREASE unary_expression .

    PLUS            reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    MINUS           reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    TIMES           reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    DIVIDE          reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    MOD             reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    LT              reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    LE              reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    GT              reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    GE              reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    EQ              reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    NQ              reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    AND             reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    OR              reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    RBRACKET        reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    EQUALS          reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    EQTIMES         reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    EQDIV           reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    EQMOD           reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    EQPLUS          reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    EQMINUS         reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    SEMI            reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    COMMA           reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    RPAREN          reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    RBRACE          reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    LBRACE          reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    IF              reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    WHILE           reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    FOR             reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    BREAK           reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    RETURN          reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    ASSERT          reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    PRINT           reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    READ            reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    INCREASE        reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    DECREASE        reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    LPAREN          reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    ADDRESS         reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    UMINUS          reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    NOT             reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    ID              reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    STRING          reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    INT_CONST       reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    FLOAT_CONST     reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    CHAR_CONST      reduce using rule 80 (unary_expression -> DECREASE unary_expression .)
    ELSE            reduce using rule 80 (unary_expression -> DECREASE unary_expression .)


state 96

    (81) unary_expression -> unary_operator cast_expression .

    PLUS            reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    TIMES           reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    NQ              reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    EQUALS          reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    EQTIMES         reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    EQDIV           reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    EQMOD           reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    EQPLUS          reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    EQMINUS         reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    LBRACE          reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    IF              reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    WHILE           reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    FOR             reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    BREAK           reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    RETURN          reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    ASSERT          reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    PRINT           reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    READ            reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    INCREASE        reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    DECREASE        reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    LPAREN          reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    ADDRESS         reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    UMINUS          reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    NOT             reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    ID              reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    STRING          reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    INT_CONST       reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    FLOAT_CONST     reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    CHAR_CONST      reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    ELSE            reduce using rule 81 (unary_expression -> unary_operator cast_expression .)


state 97

    (117) direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .

    LBRACKET        reduce using rule 117 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LPAREN          reduce using rule 117 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    VOID            reduce using rule 117 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    INT             reduce using rule 117 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    FLOAT           reduce using rule 117 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    CHAR            reduce using rule 117 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    EQUALS          reduce using rule 117 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 117 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 117 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 117 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)


state 98

    (22) parameter_list -> parameter_list COMMA . parameter_declaration
    (23) parameter_declaration -> . type_specifier declarator
    (121) type_specifier -> . VOID
    (122) type_specifier -> . INT
    (123) type_specifier -> . FLOAT
    (124) type_specifier -> . CHAR

    VOID            shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10

    parameter_declaration          shift and go to state 151
    type_specifier                 shift and go to state 62

state 99

    (118) direct_declarator -> direct_declarator LPAREN id_list RPAREN .

    LBRACKET        reduce using rule 118 (direct_declarator -> direct_declarator LPAREN id_list RPAREN .)
    LPAREN          reduce using rule 118 (direct_declarator -> direct_declarator LPAREN id_list RPAREN .)
    VOID            reduce using rule 118 (direct_declarator -> direct_declarator LPAREN id_list RPAREN .)
    INT             reduce using rule 118 (direct_declarator -> direct_declarator LPAREN id_list RPAREN .)
    FLOAT           reduce using rule 118 (direct_declarator -> direct_declarator LPAREN id_list RPAREN .)
    CHAR            reduce using rule 118 (direct_declarator -> direct_declarator LPAREN id_list RPAREN .)
    EQUALS          reduce using rule 118 (direct_declarator -> direct_declarator LPAREN id_list RPAREN .)
    SEMI            reduce using rule 118 (direct_declarator -> direct_declarator LPAREN id_list RPAREN .)
    COMMA           reduce using rule 118 (direct_declarator -> direct_declarator LPAREN id_list RPAREN .)
    RPAREN          reduce using rule 118 (direct_declarator -> direct_declarator LPAREN id_list RPAREN .)


state 100

    (120) id_list -> id_list ID .

    RPAREN          reduce using rule 120 (id_list -> id_list ID .)
    ID              reduce using rule 120 (id_list -> id_list ID .)


state 101

    (23) parameter_declaration -> type_specifier declarator .

    RPAREN          reduce using rule 23 (parameter_declaration -> type_specifier declarator .)
    COMMA           reduce using rule 23 (parameter_declaration -> type_specifier declarator .)


state 102

    (13) initializer -> LBRACE initializer_list . RBRACE
    (14) initializer -> LBRACE initializer_list . COMMA RBRACE
    (16) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 152
    COMMA           shift and go to state 153


state 103

    (15) initializer_list -> initializer .

    RBRACE          reduce using rule 15 (initializer_list -> initializer .)
    COMMA           reduce using rule 15 (initializer_list -> initializer .)


state 104

    (63) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    unary_expression               shift and go to state 69
    assignment_expression          shift and go to state 154
    binary_expression              shift and go to state 68
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 105

    (97) assignment_operator -> EQUALS .

    INCREASE        reduce using rule 97 (assignment_operator -> EQUALS .)
    DECREASE        reduce using rule 97 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 97 (assignment_operator -> EQUALS .)
    ADDRESS         reduce using rule 97 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 97 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 97 (assignment_operator -> EQUALS .)
    UMINUS          reduce using rule 97 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 97 (assignment_operator -> EQUALS .)
    ID              reduce using rule 97 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 97 (assignment_operator -> EQUALS .)
    INT_CONST       reduce using rule 97 (assignment_operator -> EQUALS .)
    FLOAT_CONST     reduce using rule 97 (assignment_operator -> EQUALS .)
    CHAR_CONST      reduce using rule 97 (assignment_operator -> EQUALS .)


state 106

    (98) assignment_operator -> EQTIMES .

    INCREASE        reduce using rule 98 (assignment_operator -> EQTIMES .)
    DECREASE        reduce using rule 98 (assignment_operator -> EQTIMES .)
    LPAREN          reduce using rule 98 (assignment_operator -> EQTIMES .)
    ADDRESS         reduce using rule 98 (assignment_operator -> EQTIMES .)
    TIMES           reduce using rule 98 (assignment_operator -> EQTIMES .)
    PLUS            reduce using rule 98 (assignment_operator -> EQTIMES .)
    UMINUS          reduce using rule 98 (assignment_operator -> EQTIMES .)
    NOT             reduce using rule 98 (assignment_operator -> EQTIMES .)
    ID              reduce using rule 98 (assignment_operator -> EQTIMES .)
    STRING          reduce using rule 98 (assignment_operator -> EQTIMES .)
    INT_CONST       reduce using rule 98 (assignment_operator -> EQTIMES .)
    FLOAT_CONST     reduce using rule 98 (assignment_operator -> EQTIMES .)
    CHAR_CONST      reduce using rule 98 (assignment_operator -> EQTIMES .)


state 107

    (99) assignment_operator -> EQDIV .

    INCREASE        reduce using rule 99 (assignment_operator -> EQDIV .)
    DECREASE        reduce using rule 99 (assignment_operator -> EQDIV .)
    LPAREN          reduce using rule 99 (assignment_operator -> EQDIV .)
    ADDRESS         reduce using rule 99 (assignment_operator -> EQDIV .)
    TIMES           reduce using rule 99 (assignment_operator -> EQDIV .)
    PLUS            reduce using rule 99 (assignment_operator -> EQDIV .)
    UMINUS          reduce using rule 99 (assignment_operator -> EQDIV .)
    NOT             reduce using rule 99 (assignment_operator -> EQDIV .)
    ID              reduce using rule 99 (assignment_operator -> EQDIV .)
    STRING          reduce using rule 99 (assignment_operator -> EQDIV .)
    INT_CONST       reduce using rule 99 (assignment_operator -> EQDIV .)
    FLOAT_CONST     reduce using rule 99 (assignment_operator -> EQDIV .)
    CHAR_CONST      reduce using rule 99 (assignment_operator -> EQDIV .)


state 108

    (100) assignment_operator -> EQMOD .

    INCREASE        reduce using rule 100 (assignment_operator -> EQMOD .)
    DECREASE        reduce using rule 100 (assignment_operator -> EQMOD .)
    LPAREN          reduce using rule 100 (assignment_operator -> EQMOD .)
    ADDRESS         reduce using rule 100 (assignment_operator -> EQMOD .)
    TIMES           reduce using rule 100 (assignment_operator -> EQMOD .)
    PLUS            reduce using rule 100 (assignment_operator -> EQMOD .)
    UMINUS          reduce using rule 100 (assignment_operator -> EQMOD .)
    NOT             reduce using rule 100 (assignment_operator -> EQMOD .)
    ID              reduce using rule 100 (assignment_operator -> EQMOD .)
    STRING          reduce using rule 100 (assignment_operator -> EQMOD .)
    INT_CONST       reduce using rule 100 (assignment_operator -> EQMOD .)
    FLOAT_CONST     reduce using rule 100 (assignment_operator -> EQMOD .)
    CHAR_CONST      reduce using rule 100 (assignment_operator -> EQMOD .)


state 109

    (101) assignment_operator -> EQPLUS .

    INCREASE        reduce using rule 101 (assignment_operator -> EQPLUS .)
    DECREASE        reduce using rule 101 (assignment_operator -> EQPLUS .)
    LPAREN          reduce using rule 101 (assignment_operator -> EQPLUS .)
    ADDRESS         reduce using rule 101 (assignment_operator -> EQPLUS .)
    TIMES           reduce using rule 101 (assignment_operator -> EQPLUS .)
    PLUS            reduce using rule 101 (assignment_operator -> EQPLUS .)
    UMINUS          reduce using rule 101 (assignment_operator -> EQPLUS .)
    NOT             reduce using rule 101 (assignment_operator -> EQPLUS .)
    ID              reduce using rule 101 (assignment_operator -> EQPLUS .)
    STRING          reduce using rule 101 (assignment_operator -> EQPLUS .)
    INT_CONST       reduce using rule 101 (assignment_operator -> EQPLUS .)
    FLOAT_CONST     reduce using rule 101 (assignment_operator -> EQPLUS .)
    CHAR_CONST      reduce using rule 101 (assignment_operator -> EQPLUS .)


state 110

    (102) assignment_operator -> EQMINUS .

    INCREASE        reduce using rule 102 (assignment_operator -> EQMINUS .)
    DECREASE        reduce using rule 102 (assignment_operator -> EQMINUS .)
    LPAREN          reduce using rule 102 (assignment_operator -> EQMINUS .)
    ADDRESS         reduce using rule 102 (assignment_operator -> EQMINUS .)
    TIMES           reduce using rule 102 (assignment_operator -> EQMINUS .)
    PLUS            reduce using rule 102 (assignment_operator -> EQMINUS .)
    UMINUS          reduce using rule 102 (assignment_operator -> EQMINUS .)
    NOT             reduce using rule 102 (assignment_operator -> EQMINUS .)
    ID              reduce using rule 102 (assignment_operator -> EQMINUS .)
    STRING          reduce using rule 102 (assignment_operator -> EQMINUS .)
    INT_CONST       reduce using rule 102 (assignment_operator -> EQMINUS .)
    FLOAT_CONST     reduce using rule 102 (assignment_operator -> EQMINUS .)
    CHAR_CONST      reduce using rule 102 (assignment_operator -> EQMINUS .)


state 111

    (24) compound_statement -> LBRACE declaration_list statement_list . RBRACE
    (61) statement_list -> statement_list . statement
    (52) statement -> . expression_statement
    (53) statement -> . compound_statement
    (54) statement -> . selection_statement
    (55) statement -> . iteration_statement
    (56) statement -> . jump_statement
    (57) statement -> . assert_statement
    (58) statement -> . print_statement
    (59) statement -> . read_statement
    (25) expression_statement -> . expression
    (26) expression_statement -> . empty
    (24) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN statement
    (30) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (31) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (32) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (33) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (34) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (35) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (36) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (37) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (38) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (39) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (40) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (41) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (42) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (43) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (44) jump_statement -> . BREAK SEMI
    (45) jump_statement -> . RETURN expression SEMI
    (46) jump_statement -> . RETURN SEMI
    (47) assert_statement -> . ASSERT expression SEMI
    (48) assert_statement -> . ASSERT SEMI
    (49) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (50) print_statement -> . PRINT LPAREN RPAREN SEMI
    (51) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (125) empty -> .
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for INCREASE resolved as shift
  ! shift/reduce conflict for DECREASE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ADDRESS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for CHAR_CONST resolved as shift
    RBRACE          shift and go to state 155
    LBRACE          shift and go to state 34
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    RETURN          shift and go to state 127
    ASSERT          shift and go to state 128
    PRINT           shift and go to state 129
    READ            shift and go to state 130
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

  ! RBRACE          [ reduce using rule 125 (empty -> .) ]
  ! LBRACE          [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! BREAK           [ reduce using rule 125 (empty -> .) ]
  ! RETURN          [ reduce using rule 125 (empty -> .) ]
  ! ASSERT          [ reduce using rule 125 (empty -> .) ]
  ! PRINT           [ reduce using rule 125 (empty -> .) ]
  ! READ            [ reduce using rule 125 (empty -> .) ]
  ! INCREASE        [ reduce using rule 125 (empty -> .) ]
  ! DECREASE        [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ADDRESS         [ reduce using rule 125 (empty -> .) ]
  ! TIMES           [ reduce using rule 125 (empty -> .) ]
  ! PLUS            [ reduce using rule 125 (empty -> .) ]
  ! UMINUS          [ reduce using rule 125 (empty -> .) ]
  ! NOT             [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]
  ! STRING          [ reduce using rule 125 (empty -> .) ]
  ! INT_CONST       [ reduce using rule 125 (empty -> .) ]
  ! FLOAT_CONST     [ reduce using rule 125 (empty -> .) ]
  ! CHAR_CONST      [ reduce using rule 125 (empty -> .) ]

    statement                      shift and go to state 156
    expression_statement           shift and go to state 113
    compound_statement             shift and go to state 114
    selection_statement            shift and go to state 115
    iteration_statement            shift and go to state 116
    jump_statement                 shift and go to state 117
    assert_statement               shift and go to state 118
    print_statement                shift and go to state 119
    read_statement                 shift and go to state 120
    expression                     shift and go to state 121
    empty                          shift and go to state 122
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 112

    (60) statement_list -> statement .

    RBRACE          reduce using rule 60 (statement_list -> statement .)
    LBRACE          reduce using rule 60 (statement_list -> statement .)
    IF              reduce using rule 60 (statement_list -> statement .)
    WHILE           reduce using rule 60 (statement_list -> statement .)
    FOR             reduce using rule 60 (statement_list -> statement .)
    BREAK           reduce using rule 60 (statement_list -> statement .)
    RETURN          reduce using rule 60 (statement_list -> statement .)
    ASSERT          reduce using rule 60 (statement_list -> statement .)
    PRINT           reduce using rule 60 (statement_list -> statement .)
    READ            reduce using rule 60 (statement_list -> statement .)
    INCREASE        reduce using rule 60 (statement_list -> statement .)
    DECREASE        reduce using rule 60 (statement_list -> statement .)
    LPAREN          reduce using rule 60 (statement_list -> statement .)
    ADDRESS         reduce using rule 60 (statement_list -> statement .)
    TIMES           reduce using rule 60 (statement_list -> statement .)
    PLUS            reduce using rule 60 (statement_list -> statement .)
    UMINUS          reduce using rule 60 (statement_list -> statement .)
    NOT             reduce using rule 60 (statement_list -> statement .)
    ID              reduce using rule 60 (statement_list -> statement .)
    STRING          reduce using rule 60 (statement_list -> statement .)
    INT_CONST       reduce using rule 60 (statement_list -> statement .)
    FLOAT_CONST     reduce using rule 60 (statement_list -> statement .)
    CHAR_CONST      reduce using rule 60 (statement_list -> statement .)


state 113

    (52) statement -> expression_statement .

    RBRACE          reduce using rule 52 (statement -> expression_statement .)
    LBRACE          reduce using rule 52 (statement -> expression_statement .)
    IF              reduce using rule 52 (statement -> expression_statement .)
    WHILE           reduce using rule 52 (statement -> expression_statement .)
    FOR             reduce using rule 52 (statement -> expression_statement .)
    BREAK           reduce using rule 52 (statement -> expression_statement .)
    RETURN          reduce using rule 52 (statement -> expression_statement .)
    ASSERT          reduce using rule 52 (statement -> expression_statement .)
    PRINT           reduce using rule 52 (statement -> expression_statement .)
    READ            reduce using rule 52 (statement -> expression_statement .)
    INCREASE        reduce using rule 52 (statement -> expression_statement .)
    DECREASE        reduce using rule 52 (statement -> expression_statement .)
    LPAREN          reduce using rule 52 (statement -> expression_statement .)
    ADDRESS         reduce using rule 52 (statement -> expression_statement .)
    TIMES           reduce using rule 52 (statement -> expression_statement .)
    PLUS            reduce using rule 52 (statement -> expression_statement .)
    UMINUS          reduce using rule 52 (statement -> expression_statement .)
    NOT             reduce using rule 52 (statement -> expression_statement .)
    ID              reduce using rule 52 (statement -> expression_statement .)
    STRING          reduce using rule 52 (statement -> expression_statement .)
    INT_CONST       reduce using rule 52 (statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 52 (statement -> expression_statement .)
    CHAR_CONST      reduce using rule 52 (statement -> expression_statement .)
    ELSE            reduce using rule 52 (statement -> expression_statement .)


state 114

    (53) statement -> compound_statement .

    RBRACE          reduce using rule 53 (statement -> compound_statement .)
    LBRACE          reduce using rule 53 (statement -> compound_statement .)
    IF              reduce using rule 53 (statement -> compound_statement .)
    WHILE           reduce using rule 53 (statement -> compound_statement .)
    FOR             reduce using rule 53 (statement -> compound_statement .)
    BREAK           reduce using rule 53 (statement -> compound_statement .)
    RETURN          reduce using rule 53 (statement -> compound_statement .)
    ASSERT          reduce using rule 53 (statement -> compound_statement .)
    PRINT           reduce using rule 53 (statement -> compound_statement .)
    READ            reduce using rule 53 (statement -> compound_statement .)
    INCREASE        reduce using rule 53 (statement -> compound_statement .)
    DECREASE        reduce using rule 53 (statement -> compound_statement .)
    LPAREN          reduce using rule 53 (statement -> compound_statement .)
    ADDRESS         reduce using rule 53 (statement -> compound_statement .)
    TIMES           reduce using rule 53 (statement -> compound_statement .)
    PLUS            reduce using rule 53 (statement -> compound_statement .)
    UMINUS          reduce using rule 53 (statement -> compound_statement .)
    NOT             reduce using rule 53 (statement -> compound_statement .)
    ID              reduce using rule 53 (statement -> compound_statement .)
    STRING          reduce using rule 53 (statement -> compound_statement .)
    INT_CONST       reduce using rule 53 (statement -> compound_statement .)
    FLOAT_CONST     reduce using rule 53 (statement -> compound_statement .)
    CHAR_CONST      reduce using rule 53 (statement -> compound_statement .)
    ELSE            reduce using rule 53 (statement -> compound_statement .)


state 115

    (54) statement -> selection_statement .

    RBRACE          reduce using rule 54 (statement -> selection_statement .)
    LBRACE          reduce using rule 54 (statement -> selection_statement .)
    IF              reduce using rule 54 (statement -> selection_statement .)
    WHILE           reduce using rule 54 (statement -> selection_statement .)
    FOR             reduce using rule 54 (statement -> selection_statement .)
    BREAK           reduce using rule 54 (statement -> selection_statement .)
    RETURN          reduce using rule 54 (statement -> selection_statement .)
    ASSERT          reduce using rule 54 (statement -> selection_statement .)
    PRINT           reduce using rule 54 (statement -> selection_statement .)
    READ            reduce using rule 54 (statement -> selection_statement .)
    INCREASE        reduce using rule 54 (statement -> selection_statement .)
    DECREASE        reduce using rule 54 (statement -> selection_statement .)
    LPAREN          reduce using rule 54 (statement -> selection_statement .)
    ADDRESS         reduce using rule 54 (statement -> selection_statement .)
    TIMES           reduce using rule 54 (statement -> selection_statement .)
    PLUS            reduce using rule 54 (statement -> selection_statement .)
    UMINUS          reduce using rule 54 (statement -> selection_statement .)
    NOT             reduce using rule 54 (statement -> selection_statement .)
    ID              reduce using rule 54 (statement -> selection_statement .)
    STRING          reduce using rule 54 (statement -> selection_statement .)
    INT_CONST       reduce using rule 54 (statement -> selection_statement .)
    FLOAT_CONST     reduce using rule 54 (statement -> selection_statement .)
    CHAR_CONST      reduce using rule 54 (statement -> selection_statement .)
    ELSE            reduce using rule 54 (statement -> selection_statement .)


state 116

    (55) statement -> iteration_statement .

    RBRACE          reduce using rule 55 (statement -> iteration_statement .)
    LBRACE          reduce using rule 55 (statement -> iteration_statement .)
    IF              reduce using rule 55 (statement -> iteration_statement .)
    WHILE           reduce using rule 55 (statement -> iteration_statement .)
    FOR             reduce using rule 55 (statement -> iteration_statement .)
    BREAK           reduce using rule 55 (statement -> iteration_statement .)
    RETURN          reduce using rule 55 (statement -> iteration_statement .)
    ASSERT          reduce using rule 55 (statement -> iteration_statement .)
    PRINT           reduce using rule 55 (statement -> iteration_statement .)
    READ            reduce using rule 55 (statement -> iteration_statement .)
    INCREASE        reduce using rule 55 (statement -> iteration_statement .)
    DECREASE        reduce using rule 55 (statement -> iteration_statement .)
    LPAREN          reduce using rule 55 (statement -> iteration_statement .)
    ADDRESS         reduce using rule 55 (statement -> iteration_statement .)
    TIMES           reduce using rule 55 (statement -> iteration_statement .)
    PLUS            reduce using rule 55 (statement -> iteration_statement .)
    UMINUS          reduce using rule 55 (statement -> iteration_statement .)
    NOT             reduce using rule 55 (statement -> iteration_statement .)
    ID              reduce using rule 55 (statement -> iteration_statement .)
    STRING          reduce using rule 55 (statement -> iteration_statement .)
    INT_CONST       reduce using rule 55 (statement -> iteration_statement .)
    FLOAT_CONST     reduce using rule 55 (statement -> iteration_statement .)
    CHAR_CONST      reduce using rule 55 (statement -> iteration_statement .)
    ELSE            reduce using rule 55 (statement -> iteration_statement .)


state 117

    (56) statement -> jump_statement .

    RBRACE          reduce using rule 56 (statement -> jump_statement .)
    LBRACE          reduce using rule 56 (statement -> jump_statement .)
    IF              reduce using rule 56 (statement -> jump_statement .)
    WHILE           reduce using rule 56 (statement -> jump_statement .)
    FOR             reduce using rule 56 (statement -> jump_statement .)
    BREAK           reduce using rule 56 (statement -> jump_statement .)
    RETURN          reduce using rule 56 (statement -> jump_statement .)
    ASSERT          reduce using rule 56 (statement -> jump_statement .)
    PRINT           reduce using rule 56 (statement -> jump_statement .)
    READ            reduce using rule 56 (statement -> jump_statement .)
    INCREASE        reduce using rule 56 (statement -> jump_statement .)
    DECREASE        reduce using rule 56 (statement -> jump_statement .)
    LPAREN          reduce using rule 56 (statement -> jump_statement .)
    ADDRESS         reduce using rule 56 (statement -> jump_statement .)
    TIMES           reduce using rule 56 (statement -> jump_statement .)
    PLUS            reduce using rule 56 (statement -> jump_statement .)
    UMINUS          reduce using rule 56 (statement -> jump_statement .)
    NOT             reduce using rule 56 (statement -> jump_statement .)
    ID              reduce using rule 56 (statement -> jump_statement .)
    STRING          reduce using rule 56 (statement -> jump_statement .)
    INT_CONST       reduce using rule 56 (statement -> jump_statement .)
    FLOAT_CONST     reduce using rule 56 (statement -> jump_statement .)
    CHAR_CONST      reduce using rule 56 (statement -> jump_statement .)
    ELSE            reduce using rule 56 (statement -> jump_statement .)


state 118

    (57) statement -> assert_statement .

    RBRACE          reduce using rule 57 (statement -> assert_statement .)
    LBRACE          reduce using rule 57 (statement -> assert_statement .)
    IF              reduce using rule 57 (statement -> assert_statement .)
    WHILE           reduce using rule 57 (statement -> assert_statement .)
    FOR             reduce using rule 57 (statement -> assert_statement .)
    BREAK           reduce using rule 57 (statement -> assert_statement .)
    RETURN          reduce using rule 57 (statement -> assert_statement .)
    ASSERT          reduce using rule 57 (statement -> assert_statement .)
    PRINT           reduce using rule 57 (statement -> assert_statement .)
    READ            reduce using rule 57 (statement -> assert_statement .)
    INCREASE        reduce using rule 57 (statement -> assert_statement .)
    DECREASE        reduce using rule 57 (statement -> assert_statement .)
    LPAREN          reduce using rule 57 (statement -> assert_statement .)
    ADDRESS         reduce using rule 57 (statement -> assert_statement .)
    TIMES           reduce using rule 57 (statement -> assert_statement .)
    PLUS            reduce using rule 57 (statement -> assert_statement .)
    UMINUS          reduce using rule 57 (statement -> assert_statement .)
    NOT             reduce using rule 57 (statement -> assert_statement .)
    ID              reduce using rule 57 (statement -> assert_statement .)
    STRING          reduce using rule 57 (statement -> assert_statement .)
    INT_CONST       reduce using rule 57 (statement -> assert_statement .)
    FLOAT_CONST     reduce using rule 57 (statement -> assert_statement .)
    CHAR_CONST      reduce using rule 57 (statement -> assert_statement .)
    ELSE            reduce using rule 57 (statement -> assert_statement .)


state 119

    (58) statement -> print_statement .

    RBRACE          reduce using rule 58 (statement -> print_statement .)
    LBRACE          reduce using rule 58 (statement -> print_statement .)
    IF              reduce using rule 58 (statement -> print_statement .)
    WHILE           reduce using rule 58 (statement -> print_statement .)
    FOR             reduce using rule 58 (statement -> print_statement .)
    BREAK           reduce using rule 58 (statement -> print_statement .)
    RETURN          reduce using rule 58 (statement -> print_statement .)
    ASSERT          reduce using rule 58 (statement -> print_statement .)
    PRINT           reduce using rule 58 (statement -> print_statement .)
    READ            reduce using rule 58 (statement -> print_statement .)
    INCREASE        reduce using rule 58 (statement -> print_statement .)
    DECREASE        reduce using rule 58 (statement -> print_statement .)
    LPAREN          reduce using rule 58 (statement -> print_statement .)
    ADDRESS         reduce using rule 58 (statement -> print_statement .)
    TIMES           reduce using rule 58 (statement -> print_statement .)
    PLUS            reduce using rule 58 (statement -> print_statement .)
    UMINUS          reduce using rule 58 (statement -> print_statement .)
    NOT             reduce using rule 58 (statement -> print_statement .)
    ID              reduce using rule 58 (statement -> print_statement .)
    STRING          reduce using rule 58 (statement -> print_statement .)
    INT_CONST       reduce using rule 58 (statement -> print_statement .)
    FLOAT_CONST     reduce using rule 58 (statement -> print_statement .)
    CHAR_CONST      reduce using rule 58 (statement -> print_statement .)
    ELSE            reduce using rule 58 (statement -> print_statement .)


state 120

    (59) statement -> read_statement .

    RBRACE          reduce using rule 59 (statement -> read_statement .)
    LBRACE          reduce using rule 59 (statement -> read_statement .)
    IF              reduce using rule 59 (statement -> read_statement .)
    WHILE           reduce using rule 59 (statement -> read_statement .)
    FOR             reduce using rule 59 (statement -> read_statement .)
    BREAK           reduce using rule 59 (statement -> read_statement .)
    RETURN          reduce using rule 59 (statement -> read_statement .)
    ASSERT          reduce using rule 59 (statement -> read_statement .)
    PRINT           reduce using rule 59 (statement -> read_statement .)
    READ            reduce using rule 59 (statement -> read_statement .)
    INCREASE        reduce using rule 59 (statement -> read_statement .)
    DECREASE        reduce using rule 59 (statement -> read_statement .)
    LPAREN          reduce using rule 59 (statement -> read_statement .)
    ADDRESS         reduce using rule 59 (statement -> read_statement .)
    TIMES           reduce using rule 59 (statement -> read_statement .)
    PLUS            reduce using rule 59 (statement -> read_statement .)
    UMINUS          reduce using rule 59 (statement -> read_statement .)
    NOT             reduce using rule 59 (statement -> read_statement .)
    ID              reduce using rule 59 (statement -> read_statement .)
    STRING          reduce using rule 59 (statement -> read_statement .)
    INT_CONST       reduce using rule 59 (statement -> read_statement .)
    FLOAT_CONST     reduce using rule 59 (statement -> read_statement .)
    CHAR_CONST      reduce using rule 59 (statement -> read_statement .)
    ELSE            reduce using rule 59 (statement -> read_statement .)


state 121

    (25) expression_statement -> expression .
    (28) expression -> expression . COMMA assignment_expression

    RBRACE          reduce using rule 25 (expression_statement -> expression .)
    LBRACE          reduce using rule 25 (expression_statement -> expression .)
    IF              reduce using rule 25 (expression_statement -> expression .)
    WHILE           reduce using rule 25 (expression_statement -> expression .)
    FOR             reduce using rule 25 (expression_statement -> expression .)
    BREAK           reduce using rule 25 (expression_statement -> expression .)
    RETURN          reduce using rule 25 (expression_statement -> expression .)
    ASSERT          reduce using rule 25 (expression_statement -> expression .)
    PRINT           reduce using rule 25 (expression_statement -> expression .)
    READ            reduce using rule 25 (expression_statement -> expression .)
    INCREASE        reduce using rule 25 (expression_statement -> expression .)
    DECREASE        reduce using rule 25 (expression_statement -> expression .)
    LPAREN          reduce using rule 25 (expression_statement -> expression .)
    ADDRESS         reduce using rule 25 (expression_statement -> expression .)
    TIMES           reduce using rule 25 (expression_statement -> expression .)
    PLUS            reduce using rule 25 (expression_statement -> expression .)
    UMINUS          reduce using rule 25 (expression_statement -> expression .)
    NOT             reduce using rule 25 (expression_statement -> expression .)
    ID              reduce using rule 25 (expression_statement -> expression .)
    STRING          reduce using rule 25 (expression_statement -> expression .)
    INT_CONST       reduce using rule 25 (expression_statement -> expression .)
    FLOAT_CONST     reduce using rule 25 (expression_statement -> expression .)
    CHAR_CONST      reduce using rule 25 (expression_statement -> expression .)
    ELSE            reduce using rule 25 (expression_statement -> expression .)
    COMMA           shift and go to state 146


state 122

    (26) expression_statement -> empty .

    RBRACE          reduce using rule 26 (expression_statement -> empty .)
    LBRACE          reduce using rule 26 (expression_statement -> empty .)
    IF              reduce using rule 26 (expression_statement -> empty .)
    WHILE           reduce using rule 26 (expression_statement -> empty .)
    FOR             reduce using rule 26 (expression_statement -> empty .)
    BREAK           reduce using rule 26 (expression_statement -> empty .)
    RETURN          reduce using rule 26 (expression_statement -> empty .)
    ASSERT          reduce using rule 26 (expression_statement -> empty .)
    PRINT           reduce using rule 26 (expression_statement -> empty .)
    READ            reduce using rule 26 (expression_statement -> empty .)
    INCREASE        reduce using rule 26 (expression_statement -> empty .)
    DECREASE        reduce using rule 26 (expression_statement -> empty .)
    LPAREN          reduce using rule 26 (expression_statement -> empty .)
    ADDRESS         reduce using rule 26 (expression_statement -> empty .)
    TIMES           reduce using rule 26 (expression_statement -> empty .)
    PLUS            reduce using rule 26 (expression_statement -> empty .)
    UMINUS          reduce using rule 26 (expression_statement -> empty .)
    NOT             reduce using rule 26 (expression_statement -> empty .)
    ID              reduce using rule 26 (expression_statement -> empty .)
    STRING          reduce using rule 26 (expression_statement -> empty .)
    INT_CONST       reduce using rule 26 (expression_statement -> empty .)
    FLOAT_CONST     reduce using rule 26 (expression_statement -> empty .)
    CHAR_CONST      reduce using rule 26 (expression_statement -> empty .)
    ELSE            reduce using rule 26 (expression_statement -> empty .)


state 123

    (29) selection_statement -> IF . LPAREN expression RPAREN statement
    (30) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 157


state 124

    (31) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 158


state 125

    (32) iteration_statement -> FOR . LPAREN expression SEMI expression SEMI expression RPAREN statement
    (33) iteration_statement -> FOR . LPAREN SEMI expression SEMI expression RPAREN statement
    (34) iteration_statement -> FOR . LPAREN expression SEMI SEMI expression RPAREN statement
    (35) iteration_statement -> FOR . LPAREN SEMI SEMI expression RPAREN statement
    (36) iteration_statement -> FOR . LPAREN expression SEMI expression SEMI RPAREN statement
    (37) iteration_statement -> FOR . LPAREN SEMI expression SEMI RPAREN statement
    (38) iteration_statement -> FOR . LPAREN expression SEMI SEMI RPAREN statement
    (39) iteration_statement -> FOR . LPAREN SEMI SEMI RPAREN statement
    (40) iteration_statement -> FOR . LPAREN declaration expression SEMI expression RPAREN statement
    (41) iteration_statement -> FOR . LPAREN declaration SEMI expression RPAREN statement
    (42) iteration_statement -> FOR . LPAREN declaration expression SEMI RPAREN statement
    (43) iteration_statement -> FOR . LPAREN declaration SEMI RPAREN statement

    LPAREN          shift and go to state 159


state 126

    (44) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 160


state 127

    (45) jump_statement -> RETURN . expression SEMI
    (46) jump_statement -> RETURN . SEMI
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    SEMI            shift and go to state 162
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    expression                     shift and go to state 161
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 128

    (47) assert_statement -> ASSERT . expression SEMI
    (48) assert_statement -> ASSERT . SEMI
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    SEMI            shift and go to state 164
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    expression                     shift and go to state 163
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 129

    (49) print_statement -> PRINT . LPAREN expression RPAREN SEMI
    (50) print_statement -> PRINT . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 165


state 130

    (51) read_statement -> READ . LPAREN argument_expression RPAREN SEMI

    LPAREN          shift and go to state 166


state 131

    (65) binary_expression -> binary_expression PLUS binary_expression .
    (65) binary_expression -> binary_expression . PLUS binary_expression
    (66) binary_expression -> binary_expression . MINUS binary_expression
    (67) binary_expression -> binary_expression . TIMES binary_expression
    (68) binary_expression -> binary_expression . DIVIDE binary_expression
    (69) binary_expression -> binary_expression . MOD binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GE binary_expression
    (74) binary_expression -> binary_expression . EQ binary_expression
    (75) binary_expression -> binary_expression . NQ binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    LT              reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    LE              reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    GT              reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    GE              reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    EQ              reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    NQ              reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACKET        reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    SEMI            reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    COMMA           reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACE          reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    LBRACE          reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    IF              reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    WHILE           reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    FOR             reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    BREAK           reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    RETURN          reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    ASSERT          reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    PRINT           reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    READ            reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    INCREASE        reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    DECREASE        reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    LPAREN          reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    ADDRESS         reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    UMINUS          reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    NOT             reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    ID              reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    STRING          reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    INT_CONST       reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    FLOAT_CONST     reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    CHAR_CONST      reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    ELSE            reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77

  ! TIMES           [ reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! MOD             [ reduce using rule 65 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! LT              [ shift and go to state 78 ]
  ! LE              [ shift and go to state 79 ]
  ! GT              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! NQ              [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 132

    (66) binary_expression -> binary_expression MINUS binary_expression .
    (65) binary_expression -> binary_expression . PLUS binary_expression
    (66) binary_expression -> binary_expression . MINUS binary_expression
    (67) binary_expression -> binary_expression . TIMES binary_expression
    (68) binary_expression -> binary_expression . DIVIDE binary_expression
    (69) binary_expression -> binary_expression . MOD binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GE binary_expression
    (74) binary_expression -> binary_expression . EQ binary_expression
    (75) binary_expression -> binary_expression . NQ binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    LT              reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    LE              reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    GT              reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    GE              reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    EQ              reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    NQ              reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACKET        reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    SEMI            reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    COMMA           reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACE          reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    LBRACE          reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    IF              reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    WHILE           reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    FOR             reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    BREAK           reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    RETURN          reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    ASSERT          reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    PRINT           reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    READ            reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    INCREASE        reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    DECREASE        reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    LPAREN          reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    ADDRESS         reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    UMINUS          reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    NOT             reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    ID              reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    STRING          reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    INT_CONST       reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    FLOAT_CONST     reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    CHAR_CONST      reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    ELSE            reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77

  ! TIMES           [ reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! MOD             [ reduce using rule 66 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! LT              [ shift and go to state 78 ]
  ! LE              [ shift and go to state 79 ]
  ! GT              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! NQ              [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 133

    (67) binary_expression -> binary_expression TIMES binary_expression .
    (65) binary_expression -> binary_expression . PLUS binary_expression
    (66) binary_expression -> binary_expression . MINUS binary_expression
    (67) binary_expression -> binary_expression . TIMES binary_expression
    (68) binary_expression -> binary_expression . DIVIDE binary_expression
    (69) binary_expression -> binary_expression . MOD binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GE binary_expression
    (74) binary_expression -> binary_expression . EQ binary_expression
    (75) binary_expression -> binary_expression . NQ binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    TIMES           reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    DIVIDE          reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    LT              reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    LE              reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    GT              reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    GE              reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    EQ              reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    NQ              reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    OR              reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACKET        reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    SEMI            reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    COMMA           reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    RPAREN          reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACE          reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    LBRACE          reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    IF              reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    WHILE           reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    FOR             reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    BREAK           reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    RETURN          reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    ASSERT          reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    PRINT           reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    READ            reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    INCREASE        reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    DECREASE        reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    LPAREN          reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    ADDRESS         reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    UMINUS          reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    NOT             reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    ID              reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    STRING          reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    INT_CONST       reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    FLOAT_CONST     reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    CHAR_CONST      reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)
    ELSE            reduce using rule 67 (binary_expression -> binary_expression TIMES binary_expression .)

  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 76 ]
  ! MOD             [ shift and go to state 77 ]
  ! LT              [ shift and go to state 78 ]
  ! LE              [ shift and go to state 79 ]
  ! GT              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! NQ              [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 134

    (68) binary_expression -> binary_expression DIVIDE binary_expression .
    (65) binary_expression -> binary_expression . PLUS binary_expression
    (66) binary_expression -> binary_expression . MINUS binary_expression
    (67) binary_expression -> binary_expression . TIMES binary_expression
    (68) binary_expression -> binary_expression . DIVIDE binary_expression
    (69) binary_expression -> binary_expression . MOD binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GE binary_expression
    (74) binary_expression -> binary_expression . EQ binary_expression
    (75) binary_expression -> binary_expression . NQ binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS           reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    TIMES           reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIVIDE          reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MOD             reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LT              reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LE              reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GT              reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GE              reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    EQ              reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    NQ              reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    AND             reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    OR              reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACKET        reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SEMI            reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COMMA           reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RPAREN          reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACE          reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LBRACE          reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    IF              reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    WHILE           reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    FOR             reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    BREAK           reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RETURN          reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    ASSERT          reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PRINT           reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    READ            reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    INCREASE        reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DECREASE        reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LPAREN          reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    ADDRESS         reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    UMINUS          reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    NOT             reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    ID              reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    STRING          reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    INT_CONST       reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    FLOAT_CONST     reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    CHAR_CONST      reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)
    ELSE            reduce using rule 68 (binary_expression -> binary_expression DIVIDE binary_expression .)

  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 76 ]
  ! MOD             [ shift and go to state 77 ]
  ! LT              [ shift and go to state 78 ]
  ! LE              [ shift and go to state 79 ]
  ! GT              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! NQ              [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 135

    (69) binary_expression -> binary_expression MOD binary_expression .
    (65) binary_expression -> binary_expression . PLUS binary_expression
    (66) binary_expression -> binary_expression . MINUS binary_expression
    (67) binary_expression -> binary_expression . TIMES binary_expression
    (68) binary_expression -> binary_expression . DIVIDE binary_expression
    (69) binary_expression -> binary_expression . MOD binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GE binary_expression
    (74) binary_expression -> binary_expression . EQ binary_expression
    (75) binary_expression -> binary_expression . NQ binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    TIMES           reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    DIVIDE          reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    LT              reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    LE              reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    GT              reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    GE              reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    EQ              reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    NQ              reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    AND             reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    OR              reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACKET        reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    SEMI            reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    COMMA           reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    RPAREN          reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACE          reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    LBRACE          reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    IF              reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    WHILE           reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    FOR             reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    BREAK           reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    RETURN          reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    ASSERT          reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    PRINT           reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    READ            reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    INCREASE        reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    DECREASE        reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    LPAREN          reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    ADDRESS         reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    UMINUS          reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    NOT             reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    ID              reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    STRING          reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    INT_CONST       reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    FLOAT_CONST     reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    CHAR_CONST      reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)
    ELSE            reduce using rule 69 (binary_expression -> binary_expression MOD binary_expression .)

  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 76 ]
  ! MOD             [ shift and go to state 77 ]
  ! LT              [ shift and go to state 78 ]
  ! LE              [ shift and go to state 79 ]
  ! GT              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! NQ              [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 136

    (70) binary_expression -> binary_expression LT binary_expression .
    (65) binary_expression -> binary_expression . PLUS binary_expression
    (66) binary_expression -> binary_expression . MINUS binary_expression
    (67) binary_expression -> binary_expression . TIMES binary_expression
    (68) binary_expression -> binary_expression . DIVIDE binary_expression
    (69) binary_expression -> binary_expression . MOD binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GE binary_expression
    (74) binary_expression -> binary_expression . EQ binary_expression
    (75) binary_expression -> binary_expression . NQ binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    LE              reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    GT              reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    GE              reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    EQ              reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    NQ              reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    AND             reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    OR              reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    RBRACKET        reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    SEMI            reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    COMMA           reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    RPAREN          reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    RBRACE          reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    LBRACE          reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    IF              reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    WHILE           reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    FOR             reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    BREAK           reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    RETURN          reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    ASSERT          reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    PRINT           reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    READ            reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    INCREASE        reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    DECREASE        reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    LPAREN          reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    ADDRESS         reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    UMINUS          reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    NOT             reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    ID              reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    STRING          reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    INT_CONST       reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    FLOAT_CONST     reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    CHAR_CONST      reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    ELSE            reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77

  ! PLUS            [ reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MINUS           [ reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .) ]
  ! TIMES           [ reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MOD             [ reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LT              [ shift and go to state 78 ]
  ! LE              [ shift and go to state 79 ]
  ! GT              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! NQ              [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 137

    (71) binary_expression -> binary_expression LE binary_expression .
    (65) binary_expression -> binary_expression . PLUS binary_expression
    (66) binary_expression -> binary_expression . MINUS binary_expression
    (67) binary_expression -> binary_expression . TIMES binary_expression
    (68) binary_expression -> binary_expression . DIVIDE binary_expression
    (69) binary_expression -> binary_expression . MOD binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GE binary_expression
    (74) binary_expression -> binary_expression . EQ binary_expression
    (75) binary_expression -> binary_expression . NQ binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    LE              reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    GT              reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    GE              reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    EQ              reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    NQ              reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    AND             reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    OR              reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    RBRACKET        reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    SEMI            reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    COMMA           reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    RPAREN          reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    RBRACE          reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    LBRACE          reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    IF              reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    WHILE           reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    FOR             reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    BREAK           reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    RETURN          reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    ASSERT          reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    PRINT           reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    READ            reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    INCREASE        reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    DECREASE        reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    LPAREN          reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    ADDRESS         reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    UMINUS          reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    NOT             reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    ID              reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    STRING          reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    INT_CONST       reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    FLOAT_CONST     reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    CHAR_CONST      reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    ELSE            reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77

  ! PLUS            [ reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MINUS           [ reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .) ]
  ! TIMES           [ reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MOD             [ reduce using rule 71 (binary_expression -> binary_expression LE binary_expression .) ]
  ! LT              [ shift and go to state 78 ]
  ! LE              [ shift and go to state 79 ]
  ! GT              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! NQ              [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 138

    (72) binary_expression -> binary_expression GT binary_expression .
    (65) binary_expression -> binary_expression . PLUS binary_expression
    (66) binary_expression -> binary_expression . MINUS binary_expression
    (67) binary_expression -> binary_expression . TIMES binary_expression
    (68) binary_expression -> binary_expression . DIVIDE binary_expression
    (69) binary_expression -> binary_expression . MOD binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GE binary_expression
    (74) binary_expression -> binary_expression . EQ binary_expression
    (75) binary_expression -> binary_expression . NQ binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    LE              reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    GT              reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    GE              reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    EQ              reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    NQ              reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    AND             reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    OR              reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    RBRACKET        reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    SEMI            reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    COMMA           reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    RPAREN          reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    RBRACE          reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    LBRACE          reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    IF              reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    WHILE           reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    FOR             reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    BREAK           reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    RETURN          reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    ASSERT          reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    PRINT           reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    READ            reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    INCREASE        reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    DECREASE        reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    LPAREN          reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    ADDRESS         reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    UMINUS          reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    NOT             reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    ID              reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    STRING          reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    INT_CONST       reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    FLOAT_CONST     reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    CHAR_CONST      reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    ELSE            reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77

  ! PLUS            [ reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MINUS           [ reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .) ]
  ! TIMES           [ reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MOD             [ reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .) ]
  ! LT              [ shift and go to state 78 ]
  ! LE              [ shift and go to state 79 ]
  ! GT              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! NQ              [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 139

    (73) binary_expression -> binary_expression GE binary_expression .
    (65) binary_expression -> binary_expression . PLUS binary_expression
    (66) binary_expression -> binary_expression . MINUS binary_expression
    (67) binary_expression -> binary_expression . TIMES binary_expression
    (68) binary_expression -> binary_expression . DIVIDE binary_expression
    (69) binary_expression -> binary_expression . MOD binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GE binary_expression
    (74) binary_expression -> binary_expression . EQ binary_expression
    (75) binary_expression -> binary_expression . NQ binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    LE              reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    GT              reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    GE              reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    EQ              reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    NQ              reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    AND             reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    OR              reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    RBRACKET        reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    SEMI            reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    COMMA           reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    RPAREN          reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    RBRACE          reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    LBRACE          reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    IF              reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    WHILE           reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    FOR             reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    BREAK           reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    RETURN          reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    ASSERT          reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    PRINT           reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    READ            reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    INCREASE        reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    DECREASE        reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    LPAREN          reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    ADDRESS         reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    UMINUS          reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    NOT             reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    ID              reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    STRING          reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    INT_CONST       reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    FLOAT_CONST     reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    CHAR_CONST      reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    ELSE            reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77

  ! PLUS            [ reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .) ]
  ! MINUS           [ reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .) ]
  ! TIMES           [ reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .) ]
  ! MOD             [ reduce using rule 73 (binary_expression -> binary_expression GE binary_expression .) ]
  ! LT              [ shift and go to state 78 ]
  ! LE              [ shift and go to state 79 ]
  ! GT              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! NQ              [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 140

    (74) binary_expression -> binary_expression EQ binary_expression .
    (65) binary_expression -> binary_expression . PLUS binary_expression
    (66) binary_expression -> binary_expression . MINUS binary_expression
    (67) binary_expression -> binary_expression . TIMES binary_expression
    (68) binary_expression -> binary_expression . DIVIDE binary_expression
    (69) binary_expression -> binary_expression . MOD binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GE binary_expression
    (74) binary_expression -> binary_expression . EQ binary_expression
    (75) binary_expression -> binary_expression . NQ binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    LE              reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    GT              reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    GE              reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    EQ              reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    NQ              reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    AND             reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    OR              reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACKET        reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    SEMI            reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    COMMA           reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    RPAREN          reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACE          reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    LBRACE          reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    IF              reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    WHILE           reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    FOR             reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    BREAK           reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    RETURN          reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    ASSERT          reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    PRINT           reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    READ            reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    INCREASE        reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    DECREASE        reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    LPAREN          reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    ADDRESS         reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    UMINUS          reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    NOT             reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    ID              reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    STRING          reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    INT_CONST       reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    FLOAT_CONST     reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    CHAR_CONST      reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    ELSE            reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77

  ! PLUS            [ reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MINUS           [ reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! TIMES           [ reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! DIVIDE          [ reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MOD             [ reduce using rule 74 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LT              [ shift and go to state 78 ]
  ! LE              [ shift and go to state 79 ]
  ! GT              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! NQ              [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 141

    (75) binary_expression -> binary_expression NQ binary_expression .
    (65) binary_expression -> binary_expression . PLUS binary_expression
    (66) binary_expression -> binary_expression . MINUS binary_expression
    (67) binary_expression -> binary_expression . TIMES binary_expression
    (68) binary_expression -> binary_expression . DIVIDE binary_expression
    (69) binary_expression -> binary_expression . MOD binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GE binary_expression
    (74) binary_expression -> binary_expression . EQ binary_expression
    (75) binary_expression -> binary_expression . NQ binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    LE              reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    GT              reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    GE              reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    EQ              reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    NQ              reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    AND             reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    OR              reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    RBRACKET        reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    SEMI            reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    COMMA           reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    RPAREN          reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    RBRACE          reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    LBRACE          reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    IF              reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    WHILE           reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    FOR             reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    BREAK           reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    RETURN          reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    ASSERT          reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    PRINT           reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    READ            reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    INCREASE        reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    DECREASE        reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    LPAREN          reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    ADDRESS         reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    UMINUS          reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    NOT             reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    ID              reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    STRING          reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    INT_CONST       reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    FLOAT_CONST     reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    CHAR_CONST      reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    ELSE            reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77

  ! PLUS            [ reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .) ]
  ! MINUS           [ reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .) ]
  ! TIMES           [ reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .) ]
  ! DIVIDE          [ reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .) ]
  ! MOD             [ reduce using rule 75 (binary_expression -> binary_expression NQ binary_expression .) ]
  ! LT              [ shift and go to state 78 ]
  ! LE              [ shift and go to state 79 ]
  ! GT              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! NQ              [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 142

    (76) binary_expression -> binary_expression AND binary_expression .
    (65) binary_expression -> binary_expression . PLUS binary_expression
    (66) binary_expression -> binary_expression . MINUS binary_expression
    (67) binary_expression -> binary_expression . TIMES binary_expression
    (68) binary_expression -> binary_expression . DIVIDE binary_expression
    (69) binary_expression -> binary_expression . MOD binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GE binary_expression
    (74) binary_expression -> binary_expression . EQ binary_expression
    (75) binary_expression -> binary_expression . NQ binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    LE              reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    GT              reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    GE              reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    EQ              reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    NQ              reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    AND             reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    OR              reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    RBRACKET        reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    SEMI            reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    COMMA           reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    RBRACE          reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    LBRACE          reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    IF              reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    WHILE           reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    FOR             reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    BREAK           reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    RETURN          reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    ASSERT          reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    PRINT           reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    READ            reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    INCREASE        reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    DECREASE        reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    LPAREN          reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    ADDRESS         reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    UMINUS          reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    NOT             reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    ID              reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    STRING          reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    INT_CONST       reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    FLOAT_CONST     reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    CHAR_CONST      reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    ELSE            reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77

  ! PLUS            [ reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MINUS           [ reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .) ]
  ! TIMES           [ reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MOD             [ reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LT              [ shift and go to state 78 ]
  ! LE              [ shift and go to state 79 ]
  ! GT              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! NQ              [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 143

    (77) binary_expression -> binary_expression OR binary_expression .
    (65) binary_expression -> binary_expression . PLUS binary_expression
    (66) binary_expression -> binary_expression . MINUS binary_expression
    (67) binary_expression -> binary_expression . TIMES binary_expression
    (68) binary_expression -> binary_expression . DIVIDE binary_expression
    (69) binary_expression -> binary_expression . MOD binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GE binary_expression
    (74) binary_expression -> binary_expression . EQ binary_expression
    (75) binary_expression -> binary_expression . NQ binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    LE              reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    GT              reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    GE              reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    EQ              reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    NQ              reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    AND             reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    OR              reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    RBRACKET        reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    SEMI            reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    COMMA           reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    RBRACE          reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    LBRACE          reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    IF              reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    WHILE           reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    FOR             reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    BREAK           reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    RETURN          reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    ASSERT          reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    PRINT           reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    READ            reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    INCREASE        reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    DECREASE        reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    LPAREN          reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    ADDRESS         reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    UMINUS          reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    NOT             reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    ID              reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    STRING          reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    INT_CONST       reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    FLOAT_CONST     reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    CHAR_CONST      reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    ELSE            reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 77

  ! PLUS            [ reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MINUS           [ reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .) ]
  ! TIMES           [ reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MOD             [ reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LT              [ shift and go to state 78 ]
  ! LE              [ shift and go to state 79 ]
  ! GT              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! NQ              [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 144

    (89) cast_expression -> LPAREN type_specifier RPAREN . cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    LPAREN          shift and go to state 43
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    cast_expression                shift and go to state 167
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 145

    (93) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    INCREASE        reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    DECREASE        reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    NQ              reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    EQTIMES         reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    EQDIV           reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    EQMOD           reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    EQPLUS          reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    EQMINUS         reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    ASSERT          reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    READ            reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    ADDRESS         reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    UMINUS          reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    STRING          reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    INT_CONST       reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    FLOAT_CONST     reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    CHAR_CONST      reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 93 (primary_expression -> LPAREN expression RPAREN .)


state 146

    (28) expression -> expression COMMA . assignment_expression
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    assignment_expression          shift and go to state 168
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 147

    (83) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (28) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 169
    COMMA           shift and go to state 146


state 148

    (84) postfix_expression -> postfix_expression LPAREN argument_expression . RPAREN
    (95) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          shift and go to state 170
    COMMA           shift and go to state 171


state 149

    (85) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    INCREASE        reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DECREASE        reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE              reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GE              reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NQ              reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQTIMES         reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQDIV           reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQMOD           reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQPLUS          reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQMINUS         reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LBRACE          reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    IF              reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    WHILE           reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    FOR             reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BREAK           reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RETURN          reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ASSERT          reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PRINT           reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    READ            reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ADDRESS         reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    UMINUS          reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NOT             reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ID              reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    STRING          reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    INT_CONST       reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    FLOAT_CONST     reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    CHAR_CONST      reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ELSE            reduce using rule 85 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 150

    (94) argument_expression -> assignment_expression .

    RPAREN          reduce using rule 94 (argument_expression -> assignment_expression .)
    COMMA           reduce using rule 94 (argument_expression -> assignment_expression .)


state 151

    (22) parameter_list -> parameter_list COMMA parameter_declaration .

    RPAREN          reduce using rule 22 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 22 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 152

    (13) initializer -> LBRACE initializer_list RBRACE .

    SEMI            reduce using rule 13 (initializer -> LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 13 (initializer -> LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 13 (initializer -> LBRACE initializer_list RBRACE .)


state 153

    (14) initializer -> LBRACE initializer_list COMMA . RBRACE
    (16) initializer_list -> initializer_list COMMA . initializer
    (12) initializer -> . assignment_expression
    (13) initializer -> . LBRACE initializer_list RBRACE
    (14) initializer -> . LBRACE initializer_list COMMA RBRACE
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    RBRACE          shift and go to state 172
    LBRACE          shift and go to state 67
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    initializer                    shift and go to state 173
    assignment_expression          shift and go to state 66
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 154

    (63) assignment_expression -> unary_expression assignment_operator assignment_expression .

    SEMI            reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    LBRACE          reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    IF              reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    WHILE           reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    FOR             reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    BREAK           reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RETURN          reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ASSERT          reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    PRINT           reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    READ            reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    INCREASE        reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    DECREASE        reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    LPAREN          reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ADDRESS         reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    TIMES           reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    PLUS            reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    UMINUS          reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    NOT             reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ID              reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    STRING          reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    INT_CONST       reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    FLOAT_CONST     reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    CHAR_CONST      reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ELSE            reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 155

    (24) compound_statement -> LBRACE declaration_list statement_list RBRACE .

    $end            reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RBRACE          reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LBRACE          reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    IF              reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    WHILE           reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FOR             reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    BREAK           reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RETURN          reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ASSERT          reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    PRINT           reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    READ            reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INCREASE        reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    DECREASE        reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LPAREN          reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ADDRESS         reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    TIMES           reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    PLUS            reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    UMINUS          reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    NOT             reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ID              reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    STRING          reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INT_CONST       reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FLOAT_CONST     reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CHAR_CONST      reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ELSE            reduce using rule 24 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)


state 156

    (61) statement_list -> statement_list statement .

    RBRACE          reduce using rule 61 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 61 (statement_list -> statement_list statement .)
    IF              reduce using rule 61 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 61 (statement_list -> statement_list statement .)
    FOR             reduce using rule 61 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 61 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 61 (statement_list -> statement_list statement .)
    ASSERT          reduce using rule 61 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 61 (statement_list -> statement_list statement .)
    READ            reduce using rule 61 (statement_list -> statement_list statement .)
    INCREASE        reduce using rule 61 (statement_list -> statement_list statement .)
    DECREASE        reduce using rule 61 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 61 (statement_list -> statement_list statement .)
    ADDRESS         reduce using rule 61 (statement_list -> statement_list statement .)
    TIMES           reduce using rule 61 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 61 (statement_list -> statement_list statement .)
    UMINUS          reduce using rule 61 (statement_list -> statement_list statement .)
    NOT             reduce using rule 61 (statement_list -> statement_list statement .)
    ID              reduce using rule 61 (statement_list -> statement_list statement .)
    STRING          reduce using rule 61 (statement_list -> statement_list statement .)
    INT_CONST       reduce using rule 61 (statement_list -> statement_list statement .)
    FLOAT_CONST     reduce using rule 61 (statement_list -> statement_list statement .)
    CHAR_CONST      reduce using rule 61 (statement_list -> statement_list statement .)


state 157

    (29) selection_statement -> IF LPAREN . expression RPAREN statement
    (30) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    expression                     shift and go to state 174
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 158

    (31) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    expression                     shift and go to state 175
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 159

    (32) iteration_statement -> FOR LPAREN . expression SEMI expression SEMI expression RPAREN statement
    (33) iteration_statement -> FOR LPAREN . SEMI expression SEMI expression RPAREN statement
    (34) iteration_statement -> FOR LPAREN . expression SEMI SEMI expression RPAREN statement
    (35) iteration_statement -> FOR LPAREN . SEMI SEMI expression RPAREN statement
    (36) iteration_statement -> FOR LPAREN . expression SEMI expression SEMI RPAREN statement
    (37) iteration_statement -> FOR LPAREN . SEMI expression SEMI RPAREN statement
    (38) iteration_statement -> FOR LPAREN . expression SEMI SEMI RPAREN statement
    (39) iteration_statement -> FOR LPAREN . SEMI SEMI RPAREN statement
    (40) iteration_statement -> FOR LPAREN . declaration expression SEMI expression RPAREN statement
    (41) iteration_statement -> FOR LPAREN . declaration SEMI expression RPAREN statement
    (42) iteration_statement -> FOR LPAREN . declaration expression SEMI RPAREN statement
    (43) iteration_statement -> FOR LPAREN . declaration SEMI RPAREN statement
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (6) declaration -> . type_specifier SEMI
    (7) declaration -> . type_specifier init_declarator_list SEMI
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (121) type_specifier -> . VOID
    (122) type_specifier -> . INT
    (123) type_specifier -> . FLOAT
    (124) type_specifier -> . CHAR
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    SEMI            shift and go to state 177
    VOID            shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    expression                     shift and go to state 176
    declaration                    shift and go to state 178
    assignment_expression          shift and go to state 88
    type_specifier                 shift and go to state 22
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 160

    (44) jump_statement -> BREAK SEMI .

    RBRACE          reduce using rule 44 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 44 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 44 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 44 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 44 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 44 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 44 (jump_statement -> BREAK SEMI .)
    ASSERT          reduce using rule 44 (jump_statement -> BREAK SEMI .)
    PRINT           reduce using rule 44 (jump_statement -> BREAK SEMI .)
    READ            reduce using rule 44 (jump_statement -> BREAK SEMI .)
    INCREASE        reduce using rule 44 (jump_statement -> BREAK SEMI .)
    DECREASE        reduce using rule 44 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 44 (jump_statement -> BREAK SEMI .)
    ADDRESS         reduce using rule 44 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 44 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 44 (jump_statement -> BREAK SEMI .)
    UMINUS          reduce using rule 44 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 44 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 44 (jump_statement -> BREAK SEMI .)
    STRING          reduce using rule 44 (jump_statement -> BREAK SEMI .)
    INT_CONST       reduce using rule 44 (jump_statement -> BREAK SEMI .)
    FLOAT_CONST     reduce using rule 44 (jump_statement -> BREAK SEMI .)
    CHAR_CONST      reduce using rule 44 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 44 (jump_statement -> BREAK SEMI .)


state 161

    (45) jump_statement -> RETURN expression . SEMI
    (28) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 179
    COMMA           shift and go to state 146


state 162

    (46) jump_statement -> RETURN SEMI .

    RBRACE          reduce using rule 46 (jump_statement -> RETURN SEMI .)
    LBRACE          reduce using rule 46 (jump_statement -> RETURN SEMI .)
    IF              reduce using rule 46 (jump_statement -> RETURN SEMI .)
    WHILE           reduce using rule 46 (jump_statement -> RETURN SEMI .)
    FOR             reduce using rule 46 (jump_statement -> RETURN SEMI .)
    BREAK           reduce using rule 46 (jump_statement -> RETURN SEMI .)
    RETURN          reduce using rule 46 (jump_statement -> RETURN SEMI .)
    ASSERT          reduce using rule 46 (jump_statement -> RETURN SEMI .)
    PRINT           reduce using rule 46 (jump_statement -> RETURN SEMI .)
    READ            reduce using rule 46 (jump_statement -> RETURN SEMI .)
    INCREASE        reduce using rule 46 (jump_statement -> RETURN SEMI .)
    DECREASE        reduce using rule 46 (jump_statement -> RETURN SEMI .)
    LPAREN          reduce using rule 46 (jump_statement -> RETURN SEMI .)
    ADDRESS         reduce using rule 46 (jump_statement -> RETURN SEMI .)
    TIMES           reduce using rule 46 (jump_statement -> RETURN SEMI .)
    PLUS            reduce using rule 46 (jump_statement -> RETURN SEMI .)
    UMINUS          reduce using rule 46 (jump_statement -> RETURN SEMI .)
    NOT             reduce using rule 46 (jump_statement -> RETURN SEMI .)
    ID              reduce using rule 46 (jump_statement -> RETURN SEMI .)
    STRING          reduce using rule 46 (jump_statement -> RETURN SEMI .)
    INT_CONST       reduce using rule 46 (jump_statement -> RETURN SEMI .)
    FLOAT_CONST     reduce using rule 46 (jump_statement -> RETURN SEMI .)
    CHAR_CONST      reduce using rule 46 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 46 (jump_statement -> RETURN SEMI .)


state 163

    (47) assert_statement -> ASSERT expression . SEMI
    (28) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 180
    COMMA           shift and go to state 146


state 164

    (48) assert_statement -> ASSERT SEMI .

    RBRACE          reduce using rule 48 (assert_statement -> ASSERT SEMI .)
    LBRACE          reduce using rule 48 (assert_statement -> ASSERT SEMI .)
    IF              reduce using rule 48 (assert_statement -> ASSERT SEMI .)
    WHILE           reduce using rule 48 (assert_statement -> ASSERT SEMI .)
    FOR             reduce using rule 48 (assert_statement -> ASSERT SEMI .)
    BREAK           reduce using rule 48 (assert_statement -> ASSERT SEMI .)
    RETURN          reduce using rule 48 (assert_statement -> ASSERT SEMI .)
    ASSERT          reduce using rule 48 (assert_statement -> ASSERT SEMI .)
    PRINT           reduce using rule 48 (assert_statement -> ASSERT SEMI .)
    READ            reduce using rule 48 (assert_statement -> ASSERT SEMI .)
    INCREASE        reduce using rule 48 (assert_statement -> ASSERT SEMI .)
    DECREASE        reduce using rule 48 (assert_statement -> ASSERT SEMI .)
    LPAREN          reduce using rule 48 (assert_statement -> ASSERT SEMI .)
    ADDRESS         reduce using rule 48 (assert_statement -> ASSERT SEMI .)
    TIMES           reduce using rule 48 (assert_statement -> ASSERT SEMI .)
    PLUS            reduce using rule 48 (assert_statement -> ASSERT SEMI .)
    UMINUS          reduce using rule 48 (assert_statement -> ASSERT SEMI .)
    NOT             reduce using rule 48 (assert_statement -> ASSERT SEMI .)
    ID              reduce using rule 48 (assert_statement -> ASSERT SEMI .)
    STRING          reduce using rule 48 (assert_statement -> ASSERT SEMI .)
    INT_CONST       reduce using rule 48 (assert_statement -> ASSERT SEMI .)
    FLOAT_CONST     reduce using rule 48 (assert_statement -> ASSERT SEMI .)
    CHAR_CONST      reduce using rule 48 (assert_statement -> ASSERT SEMI .)
    ELSE            reduce using rule 48 (assert_statement -> ASSERT SEMI .)


state 165

    (49) print_statement -> PRINT LPAREN . expression RPAREN SEMI
    (50) print_statement -> PRINT LPAREN . RPAREN SEMI
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    RPAREN          shift and go to state 182
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    expression                     shift and go to state 181
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 166

    (51) read_statement -> READ LPAREN . argument_expression RPAREN SEMI
    (94) argument_expression -> . assignment_expression
    (95) argument_expression -> . argument_expression COMMA assignment_expression
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    argument_expression            shift and go to state 183
    assignment_expression          shift and go to state 150
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 167

    (89) cast_expression -> LPAREN type_specifier RPAREN cast_expression .

    PLUS            reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUS           reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    TIMES           reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIVIDE          reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MOD             reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LT              reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LE              reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    GT              reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    GE              reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQ              reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    NQ              reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    AND             reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    OR              reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACKET        reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    SEMI            reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    COMMA           reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RPAREN          reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQUALS          reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQTIMES         reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQDIV           reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQMOD           reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQPLUS          reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQMINUS         reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACE          reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LBRACE          reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    IF              reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    WHILE           reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    FOR             reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    BREAK           reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RETURN          reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSERT          reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PRINT           reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    READ            reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    INCREASE        reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DECREASE        reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LPAREN          reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ADDRESS         reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    UMINUS          reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    NOT             reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ID              reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    STRING          reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    INT_CONST       reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    FLOAT_CONST     reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    CHAR_CONST      reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ELSE            reduce using rule 89 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)


state 168

    (28) expression -> expression COMMA assignment_expression .

    RPAREN          reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    RBRACE          reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    LBRACE          reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    IF              reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    WHILE           reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    FOR             reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    BREAK           reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    RETURN          reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    ASSERT          reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    PRINT           reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    READ            reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    INCREASE        reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    DECREASE        reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    LPAREN          reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    ADDRESS         reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    TIMES           reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    PLUS            reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    UMINUS          reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    NOT             reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    ID              reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    STRING          reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    INT_CONST       reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    FLOAT_CONST     reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    CHAR_CONST      reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 28 (expression -> expression COMMA assignment_expression .)
    ELSE            reduce using rule 28 (expression -> expression COMMA assignment_expression .)


state 169

    (83) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    INCREASE        reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DECREASE        reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NQ              reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQTIMES         reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQDIV           reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQMOD           reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQPLUS          reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQMINUS         reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    IF              reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    FOR             reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    BREAK           reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ASSERT          reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PRINT           reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    READ            reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ADDRESS         reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    UMINUS          reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NOT             reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ID              reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    STRING          reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    INT_CONST       reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    FLOAT_CONST     reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CHAR_CONST      reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 83 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 170

    (84) postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .

    LBRACKET        reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LPAREN          reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    INCREASE        reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    DECREASE        reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PLUS            reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MINUS           reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    TIMES           reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    DIVIDE          reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MOD             reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LT              reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LE              reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    GT              reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    GE              reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    EQ              reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    NQ              reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    AND             reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    OR              reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RBRACKET        reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    EQUALS          reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    EQTIMES         reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    EQDIV           reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    EQMOD           reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    EQPLUS          reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    EQMINUS         reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    SEMI            reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    COMMA           reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RPAREN          reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RBRACE          reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LBRACE          reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    IF              reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    WHILE           reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    FOR             reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    BREAK           reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RETURN          reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    ASSERT          reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PRINT           reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    READ            reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    ADDRESS         reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    UMINUS          reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    NOT             reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    ID              reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    STRING          reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    INT_CONST       reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    FLOAT_CONST     reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    CHAR_CONST      reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    ELSE            reduce using rule 84 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)


state 171

    (95) argument_expression -> argument_expression COMMA . assignment_expression
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    assignment_expression          shift and go to state 184
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 172

    (14) initializer -> LBRACE initializer_list COMMA RBRACE .

    SEMI            reduce using rule 14 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 14 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 14 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 173

    (16) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 16 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 16 (initializer_list -> initializer_list COMMA initializer .)


state 174

    (29) selection_statement -> IF LPAREN expression . RPAREN statement
    (30) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (28) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 185
    COMMA           shift and go to state 146


state 175

    (31) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (28) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 186
    COMMA           shift and go to state 146


state 176

    (32) iteration_statement -> FOR LPAREN expression . SEMI expression SEMI expression RPAREN statement
    (34) iteration_statement -> FOR LPAREN expression . SEMI SEMI expression RPAREN statement
    (36) iteration_statement -> FOR LPAREN expression . SEMI expression SEMI RPAREN statement
    (38) iteration_statement -> FOR LPAREN expression . SEMI SEMI RPAREN statement
    (28) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 187
    COMMA           shift and go to state 146


state 177

    (33) iteration_statement -> FOR LPAREN SEMI . expression SEMI expression RPAREN statement
    (35) iteration_statement -> FOR LPAREN SEMI . SEMI expression RPAREN statement
    (37) iteration_statement -> FOR LPAREN SEMI . expression SEMI RPAREN statement
    (39) iteration_statement -> FOR LPAREN SEMI . SEMI RPAREN statement
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    SEMI            shift and go to state 188
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    expression                     shift and go to state 189
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 178

    (40) iteration_statement -> FOR LPAREN declaration . expression SEMI expression RPAREN statement
    (41) iteration_statement -> FOR LPAREN declaration . SEMI expression RPAREN statement
    (42) iteration_statement -> FOR LPAREN declaration . expression SEMI RPAREN statement
    (43) iteration_statement -> FOR LPAREN declaration . SEMI RPAREN statement
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    SEMI            shift and go to state 191
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    expression                     shift and go to state 190
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 179

    (45) jump_statement -> RETURN expression SEMI .

    RBRACE          reduce using rule 45 (jump_statement -> RETURN expression SEMI .)
    LBRACE          reduce using rule 45 (jump_statement -> RETURN expression SEMI .)
    IF              reduce using rule 45 (jump_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 45 (jump_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 45 (jump_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 45 (jump_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 45 (jump_statement -> RETURN expression SEMI .)
    ASSERT          reduce using rule 45 (jump_statement -> RETURN expression SEMI .)
    PRINT           reduce using rule 45 (jump_statement -> RETURN expression SEMI .)
    READ            reduce using rule 45 (jump_statement -> RETURN expression SEMI .)
    INCREASE        reduce using rule 45 (jump_statement -> RETURN expression SEMI .)
    DECREASE        reduce using rule 45 (jump_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 45 (jump_statement -> RETURN expression SEMI .)
    ADDRESS         reduce using rule 45 (jump_statement -> RETURN expression SEMI .)
    TIMES           reduce using rule 45 (jump_statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 45 (jump_statement -> RETURN expression SEMI .)
    UMINUS          reduce using rule 45 (jump_statement -> RETURN expression SEMI .)
    NOT             reduce using rule 45 (jump_statement -> RETURN expression SEMI .)
    ID              reduce using rule 45 (jump_statement -> RETURN expression SEMI .)
    STRING          reduce using rule 45 (jump_statement -> RETURN expression SEMI .)
    INT_CONST       reduce using rule 45 (jump_statement -> RETURN expression SEMI .)
    FLOAT_CONST     reduce using rule 45 (jump_statement -> RETURN expression SEMI .)
    CHAR_CONST      reduce using rule 45 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 45 (jump_statement -> RETURN expression SEMI .)


state 180

    (47) assert_statement -> ASSERT expression SEMI .

    RBRACE          reduce using rule 47 (assert_statement -> ASSERT expression SEMI .)
    LBRACE          reduce using rule 47 (assert_statement -> ASSERT expression SEMI .)
    IF              reduce using rule 47 (assert_statement -> ASSERT expression SEMI .)
    WHILE           reduce using rule 47 (assert_statement -> ASSERT expression SEMI .)
    FOR             reduce using rule 47 (assert_statement -> ASSERT expression SEMI .)
    BREAK           reduce using rule 47 (assert_statement -> ASSERT expression SEMI .)
    RETURN          reduce using rule 47 (assert_statement -> ASSERT expression SEMI .)
    ASSERT          reduce using rule 47 (assert_statement -> ASSERT expression SEMI .)
    PRINT           reduce using rule 47 (assert_statement -> ASSERT expression SEMI .)
    READ            reduce using rule 47 (assert_statement -> ASSERT expression SEMI .)
    INCREASE        reduce using rule 47 (assert_statement -> ASSERT expression SEMI .)
    DECREASE        reduce using rule 47 (assert_statement -> ASSERT expression SEMI .)
    LPAREN          reduce using rule 47 (assert_statement -> ASSERT expression SEMI .)
    ADDRESS         reduce using rule 47 (assert_statement -> ASSERT expression SEMI .)
    TIMES           reduce using rule 47 (assert_statement -> ASSERT expression SEMI .)
    PLUS            reduce using rule 47 (assert_statement -> ASSERT expression SEMI .)
    UMINUS          reduce using rule 47 (assert_statement -> ASSERT expression SEMI .)
    NOT             reduce using rule 47 (assert_statement -> ASSERT expression SEMI .)
    ID              reduce using rule 47 (assert_statement -> ASSERT expression SEMI .)
    STRING          reduce using rule 47 (assert_statement -> ASSERT expression SEMI .)
    INT_CONST       reduce using rule 47 (assert_statement -> ASSERT expression SEMI .)
    FLOAT_CONST     reduce using rule 47 (assert_statement -> ASSERT expression SEMI .)
    CHAR_CONST      reduce using rule 47 (assert_statement -> ASSERT expression SEMI .)
    ELSE            reduce using rule 47 (assert_statement -> ASSERT expression SEMI .)


state 181

    (49) print_statement -> PRINT LPAREN expression . RPAREN SEMI
    (28) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 192
    COMMA           shift and go to state 146


state 182

    (50) print_statement -> PRINT LPAREN RPAREN . SEMI

    SEMI            shift and go to state 193


state 183

    (51) read_statement -> READ LPAREN argument_expression . RPAREN SEMI
    (95) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          shift and go to state 194
    COMMA           shift and go to state 171


state 184

    (95) argument_expression -> argument_expression COMMA assignment_expression .

    RPAREN          reduce using rule 95 (argument_expression -> argument_expression COMMA assignment_expression .)
    COMMA           reduce using rule 95 (argument_expression -> argument_expression COMMA assignment_expression .)


state 185

    (29) selection_statement -> IF LPAREN expression RPAREN . statement
    (30) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (52) statement -> . expression_statement
    (53) statement -> . compound_statement
    (54) statement -> . selection_statement
    (55) statement -> . iteration_statement
    (56) statement -> . jump_statement
    (57) statement -> . assert_statement
    (58) statement -> . print_statement
    (59) statement -> . read_statement
    (25) expression_statement -> . expression
    (26) expression_statement -> . empty
    (24) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN statement
    (30) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (31) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (32) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (33) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (34) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (35) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (36) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (37) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (38) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (39) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (40) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (41) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (42) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (43) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (44) jump_statement -> . BREAK SEMI
    (45) jump_statement -> . RETURN expression SEMI
    (46) jump_statement -> . RETURN SEMI
    (47) assert_statement -> . ASSERT expression SEMI
    (48) assert_statement -> . ASSERT SEMI
    (49) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (50) print_statement -> . PRINT LPAREN RPAREN SEMI
    (51) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (125) empty -> .
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for INCREASE resolved as shift
  ! shift/reduce conflict for DECREASE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ADDRESS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for CHAR_CONST resolved as shift
    LBRACE          shift and go to state 34
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    RETURN          shift and go to state 127
    ASSERT          shift and go to state 128
    PRINT           shift and go to state 129
    READ            shift and go to state 130
    ELSE            reduce using rule 125 (empty -> .)
    RBRACE          reduce using rule 125 (empty -> .)
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

  ! LBRACE          [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! BREAK           [ reduce using rule 125 (empty -> .) ]
  ! RETURN          [ reduce using rule 125 (empty -> .) ]
  ! ASSERT          [ reduce using rule 125 (empty -> .) ]
  ! PRINT           [ reduce using rule 125 (empty -> .) ]
  ! READ            [ reduce using rule 125 (empty -> .) ]
  ! INCREASE        [ reduce using rule 125 (empty -> .) ]
  ! DECREASE        [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ADDRESS         [ reduce using rule 125 (empty -> .) ]
  ! TIMES           [ reduce using rule 125 (empty -> .) ]
  ! PLUS            [ reduce using rule 125 (empty -> .) ]
  ! UMINUS          [ reduce using rule 125 (empty -> .) ]
  ! NOT             [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]
  ! STRING          [ reduce using rule 125 (empty -> .) ]
  ! INT_CONST       [ reduce using rule 125 (empty -> .) ]
  ! FLOAT_CONST     [ reduce using rule 125 (empty -> .) ]
  ! CHAR_CONST      [ reduce using rule 125 (empty -> .) ]

    expression                     shift and go to state 121
    statement                      shift and go to state 195
    expression_statement           shift and go to state 113
    compound_statement             shift and go to state 114
    selection_statement            shift and go to state 115
    iteration_statement            shift and go to state 116
    jump_statement                 shift and go to state 117
    assert_statement               shift and go to state 118
    print_statement                shift and go to state 119
    read_statement                 shift and go to state 120
    empty                          shift and go to state 122
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 186

    (31) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (52) statement -> . expression_statement
    (53) statement -> . compound_statement
    (54) statement -> . selection_statement
    (55) statement -> . iteration_statement
    (56) statement -> . jump_statement
    (57) statement -> . assert_statement
    (58) statement -> . print_statement
    (59) statement -> . read_statement
    (25) expression_statement -> . expression
    (26) expression_statement -> . empty
    (24) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN statement
    (30) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (31) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (32) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (33) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (34) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (35) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (36) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (37) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (38) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (39) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (40) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (41) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (42) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (43) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (44) jump_statement -> . BREAK SEMI
    (45) jump_statement -> . RETURN expression SEMI
    (46) jump_statement -> . RETURN SEMI
    (47) assert_statement -> . ASSERT expression SEMI
    (48) assert_statement -> . ASSERT SEMI
    (49) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (50) print_statement -> . PRINT LPAREN RPAREN SEMI
    (51) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (125) empty -> .
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for INCREASE resolved as shift
  ! shift/reduce conflict for DECREASE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ADDRESS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for CHAR_CONST resolved as shift
    LBRACE          shift and go to state 34
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    RETURN          shift and go to state 127
    ASSERT          shift and go to state 128
    PRINT           shift and go to state 129
    READ            shift and go to state 130
    ELSE            reduce using rule 125 (empty -> .)
    RBRACE          reduce using rule 125 (empty -> .)
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

  ! LBRACE          [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! BREAK           [ reduce using rule 125 (empty -> .) ]
  ! RETURN          [ reduce using rule 125 (empty -> .) ]
  ! ASSERT          [ reduce using rule 125 (empty -> .) ]
  ! PRINT           [ reduce using rule 125 (empty -> .) ]
  ! READ            [ reduce using rule 125 (empty -> .) ]
  ! INCREASE        [ reduce using rule 125 (empty -> .) ]
  ! DECREASE        [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ADDRESS         [ reduce using rule 125 (empty -> .) ]
  ! TIMES           [ reduce using rule 125 (empty -> .) ]
  ! PLUS            [ reduce using rule 125 (empty -> .) ]
  ! UMINUS          [ reduce using rule 125 (empty -> .) ]
  ! NOT             [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]
  ! STRING          [ reduce using rule 125 (empty -> .) ]
  ! INT_CONST       [ reduce using rule 125 (empty -> .) ]
  ! FLOAT_CONST     [ reduce using rule 125 (empty -> .) ]
  ! CHAR_CONST      [ reduce using rule 125 (empty -> .) ]

    expression                     shift and go to state 121
    statement                      shift and go to state 196
    expression_statement           shift and go to state 113
    compound_statement             shift and go to state 114
    selection_statement            shift and go to state 115
    iteration_statement            shift and go to state 116
    jump_statement                 shift and go to state 117
    assert_statement               shift and go to state 118
    print_statement                shift and go to state 119
    read_statement                 shift and go to state 120
    empty                          shift and go to state 122
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 187

    (32) iteration_statement -> FOR LPAREN expression SEMI . expression SEMI expression RPAREN statement
    (34) iteration_statement -> FOR LPAREN expression SEMI . SEMI expression RPAREN statement
    (36) iteration_statement -> FOR LPAREN expression SEMI . expression SEMI RPAREN statement
    (38) iteration_statement -> FOR LPAREN expression SEMI . SEMI RPAREN statement
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    SEMI            shift and go to state 198
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    expression                     shift and go to state 197
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 188

    (35) iteration_statement -> FOR LPAREN SEMI SEMI . expression RPAREN statement
    (39) iteration_statement -> FOR LPAREN SEMI SEMI . RPAREN statement
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    RPAREN          shift and go to state 200
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    expression                     shift and go to state 199
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 189

    (33) iteration_statement -> FOR LPAREN SEMI expression . SEMI expression RPAREN statement
    (37) iteration_statement -> FOR LPAREN SEMI expression . SEMI RPAREN statement
    (28) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 201
    COMMA           shift and go to state 146


state 190

    (40) iteration_statement -> FOR LPAREN declaration expression . SEMI expression RPAREN statement
    (42) iteration_statement -> FOR LPAREN declaration expression . SEMI RPAREN statement
    (28) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 202
    COMMA           shift and go to state 146


state 191

    (41) iteration_statement -> FOR LPAREN declaration SEMI . expression RPAREN statement
    (43) iteration_statement -> FOR LPAREN declaration SEMI . RPAREN statement
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    RPAREN          shift and go to state 204
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    expression                     shift and go to state 203
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 192

    (49) print_statement -> PRINT LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 205


state 193

    (50) print_statement -> PRINT LPAREN RPAREN SEMI .

    RBRACE          reduce using rule 50 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    LBRACE          reduce using rule 50 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    IF              reduce using rule 50 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 50 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    FOR             reduce using rule 50 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    BREAK           reduce using rule 50 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    RETURN          reduce using rule 50 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    ASSERT          reduce using rule 50 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    PRINT           reduce using rule 50 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    READ            reduce using rule 50 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    INCREASE        reduce using rule 50 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    DECREASE        reduce using rule 50 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    LPAREN          reduce using rule 50 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    ADDRESS         reduce using rule 50 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    TIMES           reduce using rule 50 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    PLUS            reduce using rule 50 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    UMINUS          reduce using rule 50 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    NOT             reduce using rule 50 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    ID              reduce using rule 50 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    STRING          reduce using rule 50 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    INT_CONST       reduce using rule 50 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 50 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    CHAR_CONST      reduce using rule 50 (print_statement -> PRINT LPAREN RPAREN SEMI .)
    ELSE            reduce using rule 50 (print_statement -> PRINT LPAREN RPAREN SEMI .)


state 194

    (51) read_statement -> READ LPAREN argument_expression RPAREN . SEMI

    SEMI            shift and go to state 206


state 195

    (29) selection_statement -> IF LPAREN expression RPAREN statement .
    (30) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBRACE          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN statement .)
    READ            reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INCREASE        reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DECREASE        reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ADDRESS         reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UMINUS          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 207

  ! ELSE            [ reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 196

    (31) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 31 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 31 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 31 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 31 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 31 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 31 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 31 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 31 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 31 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    READ            reduce using rule 31 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INCREASE        reduce using rule 31 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DECREASE        reduce using rule 31 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 31 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ADDRESS         reduce using rule 31 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 31 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 31 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UMINUS          reduce using rule 31 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 31 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 31 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 31 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 31 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 31 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 31 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 31 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 197

    (32) iteration_statement -> FOR LPAREN expression SEMI expression . SEMI expression RPAREN statement
    (36) iteration_statement -> FOR LPAREN expression SEMI expression . SEMI RPAREN statement
    (28) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 208
    COMMA           shift and go to state 146


state 198

    (34) iteration_statement -> FOR LPAREN expression SEMI SEMI . expression RPAREN statement
    (38) iteration_statement -> FOR LPAREN expression SEMI SEMI . RPAREN statement
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    RPAREN          shift and go to state 210
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    expression                     shift and go to state 209
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 199

    (35) iteration_statement -> FOR LPAREN SEMI SEMI expression . RPAREN statement
    (28) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 211
    COMMA           shift and go to state 146


state 200

    (39) iteration_statement -> FOR LPAREN SEMI SEMI RPAREN . statement
    (52) statement -> . expression_statement
    (53) statement -> . compound_statement
    (54) statement -> . selection_statement
    (55) statement -> . iteration_statement
    (56) statement -> . jump_statement
    (57) statement -> . assert_statement
    (58) statement -> . print_statement
    (59) statement -> . read_statement
    (25) expression_statement -> . expression
    (26) expression_statement -> . empty
    (24) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN statement
    (30) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (31) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (32) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (33) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (34) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (35) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (36) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (37) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (38) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (39) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (40) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (41) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (42) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (43) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (44) jump_statement -> . BREAK SEMI
    (45) jump_statement -> . RETURN expression SEMI
    (46) jump_statement -> . RETURN SEMI
    (47) assert_statement -> . ASSERT expression SEMI
    (48) assert_statement -> . ASSERT SEMI
    (49) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (50) print_statement -> . PRINT LPAREN RPAREN SEMI
    (51) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (125) empty -> .
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for INCREASE resolved as shift
  ! shift/reduce conflict for DECREASE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ADDRESS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for CHAR_CONST resolved as shift
    LBRACE          shift and go to state 34
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    RETURN          shift and go to state 127
    ASSERT          shift and go to state 128
    PRINT           shift and go to state 129
    READ            shift and go to state 130
    ELSE            reduce using rule 125 (empty -> .)
    RBRACE          reduce using rule 125 (empty -> .)
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

  ! LBRACE          [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! BREAK           [ reduce using rule 125 (empty -> .) ]
  ! RETURN          [ reduce using rule 125 (empty -> .) ]
  ! ASSERT          [ reduce using rule 125 (empty -> .) ]
  ! PRINT           [ reduce using rule 125 (empty -> .) ]
  ! READ            [ reduce using rule 125 (empty -> .) ]
  ! INCREASE        [ reduce using rule 125 (empty -> .) ]
  ! DECREASE        [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ADDRESS         [ reduce using rule 125 (empty -> .) ]
  ! TIMES           [ reduce using rule 125 (empty -> .) ]
  ! PLUS            [ reduce using rule 125 (empty -> .) ]
  ! UMINUS          [ reduce using rule 125 (empty -> .) ]
  ! NOT             [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]
  ! STRING          [ reduce using rule 125 (empty -> .) ]
  ! INT_CONST       [ reduce using rule 125 (empty -> .) ]
  ! FLOAT_CONST     [ reduce using rule 125 (empty -> .) ]
  ! CHAR_CONST      [ reduce using rule 125 (empty -> .) ]

    statement                      shift and go to state 212
    expression_statement           shift and go to state 113
    compound_statement             shift and go to state 114
    selection_statement            shift and go to state 115
    iteration_statement            shift and go to state 116
    jump_statement                 shift and go to state 117
    assert_statement               shift and go to state 118
    print_statement                shift and go to state 119
    read_statement                 shift and go to state 120
    expression                     shift and go to state 121
    empty                          shift and go to state 122
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 201

    (33) iteration_statement -> FOR LPAREN SEMI expression SEMI . expression RPAREN statement
    (37) iteration_statement -> FOR LPAREN SEMI expression SEMI . RPAREN statement
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    RPAREN          shift and go to state 214
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    expression                     shift and go to state 213
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 202

    (40) iteration_statement -> FOR LPAREN declaration expression SEMI . expression RPAREN statement
    (42) iteration_statement -> FOR LPAREN declaration expression SEMI . RPAREN statement
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    RPAREN          shift and go to state 216
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    expression                     shift and go to state 215
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 203

    (41) iteration_statement -> FOR LPAREN declaration SEMI expression . RPAREN statement
    (28) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 217
    COMMA           shift and go to state 146


state 204

    (43) iteration_statement -> FOR LPAREN declaration SEMI RPAREN . statement
    (52) statement -> . expression_statement
    (53) statement -> . compound_statement
    (54) statement -> . selection_statement
    (55) statement -> . iteration_statement
    (56) statement -> . jump_statement
    (57) statement -> . assert_statement
    (58) statement -> . print_statement
    (59) statement -> . read_statement
    (25) expression_statement -> . expression
    (26) expression_statement -> . empty
    (24) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN statement
    (30) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (31) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (32) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (33) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (34) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (35) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (36) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (37) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (38) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (39) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (40) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (41) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (42) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (43) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (44) jump_statement -> . BREAK SEMI
    (45) jump_statement -> . RETURN expression SEMI
    (46) jump_statement -> . RETURN SEMI
    (47) assert_statement -> . ASSERT expression SEMI
    (48) assert_statement -> . ASSERT SEMI
    (49) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (50) print_statement -> . PRINT LPAREN RPAREN SEMI
    (51) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (125) empty -> .
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for INCREASE resolved as shift
  ! shift/reduce conflict for DECREASE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ADDRESS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for CHAR_CONST resolved as shift
    LBRACE          shift and go to state 34
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    RETURN          shift and go to state 127
    ASSERT          shift and go to state 128
    PRINT           shift and go to state 129
    READ            shift and go to state 130
    ELSE            reduce using rule 125 (empty -> .)
    RBRACE          reduce using rule 125 (empty -> .)
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

  ! LBRACE          [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! BREAK           [ reduce using rule 125 (empty -> .) ]
  ! RETURN          [ reduce using rule 125 (empty -> .) ]
  ! ASSERT          [ reduce using rule 125 (empty -> .) ]
  ! PRINT           [ reduce using rule 125 (empty -> .) ]
  ! READ            [ reduce using rule 125 (empty -> .) ]
  ! INCREASE        [ reduce using rule 125 (empty -> .) ]
  ! DECREASE        [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ADDRESS         [ reduce using rule 125 (empty -> .) ]
  ! TIMES           [ reduce using rule 125 (empty -> .) ]
  ! PLUS            [ reduce using rule 125 (empty -> .) ]
  ! UMINUS          [ reduce using rule 125 (empty -> .) ]
  ! NOT             [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]
  ! STRING          [ reduce using rule 125 (empty -> .) ]
  ! INT_CONST       [ reduce using rule 125 (empty -> .) ]
  ! FLOAT_CONST     [ reduce using rule 125 (empty -> .) ]
  ! CHAR_CONST      [ reduce using rule 125 (empty -> .) ]

    statement                      shift and go to state 218
    expression_statement           shift and go to state 113
    compound_statement             shift and go to state 114
    selection_statement            shift and go to state 115
    iteration_statement            shift and go to state 116
    jump_statement                 shift and go to state 117
    assert_statement               shift and go to state 118
    print_statement                shift and go to state 119
    read_statement                 shift and go to state 120
    expression                     shift and go to state 121
    empty                          shift and go to state 122
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 205

    (49) print_statement -> PRINT LPAREN expression RPAREN SEMI .

    RBRACE          reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    LBRACE          reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    BREAK           reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    ASSERT          reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    PRINT           reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    READ            reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    INCREASE        reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    DECREASE        reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    LPAREN          reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    ADDRESS         reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    TIMES           reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    PLUS            reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    UMINUS          reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    NOT             reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    ID              reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    STRING          reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    INT_CONST       reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    CHAR_CONST      reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    ELSE            reduce using rule 49 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)


state 206

    (51) read_statement -> READ LPAREN argument_expression RPAREN SEMI .

    RBRACE          reduce using rule 51 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    LBRACE          reduce using rule 51 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    IF              reduce using rule 51 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    WHILE           reduce using rule 51 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FOR             reduce using rule 51 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    BREAK           reduce using rule 51 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    RETURN          reduce using rule 51 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ASSERT          reduce using rule 51 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PRINT           reduce using rule 51 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    READ            reduce using rule 51 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    INCREASE        reduce using rule 51 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    DECREASE        reduce using rule 51 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    LPAREN          reduce using rule 51 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ADDRESS         reduce using rule 51 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    TIMES           reduce using rule 51 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PLUS            reduce using rule 51 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    UMINUS          reduce using rule 51 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    NOT             reduce using rule 51 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ID              reduce using rule 51 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    STRING          reduce using rule 51 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    INT_CONST       reduce using rule 51 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 51 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    CHAR_CONST      reduce using rule 51 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ELSE            reduce using rule 51 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)


state 207

    (30) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (52) statement -> . expression_statement
    (53) statement -> . compound_statement
    (54) statement -> . selection_statement
    (55) statement -> . iteration_statement
    (56) statement -> . jump_statement
    (57) statement -> . assert_statement
    (58) statement -> . print_statement
    (59) statement -> . read_statement
    (25) expression_statement -> . expression
    (26) expression_statement -> . empty
    (24) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN statement
    (30) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (31) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (32) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (33) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (34) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (35) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (36) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (37) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (38) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (39) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (40) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (41) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (42) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (43) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (44) jump_statement -> . BREAK SEMI
    (45) jump_statement -> . RETURN expression SEMI
    (46) jump_statement -> . RETURN SEMI
    (47) assert_statement -> . ASSERT expression SEMI
    (48) assert_statement -> . ASSERT SEMI
    (49) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (50) print_statement -> . PRINT LPAREN RPAREN SEMI
    (51) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (125) empty -> .
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for INCREASE resolved as shift
  ! shift/reduce conflict for DECREASE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ADDRESS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for CHAR_CONST resolved as shift
    LBRACE          shift and go to state 34
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    RETURN          shift and go to state 127
    ASSERT          shift and go to state 128
    PRINT           shift and go to state 129
    READ            shift and go to state 130
    ELSE            reduce using rule 125 (empty -> .)
    RBRACE          reduce using rule 125 (empty -> .)
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

  ! LBRACE          [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! BREAK           [ reduce using rule 125 (empty -> .) ]
  ! RETURN          [ reduce using rule 125 (empty -> .) ]
  ! ASSERT          [ reduce using rule 125 (empty -> .) ]
  ! PRINT           [ reduce using rule 125 (empty -> .) ]
  ! READ            [ reduce using rule 125 (empty -> .) ]
  ! INCREASE        [ reduce using rule 125 (empty -> .) ]
  ! DECREASE        [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ADDRESS         [ reduce using rule 125 (empty -> .) ]
  ! TIMES           [ reduce using rule 125 (empty -> .) ]
  ! PLUS            [ reduce using rule 125 (empty -> .) ]
  ! UMINUS          [ reduce using rule 125 (empty -> .) ]
  ! NOT             [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]
  ! STRING          [ reduce using rule 125 (empty -> .) ]
  ! INT_CONST       [ reduce using rule 125 (empty -> .) ]
  ! FLOAT_CONST     [ reduce using rule 125 (empty -> .) ]
  ! CHAR_CONST      [ reduce using rule 125 (empty -> .) ]

    expression                     shift and go to state 121
    statement                      shift and go to state 219
    expression_statement           shift and go to state 113
    compound_statement             shift and go to state 114
    selection_statement            shift and go to state 115
    iteration_statement            shift and go to state 116
    jump_statement                 shift and go to state 117
    assert_statement               shift and go to state 118
    print_statement                shift and go to state 119
    read_statement                 shift and go to state 120
    empty                          shift and go to state 122
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 208

    (32) iteration_statement -> FOR LPAREN expression SEMI expression SEMI . expression RPAREN statement
    (36) iteration_statement -> FOR LPAREN expression SEMI expression SEMI . RPAREN statement
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

    RPAREN          shift and go to state 221
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

    expression                     shift and go to state 220
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 209

    (34) iteration_statement -> FOR LPAREN expression SEMI SEMI expression . RPAREN statement
    (28) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 222
    COMMA           shift and go to state 146


state 210

    (38) iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN . statement
    (52) statement -> . expression_statement
    (53) statement -> . compound_statement
    (54) statement -> . selection_statement
    (55) statement -> . iteration_statement
    (56) statement -> . jump_statement
    (57) statement -> . assert_statement
    (58) statement -> . print_statement
    (59) statement -> . read_statement
    (25) expression_statement -> . expression
    (26) expression_statement -> . empty
    (24) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN statement
    (30) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (31) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (32) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (33) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (34) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (35) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (36) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (37) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (38) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (39) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (40) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (41) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (42) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (43) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (44) jump_statement -> . BREAK SEMI
    (45) jump_statement -> . RETURN expression SEMI
    (46) jump_statement -> . RETURN SEMI
    (47) assert_statement -> . ASSERT expression SEMI
    (48) assert_statement -> . ASSERT SEMI
    (49) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (50) print_statement -> . PRINT LPAREN RPAREN SEMI
    (51) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (125) empty -> .
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for INCREASE resolved as shift
  ! shift/reduce conflict for DECREASE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ADDRESS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for CHAR_CONST resolved as shift
    LBRACE          shift and go to state 34
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    RETURN          shift and go to state 127
    ASSERT          shift and go to state 128
    PRINT           shift and go to state 129
    READ            shift and go to state 130
    ELSE            reduce using rule 125 (empty -> .)
    RBRACE          reduce using rule 125 (empty -> .)
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

  ! LBRACE          [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! BREAK           [ reduce using rule 125 (empty -> .) ]
  ! RETURN          [ reduce using rule 125 (empty -> .) ]
  ! ASSERT          [ reduce using rule 125 (empty -> .) ]
  ! PRINT           [ reduce using rule 125 (empty -> .) ]
  ! READ            [ reduce using rule 125 (empty -> .) ]
  ! INCREASE        [ reduce using rule 125 (empty -> .) ]
  ! DECREASE        [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ADDRESS         [ reduce using rule 125 (empty -> .) ]
  ! TIMES           [ reduce using rule 125 (empty -> .) ]
  ! PLUS            [ reduce using rule 125 (empty -> .) ]
  ! UMINUS          [ reduce using rule 125 (empty -> .) ]
  ! NOT             [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]
  ! STRING          [ reduce using rule 125 (empty -> .) ]
  ! INT_CONST       [ reduce using rule 125 (empty -> .) ]
  ! FLOAT_CONST     [ reduce using rule 125 (empty -> .) ]
  ! CHAR_CONST      [ reduce using rule 125 (empty -> .) ]

    expression                     shift and go to state 121
    statement                      shift and go to state 223
    expression_statement           shift and go to state 113
    compound_statement             shift and go to state 114
    selection_statement            shift and go to state 115
    iteration_statement            shift and go to state 116
    jump_statement                 shift and go to state 117
    assert_statement               shift and go to state 118
    print_statement                shift and go to state 119
    read_statement                 shift and go to state 120
    empty                          shift and go to state 122
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 211

    (35) iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN . statement
    (52) statement -> . expression_statement
    (53) statement -> . compound_statement
    (54) statement -> . selection_statement
    (55) statement -> . iteration_statement
    (56) statement -> . jump_statement
    (57) statement -> . assert_statement
    (58) statement -> . print_statement
    (59) statement -> . read_statement
    (25) expression_statement -> . expression
    (26) expression_statement -> . empty
    (24) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN statement
    (30) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (31) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (32) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (33) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (34) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (35) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (36) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (37) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (38) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (39) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (40) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (41) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (42) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (43) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (44) jump_statement -> . BREAK SEMI
    (45) jump_statement -> . RETURN expression SEMI
    (46) jump_statement -> . RETURN SEMI
    (47) assert_statement -> . ASSERT expression SEMI
    (48) assert_statement -> . ASSERT SEMI
    (49) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (50) print_statement -> . PRINT LPAREN RPAREN SEMI
    (51) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (125) empty -> .
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for INCREASE resolved as shift
  ! shift/reduce conflict for DECREASE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ADDRESS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for CHAR_CONST resolved as shift
    LBRACE          shift and go to state 34
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    RETURN          shift and go to state 127
    ASSERT          shift and go to state 128
    PRINT           shift and go to state 129
    READ            shift and go to state 130
    ELSE            reduce using rule 125 (empty -> .)
    RBRACE          reduce using rule 125 (empty -> .)
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

  ! LBRACE          [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! BREAK           [ reduce using rule 125 (empty -> .) ]
  ! RETURN          [ reduce using rule 125 (empty -> .) ]
  ! ASSERT          [ reduce using rule 125 (empty -> .) ]
  ! PRINT           [ reduce using rule 125 (empty -> .) ]
  ! READ            [ reduce using rule 125 (empty -> .) ]
  ! INCREASE        [ reduce using rule 125 (empty -> .) ]
  ! DECREASE        [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ADDRESS         [ reduce using rule 125 (empty -> .) ]
  ! TIMES           [ reduce using rule 125 (empty -> .) ]
  ! PLUS            [ reduce using rule 125 (empty -> .) ]
  ! UMINUS          [ reduce using rule 125 (empty -> .) ]
  ! NOT             [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]
  ! STRING          [ reduce using rule 125 (empty -> .) ]
  ! INT_CONST       [ reduce using rule 125 (empty -> .) ]
  ! FLOAT_CONST     [ reduce using rule 125 (empty -> .) ]
  ! CHAR_CONST      [ reduce using rule 125 (empty -> .) ]

    expression                     shift and go to state 121
    statement                      shift and go to state 224
    expression_statement           shift and go to state 113
    compound_statement             shift and go to state 114
    selection_statement            shift and go to state 115
    iteration_statement            shift and go to state 116
    jump_statement                 shift and go to state 117
    assert_statement               shift and go to state 118
    print_statement                shift and go to state 119
    read_statement                 shift and go to state 120
    empty                          shift and go to state 122
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 212

    (39) iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .

    RBRACE          reduce using rule 39 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    LBRACE          reduce using rule 39 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    IF              reduce using rule 39 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    WHILE           reduce using rule 39 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    FOR             reduce using rule 39 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    BREAK           reduce using rule 39 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    RETURN          reduce using rule 39 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    ASSERT          reduce using rule 39 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    PRINT           reduce using rule 39 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    READ            reduce using rule 39 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    INCREASE        reduce using rule 39 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    DECREASE        reduce using rule 39 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    LPAREN          reduce using rule 39 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    ADDRESS         reduce using rule 39 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    TIMES           reduce using rule 39 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    PLUS            reduce using rule 39 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    UMINUS          reduce using rule 39 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    NOT             reduce using rule 39 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    ID              reduce using rule 39 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    STRING          reduce using rule 39 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    INT_CONST       reduce using rule 39 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    FLOAT_CONST     reduce using rule 39 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    CHAR_CONST      reduce using rule 39 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)
    ELSE            reduce using rule 39 (iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement .)


state 213

    (33) iteration_statement -> FOR LPAREN SEMI expression SEMI expression . RPAREN statement
    (28) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 225
    COMMA           shift and go to state 146


state 214

    (37) iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN . statement
    (52) statement -> . expression_statement
    (53) statement -> . compound_statement
    (54) statement -> . selection_statement
    (55) statement -> . iteration_statement
    (56) statement -> . jump_statement
    (57) statement -> . assert_statement
    (58) statement -> . print_statement
    (59) statement -> . read_statement
    (25) expression_statement -> . expression
    (26) expression_statement -> . empty
    (24) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN statement
    (30) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (31) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (32) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (33) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (34) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (35) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (36) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (37) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (38) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (39) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (40) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (41) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (42) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (43) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (44) jump_statement -> . BREAK SEMI
    (45) jump_statement -> . RETURN expression SEMI
    (46) jump_statement -> . RETURN SEMI
    (47) assert_statement -> . ASSERT expression SEMI
    (48) assert_statement -> . ASSERT SEMI
    (49) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (50) print_statement -> . PRINT LPAREN RPAREN SEMI
    (51) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (125) empty -> .
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for INCREASE resolved as shift
  ! shift/reduce conflict for DECREASE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ADDRESS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for CHAR_CONST resolved as shift
    LBRACE          shift and go to state 34
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    RETURN          shift and go to state 127
    ASSERT          shift and go to state 128
    PRINT           shift and go to state 129
    READ            shift and go to state 130
    ELSE            reduce using rule 125 (empty -> .)
    RBRACE          reduce using rule 125 (empty -> .)
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

  ! LBRACE          [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! BREAK           [ reduce using rule 125 (empty -> .) ]
  ! RETURN          [ reduce using rule 125 (empty -> .) ]
  ! ASSERT          [ reduce using rule 125 (empty -> .) ]
  ! PRINT           [ reduce using rule 125 (empty -> .) ]
  ! READ            [ reduce using rule 125 (empty -> .) ]
  ! INCREASE        [ reduce using rule 125 (empty -> .) ]
  ! DECREASE        [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ADDRESS         [ reduce using rule 125 (empty -> .) ]
  ! TIMES           [ reduce using rule 125 (empty -> .) ]
  ! PLUS            [ reduce using rule 125 (empty -> .) ]
  ! UMINUS          [ reduce using rule 125 (empty -> .) ]
  ! NOT             [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]
  ! STRING          [ reduce using rule 125 (empty -> .) ]
  ! INT_CONST       [ reduce using rule 125 (empty -> .) ]
  ! FLOAT_CONST     [ reduce using rule 125 (empty -> .) ]
  ! CHAR_CONST      [ reduce using rule 125 (empty -> .) ]

    expression                     shift and go to state 121
    statement                      shift and go to state 226
    expression_statement           shift and go to state 113
    compound_statement             shift and go to state 114
    selection_statement            shift and go to state 115
    iteration_statement            shift and go to state 116
    jump_statement                 shift and go to state 117
    assert_statement               shift and go to state 118
    print_statement                shift and go to state 119
    read_statement                 shift and go to state 120
    empty                          shift and go to state 122
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 215

    (40) iteration_statement -> FOR LPAREN declaration expression SEMI expression . RPAREN statement
    (28) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 227
    COMMA           shift and go to state 146


state 216

    (42) iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN . statement
    (52) statement -> . expression_statement
    (53) statement -> . compound_statement
    (54) statement -> . selection_statement
    (55) statement -> . iteration_statement
    (56) statement -> . jump_statement
    (57) statement -> . assert_statement
    (58) statement -> . print_statement
    (59) statement -> . read_statement
    (25) expression_statement -> . expression
    (26) expression_statement -> . empty
    (24) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN statement
    (30) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (31) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (32) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (33) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (34) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (35) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (36) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (37) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (38) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (39) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (40) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (41) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (42) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (43) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (44) jump_statement -> . BREAK SEMI
    (45) jump_statement -> . RETURN expression SEMI
    (46) jump_statement -> . RETURN SEMI
    (47) assert_statement -> . ASSERT expression SEMI
    (48) assert_statement -> . ASSERT SEMI
    (49) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (50) print_statement -> . PRINT LPAREN RPAREN SEMI
    (51) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (125) empty -> .
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for INCREASE resolved as shift
  ! shift/reduce conflict for DECREASE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ADDRESS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for CHAR_CONST resolved as shift
    LBRACE          shift and go to state 34
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    RETURN          shift and go to state 127
    ASSERT          shift and go to state 128
    PRINT           shift and go to state 129
    READ            shift and go to state 130
    ELSE            reduce using rule 125 (empty -> .)
    RBRACE          reduce using rule 125 (empty -> .)
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

  ! LBRACE          [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! BREAK           [ reduce using rule 125 (empty -> .) ]
  ! RETURN          [ reduce using rule 125 (empty -> .) ]
  ! ASSERT          [ reduce using rule 125 (empty -> .) ]
  ! PRINT           [ reduce using rule 125 (empty -> .) ]
  ! READ            [ reduce using rule 125 (empty -> .) ]
  ! INCREASE        [ reduce using rule 125 (empty -> .) ]
  ! DECREASE        [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ADDRESS         [ reduce using rule 125 (empty -> .) ]
  ! TIMES           [ reduce using rule 125 (empty -> .) ]
  ! PLUS            [ reduce using rule 125 (empty -> .) ]
  ! UMINUS          [ reduce using rule 125 (empty -> .) ]
  ! NOT             [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]
  ! STRING          [ reduce using rule 125 (empty -> .) ]
  ! INT_CONST       [ reduce using rule 125 (empty -> .) ]
  ! FLOAT_CONST     [ reduce using rule 125 (empty -> .) ]
  ! CHAR_CONST      [ reduce using rule 125 (empty -> .) ]

    expression                     shift and go to state 121
    statement                      shift and go to state 228
    expression_statement           shift and go to state 113
    compound_statement             shift and go to state 114
    selection_statement            shift and go to state 115
    iteration_statement            shift and go to state 116
    jump_statement                 shift and go to state 117
    assert_statement               shift and go to state 118
    print_statement                shift and go to state 119
    read_statement                 shift and go to state 120
    empty                          shift and go to state 122
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 217

    (41) iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN . statement
    (52) statement -> . expression_statement
    (53) statement -> . compound_statement
    (54) statement -> . selection_statement
    (55) statement -> . iteration_statement
    (56) statement -> . jump_statement
    (57) statement -> . assert_statement
    (58) statement -> . print_statement
    (59) statement -> . read_statement
    (25) expression_statement -> . expression
    (26) expression_statement -> . empty
    (24) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN statement
    (30) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (31) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (32) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (33) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (34) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (35) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (36) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (37) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (38) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (39) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (40) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (41) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (42) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (43) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (44) jump_statement -> . BREAK SEMI
    (45) jump_statement -> . RETURN expression SEMI
    (46) jump_statement -> . RETURN SEMI
    (47) assert_statement -> . ASSERT expression SEMI
    (48) assert_statement -> . ASSERT SEMI
    (49) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (50) print_statement -> . PRINT LPAREN RPAREN SEMI
    (51) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (125) empty -> .
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for INCREASE resolved as shift
  ! shift/reduce conflict for DECREASE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ADDRESS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for CHAR_CONST resolved as shift
    LBRACE          shift and go to state 34
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    RETURN          shift and go to state 127
    ASSERT          shift and go to state 128
    PRINT           shift and go to state 129
    READ            shift and go to state 130
    ELSE            reduce using rule 125 (empty -> .)
    RBRACE          reduce using rule 125 (empty -> .)
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

  ! LBRACE          [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! BREAK           [ reduce using rule 125 (empty -> .) ]
  ! RETURN          [ reduce using rule 125 (empty -> .) ]
  ! ASSERT          [ reduce using rule 125 (empty -> .) ]
  ! PRINT           [ reduce using rule 125 (empty -> .) ]
  ! READ            [ reduce using rule 125 (empty -> .) ]
  ! INCREASE        [ reduce using rule 125 (empty -> .) ]
  ! DECREASE        [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ADDRESS         [ reduce using rule 125 (empty -> .) ]
  ! TIMES           [ reduce using rule 125 (empty -> .) ]
  ! PLUS            [ reduce using rule 125 (empty -> .) ]
  ! UMINUS          [ reduce using rule 125 (empty -> .) ]
  ! NOT             [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]
  ! STRING          [ reduce using rule 125 (empty -> .) ]
  ! INT_CONST       [ reduce using rule 125 (empty -> .) ]
  ! FLOAT_CONST     [ reduce using rule 125 (empty -> .) ]
  ! CHAR_CONST      [ reduce using rule 125 (empty -> .) ]

    expression                     shift and go to state 121
    statement                      shift and go to state 229
    expression_statement           shift and go to state 113
    compound_statement             shift and go to state 114
    selection_statement            shift and go to state 115
    iteration_statement            shift and go to state 116
    jump_statement                 shift and go to state 117
    assert_statement               shift and go to state 118
    print_statement                shift and go to state 119
    read_statement                 shift and go to state 120
    empty                          shift and go to state 122
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 218

    (43) iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .

    RBRACE          reduce using rule 43 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    LBRACE          reduce using rule 43 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    IF              reduce using rule 43 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    WHILE           reduce using rule 43 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    FOR             reduce using rule 43 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    BREAK           reduce using rule 43 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    RETURN          reduce using rule 43 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    ASSERT          reduce using rule 43 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    PRINT           reduce using rule 43 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    READ            reduce using rule 43 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    INCREASE        reduce using rule 43 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    DECREASE        reduce using rule 43 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    LPAREN          reduce using rule 43 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    ADDRESS         reduce using rule 43 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    TIMES           reduce using rule 43 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    PLUS            reduce using rule 43 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    UMINUS          reduce using rule 43 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    NOT             reduce using rule 43 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    ID              reduce using rule 43 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    STRING          reduce using rule 43 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    INT_CONST       reduce using rule 43 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    FLOAT_CONST     reduce using rule 43 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    CHAR_CONST      reduce using rule 43 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)
    ELSE            reduce using rule 43 (iteration_statement -> FOR LPAREN declaration SEMI RPAREN statement .)


state 219

    (30) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RBRACE          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASSERT          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PRINT           reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    READ            reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INCREASE        reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DECREASE        reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ADDRESS         reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UMINUS          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST       reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT_CONST     reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR_CONST      reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 220

    (32) iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression . RPAREN statement
    (28) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 230
    COMMA           shift and go to state 146


state 221

    (36) iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN . statement
    (52) statement -> . expression_statement
    (53) statement -> . compound_statement
    (54) statement -> . selection_statement
    (55) statement -> . iteration_statement
    (56) statement -> . jump_statement
    (57) statement -> . assert_statement
    (58) statement -> . print_statement
    (59) statement -> . read_statement
    (25) expression_statement -> . expression
    (26) expression_statement -> . empty
    (24) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN statement
    (30) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (31) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (32) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (33) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (34) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (35) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (36) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (37) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (38) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (39) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (40) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (41) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (42) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (43) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (44) jump_statement -> . BREAK SEMI
    (45) jump_statement -> . RETURN expression SEMI
    (46) jump_statement -> . RETURN SEMI
    (47) assert_statement -> . ASSERT expression SEMI
    (48) assert_statement -> . ASSERT SEMI
    (49) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (50) print_statement -> . PRINT LPAREN RPAREN SEMI
    (51) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (125) empty -> .
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for INCREASE resolved as shift
  ! shift/reduce conflict for DECREASE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ADDRESS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for CHAR_CONST resolved as shift
    LBRACE          shift and go to state 34
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    RETURN          shift and go to state 127
    ASSERT          shift and go to state 128
    PRINT           shift and go to state 129
    READ            shift and go to state 130
    ELSE            reduce using rule 125 (empty -> .)
    RBRACE          reduce using rule 125 (empty -> .)
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

  ! LBRACE          [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! BREAK           [ reduce using rule 125 (empty -> .) ]
  ! RETURN          [ reduce using rule 125 (empty -> .) ]
  ! ASSERT          [ reduce using rule 125 (empty -> .) ]
  ! PRINT           [ reduce using rule 125 (empty -> .) ]
  ! READ            [ reduce using rule 125 (empty -> .) ]
  ! INCREASE        [ reduce using rule 125 (empty -> .) ]
  ! DECREASE        [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ADDRESS         [ reduce using rule 125 (empty -> .) ]
  ! TIMES           [ reduce using rule 125 (empty -> .) ]
  ! PLUS            [ reduce using rule 125 (empty -> .) ]
  ! UMINUS          [ reduce using rule 125 (empty -> .) ]
  ! NOT             [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]
  ! STRING          [ reduce using rule 125 (empty -> .) ]
  ! INT_CONST       [ reduce using rule 125 (empty -> .) ]
  ! FLOAT_CONST     [ reduce using rule 125 (empty -> .) ]
  ! CHAR_CONST      [ reduce using rule 125 (empty -> .) ]

    expression                     shift and go to state 121
    statement                      shift and go to state 231
    expression_statement           shift and go to state 113
    compound_statement             shift and go to state 114
    selection_statement            shift and go to state 115
    iteration_statement            shift and go to state 116
    jump_statement                 shift and go to state 117
    assert_statement               shift and go to state 118
    print_statement                shift and go to state 119
    read_statement                 shift and go to state 120
    empty                          shift and go to state 122
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 222

    (34) iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN . statement
    (52) statement -> . expression_statement
    (53) statement -> . compound_statement
    (54) statement -> . selection_statement
    (55) statement -> . iteration_statement
    (56) statement -> . jump_statement
    (57) statement -> . assert_statement
    (58) statement -> . print_statement
    (59) statement -> . read_statement
    (25) expression_statement -> . expression
    (26) expression_statement -> . empty
    (24) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN statement
    (30) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (31) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (32) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (33) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (34) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (35) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (36) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (37) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (38) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (39) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (40) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (41) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (42) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (43) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (44) jump_statement -> . BREAK SEMI
    (45) jump_statement -> . RETURN expression SEMI
    (46) jump_statement -> . RETURN SEMI
    (47) assert_statement -> . ASSERT expression SEMI
    (48) assert_statement -> . ASSERT SEMI
    (49) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (50) print_statement -> . PRINT LPAREN RPAREN SEMI
    (51) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (125) empty -> .
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for INCREASE resolved as shift
  ! shift/reduce conflict for DECREASE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ADDRESS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for CHAR_CONST resolved as shift
    LBRACE          shift and go to state 34
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    RETURN          shift and go to state 127
    ASSERT          shift and go to state 128
    PRINT           shift and go to state 129
    READ            shift and go to state 130
    ELSE            reduce using rule 125 (empty -> .)
    RBRACE          reduce using rule 125 (empty -> .)
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

  ! LBRACE          [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! BREAK           [ reduce using rule 125 (empty -> .) ]
  ! RETURN          [ reduce using rule 125 (empty -> .) ]
  ! ASSERT          [ reduce using rule 125 (empty -> .) ]
  ! PRINT           [ reduce using rule 125 (empty -> .) ]
  ! READ            [ reduce using rule 125 (empty -> .) ]
  ! INCREASE        [ reduce using rule 125 (empty -> .) ]
  ! DECREASE        [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ADDRESS         [ reduce using rule 125 (empty -> .) ]
  ! TIMES           [ reduce using rule 125 (empty -> .) ]
  ! PLUS            [ reduce using rule 125 (empty -> .) ]
  ! UMINUS          [ reduce using rule 125 (empty -> .) ]
  ! NOT             [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]
  ! STRING          [ reduce using rule 125 (empty -> .) ]
  ! INT_CONST       [ reduce using rule 125 (empty -> .) ]
  ! FLOAT_CONST     [ reduce using rule 125 (empty -> .) ]
  ! CHAR_CONST      [ reduce using rule 125 (empty -> .) ]

    expression                     shift and go to state 121
    statement                      shift and go to state 232
    expression_statement           shift and go to state 113
    compound_statement             shift and go to state 114
    selection_statement            shift and go to state 115
    iteration_statement            shift and go to state 116
    jump_statement                 shift and go to state 117
    assert_statement               shift and go to state 118
    print_statement                shift and go to state 119
    read_statement                 shift and go to state 120
    empty                          shift and go to state 122
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 223

    (38) iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .

    RBRACE          reduce using rule 38 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    LBRACE          reduce using rule 38 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    IF              reduce using rule 38 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    WHILE           reduce using rule 38 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    FOR             reduce using rule 38 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    BREAK           reduce using rule 38 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    RETURN          reduce using rule 38 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    ASSERT          reduce using rule 38 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    PRINT           reduce using rule 38 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    READ            reduce using rule 38 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    INCREASE        reduce using rule 38 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    DECREASE        reduce using rule 38 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    LPAREN          reduce using rule 38 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    ADDRESS         reduce using rule 38 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    TIMES           reduce using rule 38 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    PLUS            reduce using rule 38 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    UMINUS          reduce using rule 38 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    NOT             reduce using rule 38 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    ID              reduce using rule 38 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    STRING          reduce using rule 38 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    INT_CONST       reduce using rule 38 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    FLOAT_CONST     reduce using rule 38 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    CHAR_CONST      reduce using rule 38 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)
    ELSE            reduce using rule 38 (iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement .)


state 224

    (35) iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .

    RBRACE          reduce using rule 35 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    LBRACE          reduce using rule 35 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    IF              reduce using rule 35 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    WHILE           reduce using rule 35 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    FOR             reduce using rule 35 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    BREAK           reduce using rule 35 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    RETURN          reduce using rule 35 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    ASSERT          reduce using rule 35 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    PRINT           reduce using rule 35 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    READ            reduce using rule 35 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    INCREASE        reduce using rule 35 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    DECREASE        reduce using rule 35 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    LPAREN          reduce using rule 35 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    ADDRESS         reduce using rule 35 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    TIMES           reduce using rule 35 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    PLUS            reduce using rule 35 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    UMINUS          reduce using rule 35 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    NOT             reduce using rule 35 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    ID              reduce using rule 35 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    STRING          reduce using rule 35 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    INT_CONST       reduce using rule 35 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 35 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    CHAR_CONST      reduce using rule 35 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)
    ELSE            reduce using rule 35 (iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement .)


state 225

    (33) iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN . statement
    (52) statement -> . expression_statement
    (53) statement -> . compound_statement
    (54) statement -> . selection_statement
    (55) statement -> . iteration_statement
    (56) statement -> . jump_statement
    (57) statement -> . assert_statement
    (58) statement -> . print_statement
    (59) statement -> . read_statement
    (25) expression_statement -> . expression
    (26) expression_statement -> . empty
    (24) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN statement
    (30) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (31) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (32) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (33) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (34) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (35) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (36) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (37) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (38) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (39) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (40) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (41) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (42) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (43) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (44) jump_statement -> . BREAK SEMI
    (45) jump_statement -> . RETURN expression SEMI
    (46) jump_statement -> . RETURN SEMI
    (47) assert_statement -> . ASSERT expression SEMI
    (48) assert_statement -> . ASSERT SEMI
    (49) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (50) print_statement -> . PRINT LPAREN RPAREN SEMI
    (51) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (125) empty -> .
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for INCREASE resolved as shift
  ! shift/reduce conflict for DECREASE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ADDRESS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for CHAR_CONST resolved as shift
    LBRACE          shift and go to state 34
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    RETURN          shift and go to state 127
    ASSERT          shift and go to state 128
    PRINT           shift and go to state 129
    READ            shift and go to state 130
    ELSE            reduce using rule 125 (empty -> .)
    RBRACE          reduce using rule 125 (empty -> .)
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

  ! LBRACE          [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! BREAK           [ reduce using rule 125 (empty -> .) ]
  ! RETURN          [ reduce using rule 125 (empty -> .) ]
  ! ASSERT          [ reduce using rule 125 (empty -> .) ]
  ! PRINT           [ reduce using rule 125 (empty -> .) ]
  ! READ            [ reduce using rule 125 (empty -> .) ]
  ! INCREASE        [ reduce using rule 125 (empty -> .) ]
  ! DECREASE        [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ADDRESS         [ reduce using rule 125 (empty -> .) ]
  ! TIMES           [ reduce using rule 125 (empty -> .) ]
  ! PLUS            [ reduce using rule 125 (empty -> .) ]
  ! UMINUS          [ reduce using rule 125 (empty -> .) ]
  ! NOT             [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]
  ! STRING          [ reduce using rule 125 (empty -> .) ]
  ! INT_CONST       [ reduce using rule 125 (empty -> .) ]
  ! FLOAT_CONST     [ reduce using rule 125 (empty -> .) ]
  ! CHAR_CONST      [ reduce using rule 125 (empty -> .) ]

    expression                     shift and go to state 121
    statement                      shift and go to state 233
    expression_statement           shift and go to state 113
    compound_statement             shift and go to state 114
    selection_statement            shift and go to state 115
    iteration_statement            shift and go to state 116
    jump_statement                 shift and go to state 117
    assert_statement               shift and go to state 118
    print_statement                shift and go to state 119
    read_statement                 shift and go to state 120
    empty                          shift and go to state 122
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 226

    (37) iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .

    RBRACE          reduce using rule 37 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    LBRACE          reduce using rule 37 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    IF              reduce using rule 37 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    WHILE           reduce using rule 37 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    FOR             reduce using rule 37 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    BREAK           reduce using rule 37 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    RETURN          reduce using rule 37 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    ASSERT          reduce using rule 37 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    PRINT           reduce using rule 37 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    READ            reduce using rule 37 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    INCREASE        reduce using rule 37 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    DECREASE        reduce using rule 37 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    LPAREN          reduce using rule 37 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    ADDRESS         reduce using rule 37 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    TIMES           reduce using rule 37 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    PLUS            reduce using rule 37 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    UMINUS          reduce using rule 37 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    NOT             reduce using rule 37 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    ID              reduce using rule 37 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    STRING          reduce using rule 37 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    INT_CONST       reduce using rule 37 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    FLOAT_CONST     reduce using rule 37 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    CHAR_CONST      reduce using rule 37 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)
    ELSE            reduce using rule 37 (iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement .)


state 227

    (40) iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN . statement
    (52) statement -> . expression_statement
    (53) statement -> . compound_statement
    (54) statement -> . selection_statement
    (55) statement -> . iteration_statement
    (56) statement -> . jump_statement
    (57) statement -> . assert_statement
    (58) statement -> . print_statement
    (59) statement -> . read_statement
    (25) expression_statement -> . expression
    (26) expression_statement -> . empty
    (24) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN statement
    (30) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (31) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (32) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (33) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (34) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (35) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (36) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (37) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (38) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (39) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (40) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (41) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (42) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (43) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (44) jump_statement -> . BREAK SEMI
    (45) jump_statement -> . RETURN expression SEMI
    (46) jump_statement -> . RETURN SEMI
    (47) assert_statement -> . ASSERT expression SEMI
    (48) assert_statement -> . ASSERT SEMI
    (49) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (50) print_statement -> . PRINT LPAREN RPAREN SEMI
    (51) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (125) empty -> .
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for INCREASE resolved as shift
  ! shift/reduce conflict for DECREASE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ADDRESS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for CHAR_CONST resolved as shift
    LBRACE          shift and go to state 34
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    RETURN          shift and go to state 127
    ASSERT          shift and go to state 128
    PRINT           shift and go to state 129
    READ            shift and go to state 130
    ELSE            reduce using rule 125 (empty -> .)
    RBRACE          reduce using rule 125 (empty -> .)
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

  ! LBRACE          [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! BREAK           [ reduce using rule 125 (empty -> .) ]
  ! RETURN          [ reduce using rule 125 (empty -> .) ]
  ! ASSERT          [ reduce using rule 125 (empty -> .) ]
  ! PRINT           [ reduce using rule 125 (empty -> .) ]
  ! READ            [ reduce using rule 125 (empty -> .) ]
  ! INCREASE        [ reduce using rule 125 (empty -> .) ]
  ! DECREASE        [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ADDRESS         [ reduce using rule 125 (empty -> .) ]
  ! TIMES           [ reduce using rule 125 (empty -> .) ]
  ! PLUS            [ reduce using rule 125 (empty -> .) ]
  ! UMINUS          [ reduce using rule 125 (empty -> .) ]
  ! NOT             [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]
  ! STRING          [ reduce using rule 125 (empty -> .) ]
  ! INT_CONST       [ reduce using rule 125 (empty -> .) ]
  ! FLOAT_CONST     [ reduce using rule 125 (empty -> .) ]
  ! CHAR_CONST      [ reduce using rule 125 (empty -> .) ]

    expression                     shift and go to state 121
    statement                      shift and go to state 234
    expression_statement           shift and go to state 113
    compound_statement             shift and go to state 114
    selection_statement            shift and go to state 115
    iteration_statement            shift and go to state 116
    jump_statement                 shift and go to state 117
    assert_statement               shift and go to state 118
    print_statement                shift and go to state 119
    read_statement                 shift and go to state 120
    empty                          shift and go to state 122
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 228

    (42) iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .

    RBRACE          reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    LBRACE          reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    IF              reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    WHILE           reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    FOR             reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    BREAK           reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    RETURN          reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    ASSERT          reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    PRINT           reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    READ            reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    INCREASE        reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    DECREASE        reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    LPAREN          reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    ADDRESS         reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    TIMES           reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    PLUS            reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    UMINUS          reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    NOT             reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    ID              reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    STRING          reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    INT_CONST       reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    FLOAT_CONST     reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    CHAR_CONST      reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)
    ELSE            reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression SEMI RPAREN statement .)


state 229

    (41) iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .

    RBRACE          reduce using rule 41 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    LBRACE          reduce using rule 41 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    IF              reduce using rule 41 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    WHILE           reduce using rule 41 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    FOR             reduce using rule 41 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    BREAK           reduce using rule 41 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    RETURN          reduce using rule 41 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    ASSERT          reduce using rule 41 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    PRINT           reduce using rule 41 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    READ            reduce using rule 41 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    INCREASE        reduce using rule 41 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    DECREASE        reduce using rule 41 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    LPAREN          reduce using rule 41 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    ADDRESS         reduce using rule 41 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    TIMES           reduce using rule 41 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    PLUS            reduce using rule 41 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    UMINUS          reduce using rule 41 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    NOT             reduce using rule 41 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    ID              reduce using rule 41 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    STRING          reduce using rule 41 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    INT_CONST       reduce using rule 41 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 41 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    CHAR_CONST      reduce using rule 41 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)
    ELSE            reduce using rule 41 (iteration_statement -> FOR LPAREN declaration SEMI expression RPAREN statement .)


state 230

    (32) iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN . statement
    (52) statement -> . expression_statement
    (53) statement -> . compound_statement
    (54) statement -> . selection_statement
    (55) statement -> . iteration_statement
    (56) statement -> . jump_statement
    (57) statement -> . assert_statement
    (58) statement -> . print_statement
    (59) statement -> . read_statement
    (25) expression_statement -> . expression
    (26) expression_statement -> . empty
    (24) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN statement
    (30) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (31) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (32) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (33) iteration_statement -> . FOR LPAREN SEMI expression SEMI expression RPAREN statement
    (34) iteration_statement -> . FOR LPAREN expression SEMI SEMI expression RPAREN statement
    (35) iteration_statement -> . FOR LPAREN SEMI SEMI expression RPAREN statement
    (36) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI RPAREN statement
    (37) iteration_statement -> . FOR LPAREN SEMI expression SEMI RPAREN statement
    (38) iteration_statement -> . FOR LPAREN expression SEMI SEMI RPAREN statement
    (39) iteration_statement -> . FOR LPAREN SEMI SEMI RPAREN statement
    (40) iteration_statement -> . FOR LPAREN declaration expression SEMI expression RPAREN statement
    (41) iteration_statement -> . FOR LPAREN declaration SEMI expression RPAREN statement
    (42) iteration_statement -> . FOR LPAREN declaration expression SEMI RPAREN statement
    (43) iteration_statement -> . FOR LPAREN declaration SEMI RPAREN statement
    (44) jump_statement -> . BREAK SEMI
    (45) jump_statement -> . RETURN expression SEMI
    (46) jump_statement -> . RETURN SEMI
    (47) assert_statement -> . ASSERT expression SEMI
    (48) assert_statement -> . ASSERT SEMI
    (49) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (50) print_statement -> . PRINT LPAREN RPAREN SEMI
    (51) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (27) expression -> . assignment_expression
    (28) expression -> . expression COMMA assignment_expression
    (125) empty -> .
    (62) assignment_expression -> . binary_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression PLUS binary_expression
    (66) binary_expression -> . binary_expression MINUS binary_expression
    (67) binary_expression -> . binary_expression TIMES binary_expression
    (68) binary_expression -> . binary_expression DIVIDE binary_expression
    (69) binary_expression -> . binary_expression MOD binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GE binary_expression
    (74) binary_expression -> . binary_expression EQ binary_expression
    (75) binary_expression -> . binary_expression NQ binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . INCREASE unary_expression
    (80) unary_expression -> . DECREASE unary_expression
    (81) unary_expression -> . unary_operator cast_expression
    (88) cast_expression -> . unary_expression
    (89) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (82) postfix_expression -> . primary_expression
    (83) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (84) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (85) postfix_expression -> . postfix_expression LPAREN RPAREN
    (86) postfix_expression -> . postfix_expression INCREASE
    (87) postfix_expression -> . postfix_expression DECREASE
    (103) unary_operator -> . ADDRESS
    (104) unary_operator -> . TIMES
    (105) unary_operator -> . PLUS
    (106) unary_operator -> . UMINUS
    (107) unary_operator -> . NOT
    (90) primary_expression -> . ID
    (91) primary_expression -> . constant
    (92) primary_expression -> . STRING
    (93) primary_expression -> . LPAREN expression RPAREN
    (108) constant -> . INT_CONST
    (109) constant -> . FLOAT_CONST
    (110) constant -> . CHAR_CONST

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ASSERT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for INCREASE resolved as shift
  ! shift/reduce conflict for DECREASE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ADDRESS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for CHAR_CONST resolved as shift
    LBRACE          shift and go to state 34
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    FOR             shift and go to state 125
    BREAK           shift and go to state 126
    RETURN          shift and go to state 127
    ASSERT          shift and go to state 128
    PRINT           shift and go to state 129
    READ            shift and go to state 130
    ELSE            reduce using rule 125 (empty -> .)
    RBRACE          reduce using rule 125 (empty -> .)
    INCREASE        shift and go to state 45
    DECREASE        shift and go to state 46
    LPAREN          shift and go to state 43
    ADDRESS         shift and go to state 49
    TIMES           shift and go to state 41
    PLUS            shift and go to state 40
    UMINUS          shift and go to state 50
    NOT             shift and go to state 51
    ID              shift and go to state 52
    STRING          shift and go to state 54
    INT_CONST       shift and go to state 55
    FLOAT_CONST     shift and go to state 56
    CHAR_CONST      shift and go to state 57

  ! LBRACE          [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! BREAK           [ reduce using rule 125 (empty -> .) ]
  ! RETURN          [ reduce using rule 125 (empty -> .) ]
  ! ASSERT          [ reduce using rule 125 (empty -> .) ]
  ! PRINT           [ reduce using rule 125 (empty -> .) ]
  ! READ            [ reduce using rule 125 (empty -> .) ]
  ! INCREASE        [ reduce using rule 125 (empty -> .) ]
  ! DECREASE        [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ADDRESS         [ reduce using rule 125 (empty -> .) ]
  ! TIMES           [ reduce using rule 125 (empty -> .) ]
  ! PLUS            [ reduce using rule 125 (empty -> .) ]
  ! UMINUS          [ reduce using rule 125 (empty -> .) ]
  ! NOT             [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]
  ! STRING          [ reduce using rule 125 (empty -> .) ]
  ! INT_CONST       [ reduce using rule 125 (empty -> .) ]
  ! FLOAT_CONST     [ reduce using rule 125 (empty -> .) ]
  ! CHAR_CONST      [ reduce using rule 125 (empty -> .) ]

    expression                     shift and go to state 121
    statement                      shift and go to state 235
    expression_statement           shift and go to state 113
    compound_statement             shift and go to state 114
    selection_statement            shift and go to state 115
    iteration_statement            shift and go to state 116
    jump_statement                 shift and go to state 117
    assert_statement               shift and go to state 118
    print_statement                shift and go to state 119
    read_statement                 shift and go to state 120
    empty                          shift and go to state 122
    assignment_expression          shift and go to state 88
    binary_expression              shift and go to state 68
    unary_expression               shift and go to state 69
    cast_expression                shift and go to state 39
    postfix_expression             shift and go to state 44
    unary_operator                 shift and go to state 47
    primary_expression             shift and go to state 48
    constant                       shift and go to state 53

state 231

    (36) iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .

    RBRACE          reduce using rule 36 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    LBRACE          reduce using rule 36 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    IF              reduce using rule 36 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    WHILE           reduce using rule 36 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    FOR             reduce using rule 36 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    BREAK           reduce using rule 36 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    RETURN          reduce using rule 36 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    ASSERT          reduce using rule 36 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    PRINT           reduce using rule 36 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    READ            reduce using rule 36 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    INCREASE        reduce using rule 36 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    DECREASE        reduce using rule 36 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    LPAREN          reduce using rule 36 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    ADDRESS         reduce using rule 36 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    TIMES           reduce using rule 36 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    PLUS            reduce using rule 36 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    UMINUS          reduce using rule 36 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    NOT             reduce using rule 36 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    ID              reduce using rule 36 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    STRING          reduce using rule 36 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    INT_CONST       reduce using rule 36 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    FLOAT_CONST     reduce using rule 36 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    CHAR_CONST      reduce using rule 36 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)
    ELSE            reduce using rule 36 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement .)


state 232

    (34) iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .

    RBRACE          reduce using rule 34 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    LBRACE          reduce using rule 34 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    IF              reduce using rule 34 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    WHILE           reduce using rule 34 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    FOR             reduce using rule 34 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    BREAK           reduce using rule 34 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    RETURN          reduce using rule 34 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    ASSERT          reduce using rule 34 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    PRINT           reduce using rule 34 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    READ            reduce using rule 34 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    INCREASE        reduce using rule 34 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    DECREASE        reduce using rule 34 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    LPAREN          reduce using rule 34 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    ADDRESS         reduce using rule 34 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    TIMES           reduce using rule 34 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    PLUS            reduce using rule 34 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    UMINUS          reduce using rule 34 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    NOT             reduce using rule 34 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    ID              reduce using rule 34 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    STRING          reduce using rule 34 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    INT_CONST       reduce using rule 34 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 34 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    CHAR_CONST      reduce using rule 34 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)
    ELSE            reduce using rule 34 (iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement .)


state 233

    (33) iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .

    RBRACE          reduce using rule 33 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    LBRACE          reduce using rule 33 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    IF              reduce using rule 33 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    WHILE           reduce using rule 33 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    FOR             reduce using rule 33 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    BREAK           reduce using rule 33 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    RETURN          reduce using rule 33 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    ASSERT          reduce using rule 33 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    PRINT           reduce using rule 33 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    READ            reduce using rule 33 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    INCREASE        reduce using rule 33 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    DECREASE        reduce using rule 33 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    LPAREN          reduce using rule 33 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    ADDRESS         reduce using rule 33 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    TIMES           reduce using rule 33 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    PLUS            reduce using rule 33 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    UMINUS          reduce using rule 33 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    NOT             reduce using rule 33 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    ID              reduce using rule 33 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    STRING          reduce using rule 33 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    INT_CONST       reduce using rule 33 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 33 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    CHAR_CONST      reduce using rule 33 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)
    ELSE            reduce using rule 33 (iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement .)


state 234

    (40) iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .

    RBRACE          reduce using rule 40 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    LBRACE          reduce using rule 40 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    IF              reduce using rule 40 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    WHILE           reduce using rule 40 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    FOR             reduce using rule 40 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    BREAK           reduce using rule 40 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    RETURN          reduce using rule 40 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    ASSERT          reduce using rule 40 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    PRINT           reduce using rule 40 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    READ            reduce using rule 40 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    INCREASE        reduce using rule 40 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    DECREASE        reduce using rule 40 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    LPAREN          reduce using rule 40 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    ADDRESS         reduce using rule 40 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    TIMES           reduce using rule 40 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    PLUS            reduce using rule 40 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    UMINUS          reduce using rule 40 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    NOT             reduce using rule 40 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    ID              reduce using rule 40 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    STRING          reduce using rule 40 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    INT_CONST       reduce using rule 40 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 40 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    CHAR_CONST      reduce using rule 40 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)
    ELSE            reduce using rule 40 (iteration_statement -> FOR LPAREN declaration expression SEMI expression RPAREN statement .)


state 235

    (32) iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .

    RBRACE          reduce using rule 32 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    LBRACE          reduce using rule 32 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    IF              reduce using rule 32 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    WHILE           reduce using rule 32 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    FOR             reduce using rule 32 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    BREAK           reduce using rule 32 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    RETURN          reduce using rule 32 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    ASSERT          reduce using rule 32 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    PRINT           reduce using rule 32 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    READ            reduce using rule 32 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    INCREASE        reduce using rule 32 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    DECREASE        reduce using rule 32 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    LPAREN          reduce using rule 32 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    ADDRESS         reduce using rule 32 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    TIMES           reduce using rule 32 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    PLUS            reduce using rule 32 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    UMINUS          reduce using rule 32 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    NOT             reduce using rule 32 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    ID              reduce using rule 32 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    STRING          reduce using rule 32 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    INT_CONST       reduce using rule 32 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 32 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    CHAR_CONST      reduce using rule 32 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    ELSE            reduce using rule 32 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 44 resolved as shift
WARNING: shift/reduce conflict for INCREASE in state 44 resolved as shift
WARNING: shift/reduce conflict for DECREASE in state 44 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 68 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 68 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 71 resolved as shift
WARNING: shift/reduce conflict for IF in state 71 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 71 resolved as shift
WARNING: shift/reduce conflict for FOR in state 71 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 71 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 71 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 71 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 71 resolved as shift
WARNING: shift/reduce conflict for READ in state 71 resolved as shift
WARNING: shift/reduce conflict for INCREASE in state 71 resolved as shift
WARNING: shift/reduce conflict for DECREASE in state 71 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 71 resolved as shift
WARNING: shift/reduce conflict for ADDRESS in state 71 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 71 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for NOT in state 71 resolved as shift
WARNING: shift/reduce conflict for ID in state 71 resolved as shift
WARNING: shift/reduce conflict for STRING in state 71 resolved as shift
WARNING: shift/reduce conflict for INT_CONST in state 71 resolved as shift
WARNING: shift/reduce conflict for FLOAT_CONST in state 71 resolved as shift
WARNING: shift/reduce conflict for CHAR_CONST in state 71 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 111 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 111 resolved as shift
WARNING: shift/reduce conflict for IF in state 111 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 111 resolved as shift
WARNING: shift/reduce conflict for FOR in state 111 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 111 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 111 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 111 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 111 resolved as shift
WARNING: shift/reduce conflict for READ in state 111 resolved as shift
WARNING: shift/reduce conflict for INCREASE in state 111 resolved as shift
WARNING: shift/reduce conflict for DECREASE in state 111 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 111 resolved as shift
WARNING: shift/reduce conflict for ADDRESS in state 111 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 111 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 111 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 111 resolved as shift
WARNING: shift/reduce conflict for NOT in state 111 resolved as shift
WARNING: shift/reduce conflict for ID in state 111 resolved as shift
WARNING: shift/reduce conflict for STRING in state 111 resolved as shift
WARNING: shift/reduce conflict for INT_CONST in state 111 resolved as shift
WARNING: shift/reduce conflict for FLOAT_CONST in state 111 resolved as shift
WARNING: shift/reduce conflict for CHAR_CONST in state 111 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 185 resolved as shift
WARNING: shift/reduce conflict for IF in state 185 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 185 resolved as shift
WARNING: shift/reduce conflict for FOR in state 185 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 185 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 185 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 185 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 185 resolved as shift
WARNING: shift/reduce conflict for READ in state 185 resolved as shift
WARNING: shift/reduce conflict for INCREASE in state 185 resolved as shift
WARNING: shift/reduce conflict for DECREASE in state 185 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 185 resolved as shift
WARNING: shift/reduce conflict for ADDRESS in state 185 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 185 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 185 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 185 resolved as shift
WARNING: shift/reduce conflict for NOT in state 185 resolved as shift
WARNING: shift/reduce conflict for ID in state 185 resolved as shift
WARNING: shift/reduce conflict for STRING in state 185 resolved as shift
WARNING: shift/reduce conflict for INT_CONST in state 185 resolved as shift
WARNING: shift/reduce conflict for FLOAT_CONST in state 185 resolved as shift
WARNING: shift/reduce conflict for CHAR_CONST in state 185 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 186 resolved as shift
WARNING: shift/reduce conflict for IF in state 186 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 186 resolved as shift
WARNING: shift/reduce conflict for FOR in state 186 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 186 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 186 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 186 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 186 resolved as shift
WARNING: shift/reduce conflict for READ in state 186 resolved as shift
WARNING: shift/reduce conflict for INCREASE in state 186 resolved as shift
WARNING: shift/reduce conflict for DECREASE in state 186 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 186 resolved as shift
WARNING: shift/reduce conflict for ADDRESS in state 186 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 186 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 186 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 186 resolved as shift
WARNING: shift/reduce conflict for NOT in state 186 resolved as shift
WARNING: shift/reduce conflict for ID in state 186 resolved as shift
WARNING: shift/reduce conflict for STRING in state 186 resolved as shift
WARNING: shift/reduce conflict for INT_CONST in state 186 resolved as shift
WARNING: shift/reduce conflict for FLOAT_CONST in state 186 resolved as shift
WARNING: shift/reduce conflict for CHAR_CONST in state 186 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 195 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 200 resolved as shift
WARNING: shift/reduce conflict for IF in state 200 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 200 resolved as shift
WARNING: shift/reduce conflict for FOR in state 200 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 200 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 200 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 200 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 200 resolved as shift
WARNING: shift/reduce conflict for READ in state 200 resolved as shift
WARNING: shift/reduce conflict for INCREASE in state 200 resolved as shift
WARNING: shift/reduce conflict for DECREASE in state 200 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 200 resolved as shift
WARNING: shift/reduce conflict for ADDRESS in state 200 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 200 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 200 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 200 resolved as shift
WARNING: shift/reduce conflict for NOT in state 200 resolved as shift
WARNING: shift/reduce conflict for ID in state 200 resolved as shift
WARNING: shift/reduce conflict for STRING in state 200 resolved as shift
WARNING: shift/reduce conflict for INT_CONST in state 200 resolved as shift
WARNING: shift/reduce conflict for FLOAT_CONST in state 200 resolved as shift
WARNING: shift/reduce conflict for CHAR_CONST in state 200 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 204 resolved as shift
WARNING: shift/reduce conflict for IF in state 204 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 204 resolved as shift
WARNING: shift/reduce conflict for FOR in state 204 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 204 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 204 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 204 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 204 resolved as shift
WARNING: shift/reduce conflict for READ in state 204 resolved as shift
WARNING: shift/reduce conflict for INCREASE in state 204 resolved as shift
WARNING: shift/reduce conflict for DECREASE in state 204 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 204 resolved as shift
WARNING: shift/reduce conflict for ADDRESS in state 204 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 204 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 204 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 204 resolved as shift
WARNING: shift/reduce conflict for NOT in state 204 resolved as shift
WARNING: shift/reduce conflict for ID in state 204 resolved as shift
WARNING: shift/reduce conflict for STRING in state 204 resolved as shift
WARNING: shift/reduce conflict for INT_CONST in state 204 resolved as shift
WARNING: shift/reduce conflict for FLOAT_CONST in state 204 resolved as shift
WARNING: shift/reduce conflict for CHAR_CONST in state 204 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 207 resolved as shift
WARNING: shift/reduce conflict for IF in state 207 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 207 resolved as shift
WARNING: shift/reduce conflict for FOR in state 207 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 207 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 207 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 207 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 207 resolved as shift
WARNING: shift/reduce conflict for READ in state 207 resolved as shift
WARNING: shift/reduce conflict for INCREASE in state 207 resolved as shift
WARNING: shift/reduce conflict for DECREASE in state 207 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 207 resolved as shift
WARNING: shift/reduce conflict for ADDRESS in state 207 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 207 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 207 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 207 resolved as shift
WARNING: shift/reduce conflict for NOT in state 207 resolved as shift
WARNING: shift/reduce conflict for ID in state 207 resolved as shift
WARNING: shift/reduce conflict for STRING in state 207 resolved as shift
WARNING: shift/reduce conflict for INT_CONST in state 207 resolved as shift
WARNING: shift/reduce conflict for FLOAT_CONST in state 207 resolved as shift
WARNING: shift/reduce conflict for CHAR_CONST in state 207 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 210 resolved as shift
WARNING: shift/reduce conflict for IF in state 210 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 210 resolved as shift
WARNING: shift/reduce conflict for FOR in state 210 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 210 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 210 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 210 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 210 resolved as shift
WARNING: shift/reduce conflict for READ in state 210 resolved as shift
WARNING: shift/reduce conflict for INCREASE in state 210 resolved as shift
WARNING: shift/reduce conflict for DECREASE in state 210 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 210 resolved as shift
WARNING: shift/reduce conflict for ADDRESS in state 210 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 210 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 210 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 210 resolved as shift
WARNING: shift/reduce conflict for NOT in state 210 resolved as shift
WARNING: shift/reduce conflict for ID in state 210 resolved as shift
WARNING: shift/reduce conflict for STRING in state 210 resolved as shift
WARNING: shift/reduce conflict for INT_CONST in state 210 resolved as shift
WARNING: shift/reduce conflict for FLOAT_CONST in state 210 resolved as shift
WARNING: shift/reduce conflict for CHAR_CONST in state 210 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 211 resolved as shift
WARNING: shift/reduce conflict for IF in state 211 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 211 resolved as shift
WARNING: shift/reduce conflict for FOR in state 211 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 211 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 211 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 211 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 211 resolved as shift
WARNING: shift/reduce conflict for READ in state 211 resolved as shift
WARNING: shift/reduce conflict for INCREASE in state 211 resolved as shift
WARNING: shift/reduce conflict for DECREASE in state 211 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 211 resolved as shift
WARNING: shift/reduce conflict for ADDRESS in state 211 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 211 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 211 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 211 resolved as shift
WARNING: shift/reduce conflict for NOT in state 211 resolved as shift
WARNING: shift/reduce conflict for ID in state 211 resolved as shift
WARNING: shift/reduce conflict for STRING in state 211 resolved as shift
WARNING: shift/reduce conflict for INT_CONST in state 211 resolved as shift
WARNING: shift/reduce conflict for FLOAT_CONST in state 211 resolved as shift
WARNING: shift/reduce conflict for CHAR_CONST in state 211 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 214 resolved as shift
WARNING: shift/reduce conflict for IF in state 214 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 214 resolved as shift
WARNING: shift/reduce conflict for FOR in state 214 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 214 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 214 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 214 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 214 resolved as shift
WARNING: shift/reduce conflict for READ in state 214 resolved as shift
WARNING: shift/reduce conflict for INCREASE in state 214 resolved as shift
WARNING: shift/reduce conflict for DECREASE in state 214 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 214 resolved as shift
WARNING: shift/reduce conflict for ADDRESS in state 214 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 214 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 214 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 214 resolved as shift
WARNING: shift/reduce conflict for NOT in state 214 resolved as shift
WARNING: shift/reduce conflict for ID in state 214 resolved as shift
WARNING: shift/reduce conflict for STRING in state 214 resolved as shift
WARNING: shift/reduce conflict for INT_CONST in state 214 resolved as shift
WARNING: shift/reduce conflict for FLOAT_CONST in state 214 resolved as shift
WARNING: shift/reduce conflict for CHAR_CONST in state 214 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 216 resolved as shift
WARNING: shift/reduce conflict for IF in state 216 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 216 resolved as shift
WARNING: shift/reduce conflict for FOR in state 216 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 216 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 216 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 216 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 216 resolved as shift
WARNING: shift/reduce conflict for READ in state 216 resolved as shift
WARNING: shift/reduce conflict for INCREASE in state 216 resolved as shift
WARNING: shift/reduce conflict for DECREASE in state 216 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 216 resolved as shift
WARNING: shift/reduce conflict for ADDRESS in state 216 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 216 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 216 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 216 resolved as shift
WARNING: shift/reduce conflict for NOT in state 216 resolved as shift
WARNING: shift/reduce conflict for ID in state 216 resolved as shift
WARNING: shift/reduce conflict for STRING in state 216 resolved as shift
WARNING: shift/reduce conflict for INT_CONST in state 216 resolved as shift
WARNING: shift/reduce conflict for FLOAT_CONST in state 216 resolved as shift
WARNING: shift/reduce conflict for CHAR_CONST in state 216 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 217 resolved as shift
WARNING: shift/reduce conflict for IF in state 217 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 217 resolved as shift
WARNING: shift/reduce conflict for FOR in state 217 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 217 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 217 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 217 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 217 resolved as shift
WARNING: shift/reduce conflict for READ in state 217 resolved as shift
WARNING: shift/reduce conflict for INCREASE in state 217 resolved as shift
WARNING: shift/reduce conflict for DECREASE in state 217 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 217 resolved as shift
WARNING: shift/reduce conflict for ADDRESS in state 217 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 217 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 217 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 217 resolved as shift
WARNING: shift/reduce conflict for NOT in state 217 resolved as shift
WARNING: shift/reduce conflict for ID in state 217 resolved as shift
WARNING: shift/reduce conflict for STRING in state 217 resolved as shift
WARNING: shift/reduce conflict for INT_CONST in state 217 resolved as shift
WARNING: shift/reduce conflict for FLOAT_CONST in state 217 resolved as shift
WARNING: shift/reduce conflict for CHAR_CONST in state 217 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 221 resolved as shift
WARNING: shift/reduce conflict for IF in state 221 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 221 resolved as shift
WARNING: shift/reduce conflict for FOR in state 221 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 221 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 221 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 221 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 221 resolved as shift
WARNING: shift/reduce conflict for READ in state 221 resolved as shift
WARNING: shift/reduce conflict for INCREASE in state 221 resolved as shift
WARNING: shift/reduce conflict for DECREASE in state 221 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 221 resolved as shift
WARNING: shift/reduce conflict for ADDRESS in state 221 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 221 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 221 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 221 resolved as shift
WARNING: shift/reduce conflict for NOT in state 221 resolved as shift
WARNING: shift/reduce conflict for ID in state 221 resolved as shift
WARNING: shift/reduce conflict for STRING in state 221 resolved as shift
WARNING: shift/reduce conflict for INT_CONST in state 221 resolved as shift
WARNING: shift/reduce conflict for FLOAT_CONST in state 221 resolved as shift
WARNING: shift/reduce conflict for CHAR_CONST in state 221 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 222 resolved as shift
WARNING: shift/reduce conflict for IF in state 222 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 222 resolved as shift
WARNING: shift/reduce conflict for FOR in state 222 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 222 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 222 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 222 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 222 resolved as shift
WARNING: shift/reduce conflict for READ in state 222 resolved as shift
WARNING: shift/reduce conflict for INCREASE in state 222 resolved as shift
WARNING: shift/reduce conflict for DECREASE in state 222 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 222 resolved as shift
WARNING: shift/reduce conflict for ADDRESS in state 222 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 222 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 222 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 222 resolved as shift
WARNING: shift/reduce conflict for NOT in state 222 resolved as shift
WARNING: shift/reduce conflict for ID in state 222 resolved as shift
WARNING: shift/reduce conflict for STRING in state 222 resolved as shift
WARNING: shift/reduce conflict for INT_CONST in state 222 resolved as shift
WARNING: shift/reduce conflict for FLOAT_CONST in state 222 resolved as shift
WARNING: shift/reduce conflict for CHAR_CONST in state 222 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 225 resolved as shift
WARNING: shift/reduce conflict for IF in state 225 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 225 resolved as shift
WARNING: shift/reduce conflict for FOR in state 225 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 225 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 225 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 225 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 225 resolved as shift
WARNING: shift/reduce conflict for READ in state 225 resolved as shift
WARNING: shift/reduce conflict for INCREASE in state 225 resolved as shift
WARNING: shift/reduce conflict for DECREASE in state 225 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 225 resolved as shift
WARNING: shift/reduce conflict for ADDRESS in state 225 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 225 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 225 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 225 resolved as shift
WARNING: shift/reduce conflict for NOT in state 225 resolved as shift
WARNING: shift/reduce conflict for ID in state 225 resolved as shift
WARNING: shift/reduce conflict for STRING in state 225 resolved as shift
WARNING: shift/reduce conflict for INT_CONST in state 225 resolved as shift
WARNING: shift/reduce conflict for FLOAT_CONST in state 225 resolved as shift
WARNING: shift/reduce conflict for CHAR_CONST in state 225 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 227 resolved as shift
WARNING: shift/reduce conflict for IF in state 227 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 227 resolved as shift
WARNING: shift/reduce conflict for FOR in state 227 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 227 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 227 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 227 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 227 resolved as shift
WARNING: shift/reduce conflict for READ in state 227 resolved as shift
WARNING: shift/reduce conflict for INCREASE in state 227 resolved as shift
WARNING: shift/reduce conflict for DECREASE in state 227 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 227 resolved as shift
WARNING: shift/reduce conflict for ADDRESS in state 227 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 227 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 227 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 227 resolved as shift
WARNING: shift/reduce conflict for NOT in state 227 resolved as shift
WARNING: shift/reduce conflict for ID in state 227 resolved as shift
WARNING: shift/reduce conflict for STRING in state 227 resolved as shift
WARNING: shift/reduce conflict for INT_CONST in state 227 resolved as shift
WARNING: shift/reduce conflict for FLOAT_CONST in state 227 resolved as shift
WARNING: shift/reduce conflict for CHAR_CONST in state 227 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 230 resolved as shift
WARNING: shift/reduce conflict for IF in state 230 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 230 resolved as shift
WARNING: shift/reduce conflict for FOR in state 230 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 230 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 230 resolved as shift
WARNING: shift/reduce conflict for ASSERT in state 230 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 230 resolved as shift
WARNING: shift/reduce conflict for READ in state 230 resolved as shift
WARNING: shift/reduce conflict for INCREASE in state 230 resolved as shift
WARNING: shift/reduce conflict for DECREASE in state 230 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 230 resolved as shift
WARNING: shift/reduce conflict for ADDRESS in state 230 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 230 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 230 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 230 resolved as shift
WARNING: shift/reduce conflict for NOT in state 230 resolved as shift
WARNING: shift/reduce conflict for ID in state 230 resolved as shift
WARNING: shift/reduce conflict for STRING in state 230 resolved as shift
WARNING: shift/reduce conflict for INT_CONST in state 230 resolved as shift
WARNING: shift/reduce conflict for FLOAT_CONST in state 230 resolved as shift
WARNING: shift/reduce conflict for CHAR_CONST in state 230 resolved as shift
