Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> global_declaration_list
Rule 2     global_declaration_list -> global_declaration_list global_declaration
Rule 3     global_declaration_list -> empty
Rule 4     global_declaration -> function_definition
Rule 5     global_declaration -> declaration
Rule 6     function_definition -> type_specifier declarator declaration_list_opt compound_statement
Rule 7     function_definition -> declarator declaration_list_opt compound_statement
Rule 8     init_declarator_list_opt -> init_declarator_list
Rule 9     init_declarator_list_opt -> empty
Rule 10    init_declarator_list -> init_declarator
Rule 11    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 12    init_declarator -> declarator
Rule 13    init_declarator -> declarator EQUALS initializer
Rule 14    initializer -> assignment_expression
Rule 15    initializer -> LBRACE initializer_list RBRACE
Rule 16    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 17    initializer_list -> initializer
Rule 18    initializer_list -> initializer_list COMMA initializer
Rule 19    declaration -> type_specifier init_declarator_list_opt SEMI
Rule 20    declaration_list_opt -> declaration_list_opt declaration
Rule 21    declaration_list_opt -> empty
Rule 22    declarator -> pointer_opt direct_declarator
Rule 23    parameter_list -> parameter_declaration
Rule 24    parameter_list -> parameter_list COMMA parameter_declaration
Rule 25    parameter_declaration -> type_specifier declarator
Rule 26    compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE
Rule 27    expression_statement -> expression_opt SEMI
Rule 28    expression_opt -> expression
Rule 29    expression_opt -> empty
Rule 30    expression -> assignment_expression
Rule 31    expression -> expression COMMA assignment_expression
Rule 32    selection_statement -> IF LPAREN expression RPAREN statement
Rule 33    selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 34    iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 35    iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
Rule 36    iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
Rule 37    jump_statement -> BREAK SEMI
Rule 38    jump_statement -> RETURN expression SEMI
Rule 39    jump_statement -> RETURN SEMI
Rule 40    assert_statement -> ASSERT expression SEMI
Rule 41    print_statement -> PRINT LPAREN expression_opt RPAREN SEMI
Rule 42    read_statement -> READ LPAREN argument_expression RPAREN SEMI
Rule 43    statement -> expression_statement
Rule 44    statement -> compound_statement
Rule 45    statement -> selection_statement
Rule 46    statement -> iteration_statement
Rule 47    statement -> jump_statement
Rule 48    statement -> assert_statement
Rule 49    statement -> print_statement
Rule 50    statement -> read_statement
Rule 51    statement_list_opt -> statement_list_opt statement
Rule 52    statement_list_opt -> empty
Rule 53    assignment_expression -> binary_expression
Rule 54    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 55    binary_expression -> cast_expression
Rule 56    binary_expression -> binary_expression TIMES binary_expression
Rule 57    binary_expression -> binary_expression DIVIDE binary_expression
Rule 58    binary_expression -> binary_expression MOD binary_expression
Rule 59    binary_expression -> binary_expression PLUS binary_expression
Rule 60    binary_expression -> binary_expression MINUS binary_expression
Rule 61    binary_expression -> binary_expression LT binary_expression
Rule 62    binary_expression -> binary_expression LE binary_expression
Rule 63    binary_expression -> binary_expression GT binary_expression
Rule 64    binary_expression -> binary_expression GE binary_expression
Rule 65    binary_expression -> binary_expression EQ binary_expression
Rule 66    binary_expression -> binary_expression NQ binary_expression
Rule 67    binary_expression -> binary_expression AND binary_expression
Rule 68    binary_expression -> binary_expression OR binary_expression
Rule 69    unary_expression -> postfix_expression
Rule 70    unary_expression -> INCREASE unary_expression
Rule 71    unary_expression -> DECREASE unary_expression
Rule 72    unary_expression -> unary_operator cast_expression
Rule 73    postfix_expression -> primary_expression
Rule 74    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 75    postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN
Rule 76    postfix_expression -> postfix_expression INCREASE
Rule 77    postfix_expression -> postfix_expression DECREASE
Rule 78    cast_expression -> unary_expression
Rule 79    cast_expression -> LPAREN type_specifier RPAREN cast_expression
Rule 80    primary_expression -> ID
Rule 81    primary_expression -> constant
Rule 82    primary_expression -> STRING
Rule 83    primary_expression -> LPAREN expression RPAREN
Rule 84    argument_expression_opt -> argument_expression
Rule 85    argument_expression_opt -> empty
Rule 86    argument_expression -> assignment_expression
Rule 87    argument_expression -> argument_expression COMMA assignment_expression
Rule 88    constant_expression_opt -> constant_expression
Rule 89    constant_expression_opt -> empty
Rule 90    constant_expression -> binary_expression
Rule 91    assignment_operator -> EQUALS
Rule 92    assignment_operator -> EQTIMES
Rule 93    assignment_operator -> EQDIV
Rule 94    assignment_operator -> EQMOD
Rule 95    assignment_operator -> EQPLUS
Rule 96    assignment_operator -> EQMINUS
Rule 97    unary_operator -> ADDRESS
Rule 98    unary_operator -> TIMES
Rule 99    unary_operator -> PLUS
Rule 100   unary_operator -> UMINUS
Rule 101   unary_operator -> NOT
Rule 102   constant -> INT_CONST
Rule 103   constant -> FLOAT_CONST
Rule 104   constant -> CHAR_CONST
Rule 105   pointer_opt -> pointer
Rule 106   pointer_opt -> empty
Rule 107   pointer -> TIMES pointer
Rule 108   pointer -> TIMES
Rule 109   direct_declarator -> ID
Rule 110   direct_declarator -> LPAREN declarator RPAREN
Rule 111   direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET
Rule 112   direct_declarator -> direct_declarator LPAREN parameter_list RPAREN
Rule 113   direct_declarator -> direct_declarator LPAREN id_list RPAREN
Rule 114   id_list -> id_list ID
Rule 115   id_list -> empty
Rule 116   type_specifier -> VOID
Rule 117   type_specifier -> INT
Rule 118   type_specifier -> FLOAT
Rule 119   type_specifier -> CHAR
Rule 120   empty -> <empty>

Terminals, with rules where they appear

ADDRESS              : 97
AND                  : 67
ASSERT               : 40
BREAK                : 37
CHAR                 : 119
CHAR_CONST           : 104
COMMA                : 11 16 18 24 31 87
DECREASE             : 71 77
DIVIDE               : 57
ELSE                 : 33
EQ                   : 65
EQDIV                : 93
EQMINUS              : 96
EQMOD                : 94
EQPLUS               : 95
EQTIMES              : 92
EQUALS               : 13 91
FLOAT                : 118
FLOAT_CONST          : 103
FOR                  : 35 36
GE                   : 64
GT                   : 63
ID                   : 80 109 114
IF                   : 32 33
INCREASE             : 70 76
INT                  : 117
INT_CONST            : 102
LBRACE               : 15 16 26
LBRACKET             : 74 111
LE                   : 62
LPAREN               : 32 33 34 35 36 41 42 75 79 83 110 112 113
LT                   : 61
MINUS                : 60
MOD                  : 58
NOT                  : 101
NQ                   : 66
OR                   : 68
PLUS                 : 59 99
PRINT                : 41
RBRACE               : 15 16 26
RBRACKET             : 74 111
READ                 : 42
RETURN               : 38 39
RPAREN               : 32 33 34 35 36 41 42 75 79 83 110 112 113
SEMI                 : 19 27 35 35 36 36 37 38 39 40 41 42
STRING               : 82
TIMES                : 56 98 107 108
UMINUS               : 100
VOID                 : 116
WHILE                : 34
error                : 

Nonterminals, with rules where they appear

argument_expression  : 42 84 87
argument_expression_opt : 75
assert_statement     : 48
assignment_expression : 14 30 31 54 86 87
assignment_operator  : 54
binary_expression    : 53 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 90
cast_expression      : 55 72 79
compound_statement   : 6 7 44
constant             : 81
constant_expression  : 88
constant_expression_opt : 111
declaration          : 5 20
declaration_list_opt : 6 7 20 26
declarator           : 6 7 12 13 25 110
direct_declarator    : 22 111 112 113
empty                : 3 9 21 29 52 85 89 106 115
expression           : 28 31 32 33 34 38 40 74 83
expression_opt       : 27 35 35 36 36 41
expression_statement : 43
function_definition  : 4
global_declaration   : 2
global_declaration_list : 1 2
id_list              : 113 114
init_declarator      : 10 11 35 36
init_declarator_list : 8 11
init_declarator_list_opt : 19
initializer          : 13 17 18
initializer_list     : 15 16 18
iteration_statement  : 46
jump_statement       : 47
parameter_declaration : 23 24
parameter_list       : 24 112
pointer              : 105 107
pointer_opt          : 22
postfix_expression   : 69 74 75 76 77
primary_expression   : 73
print_statement      : 49
program              : 0
read_statement       : 50
selection_statement  : 45
statement            : 32 33 33 34 35 36 51
statement_list_opt   : 26 51
type_specifier       : 6 19 25 36 79
unary_expression     : 54 70 71 78
unary_operator       : 72

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . global_declaration_list
    (2) global_declaration_list -> . global_declaration_list global_declaration
    (3) global_declaration_list -> . empty
    (120) empty -> .

    VOID            reduce using rule 120 (empty -> .)
    INT             reduce using rule 120 (empty -> .)
    FLOAT           reduce using rule 120 (empty -> .)
    CHAR            reduce using rule 120 (empty -> .)
    TIMES           reduce using rule 120 (empty -> .)
    ID              reduce using rule 120 (empty -> .)
    LPAREN          reduce using rule 120 (empty -> .)
    $end            reduce using rule 120 (empty -> .)

    program                        shift and go to state 1
    global_declaration_list        shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> global_declaration_list .
    (2) global_declaration_list -> global_declaration_list . global_declaration
    (4) global_declaration -> . function_definition
    (5) global_declaration -> . declaration
    (6) function_definition -> . type_specifier declarator declaration_list_opt compound_statement
    (7) function_definition -> . declarator declaration_list_opt compound_statement
    (19) declaration -> . type_specifier init_declarator_list_opt SEMI
    (116) type_specifier -> . VOID
    (117) type_specifier -> . INT
    (118) type_specifier -> . FLOAT
    (119) type_specifier -> . CHAR
    (22) declarator -> . pointer_opt direct_declarator
    (105) pointer_opt -> . pointer
    (106) pointer_opt -> . empty
    (107) pointer -> . TIMES pointer
    (108) pointer -> . TIMES
    (120) empty -> .

    $end            reduce using rule 1 (program -> global_declaration_list .)
    VOID            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    TIMES           shift and go to state 16
    ID              reduce using rule 120 (empty -> .)
    LPAREN          reduce using rule 120 (empty -> .)

    global_declaration             shift and go to state 4
    function_definition            shift and go to state 5
    declaration                    shift and go to state 6
    type_specifier                 shift and go to state 7
    declarator                     shift and go to state 8
    pointer_opt                    shift and go to state 13
    pointer                        shift and go to state 14
    empty                          shift and go to state 15

state 3

    (3) global_declaration_list -> empty .

    VOID            reduce using rule 3 (global_declaration_list -> empty .)
    INT             reduce using rule 3 (global_declaration_list -> empty .)
    FLOAT           reduce using rule 3 (global_declaration_list -> empty .)
    CHAR            reduce using rule 3 (global_declaration_list -> empty .)
    TIMES           reduce using rule 3 (global_declaration_list -> empty .)
    ID              reduce using rule 3 (global_declaration_list -> empty .)
    LPAREN          reduce using rule 3 (global_declaration_list -> empty .)
    $end            reduce using rule 3 (global_declaration_list -> empty .)


state 4

    (2) global_declaration_list -> global_declaration_list global_declaration .

    VOID            reduce using rule 2 (global_declaration_list -> global_declaration_list global_declaration .)
    INT             reduce using rule 2 (global_declaration_list -> global_declaration_list global_declaration .)
    FLOAT           reduce using rule 2 (global_declaration_list -> global_declaration_list global_declaration .)
    CHAR            reduce using rule 2 (global_declaration_list -> global_declaration_list global_declaration .)
    TIMES           reduce using rule 2 (global_declaration_list -> global_declaration_list global_declaration .)
    ID              reduce using rule 2 (global_declaration_list -> global_declaration_list global_declaration .)
    LPAREN          reduce using rule 2 (global_declaration_list -> global_declaration_list global_declaration .)
    $end            reduce using rule 2 (global_declaration_list -> global_declaration_list global_declaration .)


state 5

    (4) global_declaration -> function_definition .

    VOID            reduce using rule 4 (global_declaration -> function_definition .)
    INT             reduce using rule 4 (global_declaration -> function_definition .)
    FLOAT           reduce using rule 4 (global_declaration -> function_definition .)
    CHAR            reduce using rule 4 (global_declaration -> function_definition .)
    TIMES           reduce using rule 4 (global_declaration -> function_definition .)
    ID              reduce using rule 4 (global_declaration -> function_definition .)
    LPAREN          reduce using rule 4 (global_declaration -> function_definition .)
    $end            reduce using rule 4 (global_declaration -> function_definition .)


state 6

    (5) global_declaration -> declaration .

    VOID            reduce using rule 5 (global_declaration -> declaration .)
    INT             reduce using rule 5 (global_declaration -> declaration .)
    FLOAT           reduce using rule 5 (global_declaration -> declaration .)
    CHAR            reduce using rule 5 (global_declaration -> declaration .)
    TIMES           reduce using rule 5 (global_declaration -> declaration .)
    ID              reduce using rule 5 (global_declaration -> declaration .)
    LPAREN          reduce using rule 5 (global_declaration -> declaration .)
    $end            reduce using rule 5 (global_declaration -> declaration .)


state 7

    (6) function_definition -> type_specifier . declarator declaration_list_opt compound_statement
    (19) declaration -> type_specifier . init_declarator_list_opt SEMI
    (22) declarator -> . pointer_opt direct_declarator
    (8) init_declarator_list_opt -> . init_declarator_list
    (9) init_declarator_list_opt -> . empty
    (105) pointer_opt -> . pointer
    (106) pointer_opt -> . empty
    (10) init_declarator_list -> . init_declarator
    (11) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (120) empty -> .
    (107) pointer -> . TIMES pointer
    (108) pointer -> . TIMES
    (12) init_declarator -> . declarator
    (13) init_declarator -> . declarator EQUALS initializer

    SEMI            reduce using rule 120 (empty -> .)
    ID              reduce using rule 120 (empty -> .)
    LPAREN          reduce using rule 120 (empty -> .)
    TIMES           shift and go to state 16

    declarator                     shift and go to state 17
    init_declarator_list_opt       shift and go to state 18
    pointer_opt                    shift and go to state 13
    init_declarator_list           shift and go to state 19
    empty                          shift and go to state 20
    pointer                        shift and go to state 14
    init_declarator                shift and go to state 21

state 8

    (7) function_definition -> declarator . declaration_list_opt compound_statement
    (20) declaration_list_opt -> . declaration_list_opt declaration
    (21) declaration_list_opt -> . empty
    (120) empty -> .

    LBRACE          reduce using rule 120 (empty -> .)
    VOID            reduce using rule 120 (empty -> .)
    INT             reduce using rule 120 (empty -> .)
    FLOAT           reduce using rule 120 (empty -> .)
    CHAR            reduce using rule 120 (empty -> .)

    declaration_list_opt           shift and go to state 22
    empty                          shift and go to state 23

state 9

    (116) type_specifier -> VOID .

    TIMES           reduce using rule 116 (type_specifier -> VOID .)
    SEMI            reduce using rule 116 (type_specifier -> VOID .)
    ID              reduce using rule 116 (type_specifier -> VOID .)
    LPAREN          reduce using rule 116 (type_specifier -> VOID .)
    RPAREN          reduce using rule 116 (type_specifier -> VOID .)


state 10

    (117) type_specifier -> INT .

    TIMES           reduce using rule 117 (type_specifier -> INT .)
    SEMI            reduce using rule 117 (type_specifier -> INT .)
    ID              reduce using rule 117 (type_specifier -> INT .)
    LPAREN          reduce using rule 117 (type_specifier -> INT .)
    RPAREN          reduce using rule 117 (type_specifier -> INT .)


state 11

    (118) type_specifier -> FLOAT .

    TIMES           reduce using rule 118 (type_specifier -> FLOAT .)
    SEMI            reduce using rule 118 (type_specifier -> FLOAT .)
    ID              reduce using rule 118 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 118 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 118 (type_specifier -> FLOAT .)


state 12

    (119) type_specifier -> CHAR .

    TIMES           reduce using rule 119 (type_specifier -> CHAR .)
    SEMI            reduce using rule 119 (type_specifier -> CHAR .)
    ID              reduce using rule 119 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 119 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 119 (type_specifier -> CHAR .)


state 13

    (22) declarator -> pointer_opt . direct_declarator
    (109) direct_declarator -> . ID
    (110) direct_declarator -> . LPAREN declarator RPAREN
    (111) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (112) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (113) direct_declarator -> . direct_declarator LPAREN id_list RPAREN

    ID              shift and go to state 25
    LPAREN          shift and go to state 26

    direct_declarator              shift and go to state 24

state 14

    (105) pointer_opt -> pointer .

    ID              reduce using rule 105 (pointer_opt -> pointer .)
    LPAREN          reduce using rule 105 (pointer_opt -> pointer .)


state 15

    (106) pointer_opt -> empty .

    ID              reduce using rule 106 (pointer_opt -> empty .)
    LPAREN          reduce using rule 106 (pointer_opt -> empty .)


state 16

    (107) pointer -> TIMES . pointer
    (108) pointer -> TIMES .
    (107) pointer -> . TIMES pointer
    (108) pointer -> . TIMES

    ID              reduce using rule 108 (pointer -> TIMES .)
    LPAREN          reduce using rule 108 (pointer -> TIMES .)
    TIMES           shift and go to state 16

    pointer                        shift and go to state 27

state 17

    (6) function_definition -> type_specifier declarator . declaration_list_opt compound_statement
    (12) init_declarator -> declarator .
    (13) init_declarator -> declarator . EQUALS initializer
    (20) declaration_list_opt -> . declaration_list_opt declaration
    (21) declaration_list_opt -> . empty
    (120) empty -> .

    COMMA           reduce using rule 12 (init_declarator -> declarator .)
    SEMI            reduce using rule 12 (init_declarator -> declarator .)
    EQUALS          shift and go to state 29
    LBRACE          reduce using rule 120 (empty -> .)
    VOID            reduce using rule 120 (empty -> .)
    INT             reduce using rule 120 (empty -> .)
    FLOAT           reduce using rule 120 (empty -> .)
    CHAR            reduce using rule 120 (empty -> .)

    declaration_list_opt           shift and go to state 28
    empty                          shift and go to state 23

state 18

    (19) declaration -> type_specifier init_declarator_list_opt . SEMI

    SEMI            shift and go to state 30


state 19

    (8) init_declarator_list_opt -> init_declarator_list .
    (11) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            reduce using rule 8 (init_declarator_list_opt -> init_declarator_list .)
    COMMA           shift and go to state 31


state 20

    (9) init_declarator_list_opt -> empty .
    (106) pointer_opt -> empty .

    SEMI            reduce using rule 9 (init_declarator_list_opt -> empty .)
    ID              reduce using rule 106 (pointer_opt -> empty .)
    LPAREN          reduce using rule 106 (pointer_opt -> empty .)


state 21

    (10) init_declarator_list -> init_declarator .

    COMMA           reduce using rule 10 (init_declarator_list -> init_declarator .)
    SEMI            reduce using rule 10 (init_declarator_list -> init_declarator .)


state 22

    (7) function_definition -> declarator declaration_list_opt . compound_statement
    (20) declaration_list_opt -> declaration_list_opt . declaration
    (26) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE
    (19) declaration -> . type_specifier init_declarator_list_opt SEMI
    (116) type_specifier -> . VOID
    (117) type_specifier -> . INT
    (118) type_specifier -> . FLOAT
    (119) type_specifier -> . CHAR

    LBRACE          shift and go to state 34
    VOID            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12

    compound_statement             shift and go to state 32
    declaration                    shift and go to state 33
    type_specifier                 shift and go to state 35

state 23

    (21) declaration_list_opt -> empty .

    LBRACE          reduce using rule 21 (declaration_list_opt -> empty .)
    VOID            reduce using rule 21 (declaration_list_opt -> empty .)
    INT             reduce using rule 21 (declaration_list_opt -> empty .)
    FLOAT           reduce using rule 21 (declaration_list_opt -> empty .)
    CHAR            reduce using rule 21 (declaration_list_opt -> empty .)
    RBRACE          reduce using rule 21 (declaration_list_opt -> empty .)
    IF              reduce using rule 21 (declaration_list_opt -> empty .)
    WHILE           reduce using rule 21 (declaration_list_opt -> empty .)
    FOR             reduce using rule 21 (declaration_list_opt -> empty .)
    BREAK           reduce using rule 21 (declaration_list_opt -> empty .)
    RETURN          reduce using rule 21 (declaration_list_opt -> empty .)
    ASSERT          reduce using rule 21 (declaration_list_opt -> empty .)
    PRINT           reduce using rule 21 (declaration_list_opt -> empty .)
    READ            reduce using rule 21 (declaration_list_opt -> empty .)
    INCREASE        reduce using rule 21 (declaration_list_opt -> empty .)
    DECREASE        reduce using rule 21 (declaration_list_opt -> empty .)
    LPAREN          reduce using rule 21 (declaration_list_opt -> empty .)
    ADDRESS         reduce using rule 21 (declaration_list_opt -> empty .)
    TIMES           reduce using rule 21 (declaration_list_opt -> empty .)
    PLUS            reduce using rule 21 (declaration_list_opt -> empty .)
    UMINUS          reduce using rule 21 (declaration_list_opt -> empty .)
    NOT             reduce using rule 21 (declaration_list_opt -> empty .)
    ID              reduce using rule 21 (declaration_list_opt -> empty .)
    STRING          reduce using rule 21 (declaration_list_opt -> empty .)
    INT_CONST       reduce using rule 21 (declaration_list_opt -> empty .)
    FLOAT_CONST     reduce using rule 21 (declaration_list_opt -> empty .)
    CHAR_CONST      reduce using rule 21 (declaration_list_opt -> empty .)
    SEMI            reduce using rule 21 (declaration_list_opt -> empty .)


state 24

    (22) declarator -> pointer_opt direct_declarator .
    (111) direct_declarator -> direct_declarator . LBRACKET constant_expression_opt RBRACKET
    (112) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (113) direct_declarator -> direct_declarator . LPAREN id_list RPAREN

    LBRACE          reduce using rule 22 (declarator -> pointer_opt direct_declarator .)
    VOID            reduce using rule 22 (declarator -> pointer_opt direct_declarator .)
    INT             reduce using rule 22 (declarator -> pointer_opt direct_declarator .)
    FLOAT           reduce using rule 22 (declarator -> pointer_opt direct_declarator .)
    CHAR            reduce using rule 22 (declarator -> pointer_opt direct_declarator .)
    EQUALS          reduce using rule 22 (declarator -> pointer_opt direct_declarator .)
    COMMA           reduce using rule 22 (declarator -> pointer_opt direct_declarator .)
    SEMI            reduce using rule 22 (declarator -> pointer_opt direct_declarator .)
    RPAREN          reduce using rule 22 (declarator -> pointer_opt direct_declarator .)
    LBRACKET        shift and go to state 36
    LPAREN          shift and go to state 37


state 25

    (109) direct_declarator -> ID .

    LBRACKET        reduce using rule 109 (direct_declarator -> ID .)
    LPAREN          reduce using rule 109 (direct_declarator -> ID .)
    LBRACE          reduce using rule 109 (direct_declarator -> ID .)
    VOID            reduce using rule 109 (direct_declarator -> ID .)
    INT             reduce using rule 109 (direct_declarator -> ID .)
    FLOAT           reduce using rule 109 (direct_declarator -> ID .)
    CHAR            reduce using rule 109 (direct_declarator -> ID .)
    EQUALS          reduce using rule 109 (direct_declarator -> ID .)
    COMMA           reduce using rule 109 (direct_declarator -> ID .)
    SEMI            reduce using rule 109 (direct_declarator -> ID .)
    RPAREN          reduce using rule 109 (direct_declarator -> ID .)


state 26

    (110) direct_declarator -> LPAREN . declarator RPAREN
    (22) declarator -> . pointer_opt direct_declarator
    (105) pointer_opt -> . pointer
    (106) pointer_opt -> . empty
    (107) pointer -> . TIMES pointer
    (108) pointer -> . TIMES
    (120) empty -> .

    TIMES           shift and go to state 16
    ID              reduce using rule 120 (empty -> .)
    LPAREN          reduce using rule 120 (empty -> .)

    declarator                     shift and go to state 38
    pointer_opt                    shift and go to state 13
    pointer                        shift and go to state 14
    empty                          shift and go to state 15

state 27

    (107) pointer -> TIMES pointer .

    ID              reduce using rule 107 (pointer -> TIMES pointer .)
    LPAREN          reduce using rule 107 (pointer -> TIMES pointer .)


state 28

    (6) function_definition -> type_specifier declarator declaration_list_opt . compound_statement
    (20) declaration_list_opt -> declaration_list_opt . declaration
    (26) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE
    (19) declaration -> . type_specifier init_declarator_list_opt SEMI
    (116) type_specifier -> . VOID
    (117) type_specifier -> . INT
    (118) type_specifier -> . FLOAT
    (119) type_specifier -> . CHAR

    LBRACE          shift and go to state 34
    VOID            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12

    type_specifier                 shift and go to state 35
    compound_statement             shift and go to state 39
    declaration                    shift and go to state 33

state 29

    (13) init_declarator -> declarator EQUALS . initializer
    (14) initializer -> . assignment_expression
    (15) initializer -> . LBRACE initializer_list RBRACE
    (16) initializer -> . LBRACE initializer_list COMMA RBRACE
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    LBRACE          shift and go to state 42
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    initializer                    shift and go to state 40
    assignment_expression          shift and go to state 41
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 30

    (19) declaration -> type_specifier init_declarator_list_opt SEMI .

    VOID            reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    INT             reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    FLOAT           reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    CHAR            reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    TIMES           reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    ID              reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    LPAREN          reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    $end            reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    LBRACE          reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    RBRACE          reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    IF              reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    WHILE           reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    FOR             reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    BREAK           reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    RETURN          reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    ASSERT          reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    PRINT           reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    READ            reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    INCREASE        reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    DECREASE        reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    ADDRESS         reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    PLUS            reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    UMINUS          reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    NOT             reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    STRING          reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    INT_CONST       reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    FLOAT_CONST     reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    CHAR_CONST      reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    SEMI            reduce using rule 19 (declaration -> type_specifier init_declarator_list_opt SEMI .)


state 31

    (11) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (12) init_declarator -> . declarator
    (13) init_declarator -> . declarator EQUALS initializer
    (22) declarator -> . pointer_opt direct_declarator
    (105) pointer_opt -> . pointer
    (106) pointer_opt -> . empty
    (107) pointer -> . TIMES pointer
    (108) pointer -> . TIMES
    (120) empty -> .

    TIMES           shift and go to state 16
    ID              reduce using rule 120 (empty -> .)
    LPAREN          reduce using rule 120 (empty -> .)

    init_declarator                shift and go to state 63
    declarator                     shift and go to state 64
    pointer_opt                    shift and go to state 13
    pointer                        shift and go to state 14
    empty                          shift and go to state 15

state 32

    (7) function_definition -> declarator declaration_list_opt compound_statement .

    VOID            reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    TIMES           reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)


state 33

    (20) declaration_list_opt -> declaration_list_opt declaration .

    LBRACE          reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    VOID            reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    INT             reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    FLOAT           reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    CHAR            reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    RBRACE          reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    IF              reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    WHILE           reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    FOR             reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    BREAK           reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    RETURN          reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    ASSERT          reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    PRINT           reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    READ            reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    INCREASE        reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    DECREASE        reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    LPAREN          reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    ADDRESS         reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    TIMES           reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    PLUS            reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    UMINUS          reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    NOT             reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    ID              reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    STRING          reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    INT_CONST       reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    FLOAT_CONST     reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    CHAR_CONST      reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)
    SEMI            reduce using rule 20 (declaration_list_opt -> declaration_list_opt declaration .)


state 34

    (26) compound_statement -> LBRACE . declaration_list_opt statement_list_opt RBRACE
    (20) declaration_list_opt -> . declaration_list_opt declaration
    (21) declaration_list_opt -> . empty
    (120) empty -> .

    VOID            reduce using rule 120 (empty -> .)
    INT             reduce using rule 120 (empty -> .)
    FLOAT           reduce using rule 120 (empty -> .)
    CHAR            reduce using rule 120 (empty -> .)
    RBRACE          reduce using rule 120 (empty -> .)
    LBRACE          reduce using rule 120 (empty -> .)
    IF              reduce using rule 120 (empty -> .)
    WHILE           reduce using rule 120 (empty -> .)
    FOR             reduce using rule 120 (empty -> .)
    BREAK           reduce using rule 120 (empty -> .)
    RETURN          reduce using rule 120 (empty -> .)
    ASSERT          reduce using rule 120 (empty -> .)
    PRINT           reduce using rule 120 (empty -> .)
    READ            reduce using rule 120 (empty -> .)
    INCREASE        reduce using rule 120 (empty -> .)
    DECREASE        reduce using rule 120 (empty -> .)
    LPAREN          reduce using rule 120 (empty -> .)
    ADDRESS         reduce using rule 120 (empty -> .)
    TIMES           reduce using rule 120 (empty -> .)
    PLUS            reduce using rule 120 (empty -> .)
    UMINUS          reduce using rule 120 (empty -> .)
    NOT             reduce using rule 120 (empty -> .)
    ID              reduce using rule 120 (empty -> .)
    STRING          reduce using rule 120 (empty -> .)
    INT_CONST       reduce using rule 120 (empty -> .)
    FLOAT_CONST     reduce using rule 120 (empty -> .)
    CHAR_CONST      reduce using rule 120 (empty -> .)
    SEMI            reduce using rule 120 (empty -> .)

    declaration_list_opt           shift and go to state 65
    empty                          shift and go to state 23

state 35

    (19) declaration -> type_specifier . init_declarator_list_opt SEMI
    (8) init_declarator_list_opt -> . init_declarator_list
    (9) init_declarator_list_opt -> . empty
    (10) init_declarator_list -> . init_declarator
    (11) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (120) empty -> .
    (12) init_declarator -> . declarator
    (13) init_declarator -> . declarator EQUALS initializer
    (22) declarator -> . pointer_opt direct_declarator
    (105) pointer_opt -> . pointer
    (106) pointer_opt -> . empty
    (107) pointer -> . TIMES pointer
    (108) pointer -> . TIMES

    SEMI            reduce using rule 120 (empty -> .)
    ID              reduce using rule 120 (empty -> .)
    LPAREN          reduce using rule 120 (empty -> .)
    TIMES           shift and go to state 16

    init_declarator_list_opt       shift and go to state 18
    init_declarator_list           shift and go to state 19
    empty                          shift and go to state 20
    init_declarator                shift and go to state 21
    declarator                     shift and go to state 64
    pointer_opt                    shift and go to state 13
    pointer                        shift and go to state 14

state 36

    (111) direct_declarator -> direct_declarator LBRACKET . constant_expression_opt RBRACKET
    (88) constant_expression_opt -> . constant_expression
    (89) constant_expression_opt -> . empty
    (90) constant_expression -> . binary_expression
    (120) empty -> .
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    RBRACKET        reduce using rule 120 (empty -> .)
    LPAREN          shift and go to state 52
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    constant_expression_opt        shift and go to state 66
    constant_expression            shift and go to state 67
    empty                          shift and go to state 68
    binary_expression              shift and go to state 69
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 37

    (112) direct_declarator -> direct_declarator LPAREN . parameter_list RPAREN
    (113) direct_declarator -> direct_declarator LPAREN . id_list RPAREN
    (23) parameter_list -> . parameter_declaration
    (24) parameter_list -> . parameter_list COMMA parameter_declaration
    (114) id_list -> . id_list ID
    (115) id_list -> . empty
    (25) parameter_declaration -> . type_specifier declarator
    (120) empty -> .
    (116) type_specifier -> . VOID
    (117) type_specifier -> . INT
    (118) type_specifier -> . FLOAT
    (119) type_specifier -> . CHAR

    RPAREN          reduce using rule 120 (empty -> .)
    ID              reduce using rule 120 (empty -> .)
    VOID            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12

    parameter_list                 shift and go to state 71
    id_list                        shift and go to state 72
    parameter_declaration          shift and go to state 73
    empty                          shift and go to state 74
    type_specifier                 shift and go to state 75

state 38

    (110) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 76


state 39

    (6) function_definition -> type_specifier declarator declaration_list_opt compound_statement .

    VOID            reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    TIMES           reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)


state 40

    (13) init_declarator -> declarator EQUALS initializer .

    COMMA           reduce using rule 13 (init_declarator -> declarator EQUALS initializer .)
    SEMI            reduce using rule 13 (init_declarator -> declarator EQUALS initializer .)


state 41

    (14) initializer -> assignment_expression .

    COMMA           reduce using rule 14 (initializer -> assignment_expression .)
    SEMI            reduce using rule 14 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 14 (initializer -> assignment_expression .)


state 42

    (15) initializer -> LBRACE . initializer_list RBRACE
    (16) initializer -> LBRACE . initializer_list COMMA RBRACE
    (17) initializer_list -> . initializer
    (18) initializer_list -> . initializer_list COMMA initializer
    (14) initializer -> . assignment_expression
    (15) initializer -> . LBRACE initializer_list RBRACE
    (16) initializer -> . LBRACE initializer_list COMMA RBRACE
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    LBRACE          shift and go to state 42
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    initializer_list               shift and go to state 77
    initializer                    shift and go to state 78
    assignment_expression          shift and go to state 41
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 43

    (53) assignment_expression -> binary_expression .
    (56) binary_expression -> binary_expression . TIMES binary_expression
    (57) binary_expression -> binary_expression . DIVIDE binary_expression
    (58) binary_expression -> binary_expression . MOD binary_expression
    (59) binary_expression -> binary_expression . PLUS binary_expression
    (60) binary_expression -> binary_expression . MINUS binary_expression
    (61) binary_expression -> binary_expression . LT binary_expression
    (62) binary_expression -> binary_expression . LE binary_expression
    (63) binary_expression -> binary_expression . GT binary_expression
    (64) binary_expression -> binary_expression . GE binary_expression
    (65) binary_expression -> binary_expression . EQ binary_expression
    (66) binary_expression -> binary_expression . NQ binary_expression
    (67) binary_expression -> binary_expression . AND binary_expression
    (68) binary_expression -> binary_expression . OR binary_expression

    COMMA           reduce using rule 53 (assignment_expression -> binary_expression .)
    SEMI            reduce using rule 53 (assignment_expression -> binary_expression .)
    RBRACE          reduce using rule 53 (assignment_expression -> binary_expression .)
    RPAREN          reduce using rule 53 (assignment_expression -> binary_expression .)
    RBRACKET        reduce using rule 53 (assignment_expression -> binary_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    MOD             shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NQ              shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91


state 44

    (54) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (78) cast_expression -> unary_expression .
    (91) assignment_operator -> . EQUALS
    (92) assignment_operator -> . EQTIMES
    (93) assignment_operator -> . EQDIV
    (94) assignment_operator -> . EQMOD
    (95) assignment_operator -> . EQPLUS
    (96) assignment_operator -> . EQMINUS

    TIMES           reduce using rule 78 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 78 (cast_expression -> unary_expression .)
    MOD             reduce using rule 78 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 78 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 78 (cast_expression -> unary_expression .)
    LT              reduce using rule 78 (cast_expression -> unary_expression .)
    LE              reduce using rule 78 (cast_expression -> unary_expression .)
    GT              reduce using rule 78 (cast_expression -> unary_expression .)
    GE              reduce using rule 78 (cast_expression -> unary_expression .)
    EQ              reduce using rule 78 (cast_expression -> unary_expression .)
    NQ              reduce using rule 78 (cast_expression -> unary_expression .)
    AND             reduce using rule 78 (cast_expression -> unary_expression .)
    OR              reduce using rule 78 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 78 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 78 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 78 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 78 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 78 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 93
    EQTIMES         shift and go to state 94
    EQDIV           shift and go to state 95
    EQMOD           shift and go to state 96
    EQPLUS          shift and go to state 97
    EQMINUS         shift and go to state 98

    assignment_operator            shift and go to state 92

state 45

    (55) binary_expression -> cast_expression .

    TIMES           reduce using rule 55 (binary_expression -> cast_expression .)
    DIVIDE          reduce using rule 55 (binary_expression -> cast_expression .)
    MOD             reduce using rule 55 (binary_expression -> cast_expression .)
    PLUS            reduce using rule 55 (binary_expression -> cast_expression .)
    MINUS           reduce using rule 55 (binary_expression -> cast_expression .)
    LT              reduce using rule 55 (binary_expression -> cast_expression .)
    LE              reduce using rule 55 (binary_expression -> cast_expression .)
    GT              reduce using rule 55 (binary_expression -> cast_expression .)
    GE              reduce using rule 55 (binary_expression -> cast_expression .)
    EQ              reduce using rule 55 (binary_expression -> cast_expression .)
    NQ              reduce using rule 55 (binary_expression -> cast_expression .)
    AND             reduce using rule 55 (binary_expression -> cast_expression .)
    OR              reduce using rule 55 (binary_expression -> cast_expression .)
    COMMA           reduce using rule 55 (binary_expression -> cast_expression .)
    SEMI            reduce using rule 55 (binary_expression -> cast_expression .)
    RBRACKET        reduce using rule 55 (binary_expression -> cast_expression .)
    RBRACE          reduce using rule 55 (binary_expression -> cast_expression .)
    RPAREN          reduce using rule 55 (binary_expression -> cast_expression .)


state 46

    (98) unary_operator -> TIMES .

    LPAREN          reduce using rule 98 (unary_operator -> TIMES .)
    INCREASE        reduce using rule 98 (unary_operator -> TIMES .)
    DECREASE        reduce using rule 98 (unary_operator -> TIMES .)
    ADDRESS         reduce using rule 98 (unary_operator -> TIMES .)
    TIMES           reduce using rule 98 (unary_operator -> TIMES .)
    PLUS            reduce using rule 98 (unary_operator -> TIMES .)
    UMINUS          reduce using rule 98 (unary_operator -> TIMES .)
    NOT             reduce using rule 98 (unary_operator -> TIMES .)
    ID              reduce using rule 98 (unary_operator -> TIMES .)
    STRING          reduce using rule 98 (unary_operator -> TIMES .)
    INT_CONST       reduce using rule 98 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 98 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 98 (unary_operator -> TIMES .)


state 47

    (99) unary_operator -> PLUS .

    LPAREN          reduce using rule 99 (unary_operator -> PLUS .)
    INCREASE        reduce using rule 99 (unary_operator -> PLUS .)
    DECREASE        reduce using rule 99 (unary_operator -> PLUS .)
    ADDRESS         reduce using rule 99 (unary_operator -> PLUS .)
    TIMES           reduce using rule 99 (unary_operator -> PLUS .)
    PLUS            reduce using rule 99 (unary_operator -> PLUS .)
    UMINUS          reduce using rule 99 (unary_operator -> PLUS .)
    NOT             reduce using rule 99 (unary_operator -> PLUS .)
    ID              reduce using rule 99 (unary_operator -> PLUS .)
    STRING          reduce using rule 99 (unary_operator -> PLUS .)
    INT_CONST       reduce using rule 99 (unary_operator -> PLUS .)
    FLOAT_CONST     reduce using rule 99 (unary_operator -> PLUS .)
    CHAR_CONST      reduce using rule 99 (unary_operator -> PLUS .)


state 48

    (69) unary_expression -> postfix_expression .
    (74) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (75) postfix_expression -> postfix_expression . LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> postfix_expression . INCREASE
    (77) postfix_expression -> postfix_expression . DECREASE

    EQUALS          reduce using rule 69 (unary_expression -> postfix_expression .)
    EQTIMES         reduce using rule 69 (unary_expression -> postfix_expression .)
    EQDIV           reduce using rule 69 (unary_expression -> postfix_expression .)
    EQMOD           reduce using rule 69 (unary_expression -> postfix_expression .)
    EQPLUS          reduce using rule 69 (unary_expression -> postfix_expression .)
    EQMINUS         reduce using rule 69 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 69 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 69 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 69 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 69 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 69 (unary_expression -> postfix_expression .)
    LT              reduce using rule 69 (unary_expression -> postfix_expression .)
    LE              reduce using rule 69 (unary_expression -> postfix_expression .)
    GT              reduce using rule 69 (unary_expression -> postfix_expression .)
    GE              reduce using rule 69 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 69 (unary_expression -> postfix_expression .)
    NQ              reduce using rule 69 (unary_expression -> postfix_expression .)
    AND             reduce using rule 69 (unary_expression -> postfix_expression .)
    OR              reduce using rule 69 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 69 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 69 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 69 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 69 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 69 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 99
    LPAREN          shift and go to state 100
    INCREASE        shift and go to state 101
    DECREASE        shift and go to state 102


state 49

    (70) unary_expression -> INCREASE . unary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    LPAREN          shift and go to state 104
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 50

    (71) unary_expression -> DECREASE . unary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    LPAREN          shift and go to state 104
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    unary_expression               shift and go to state 105
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 51

    (72) unary_expression -> unary_operator . cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    LPAREN          shift and go to state 52
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 106
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 48
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 52

    (79) cast_expression -> LPAREN . type_specifier RPAREN cast_expression
    (83) primary_expression -> LPAREN . expression RPAREN
    (116) type_specifier -> . VOID
    (117) type_specifier -> . INT
    (118) type_specifier -> . FLOAT
    (119) type_specifier -> . CHAR
    (30) expression -> . assignment_expression
    (31) expression -> . expression COMMA assignment_expression
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    VOID            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    type_specifier                 shift and go to state 107
    cast_expression                shift and go to state 45
    expression                     shift and go to state 108
    assignment_expression          shift and go to state 109
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 53

    (73) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 73 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 73 (postfix_expression -> primary_expression .)
    INCREASE        reduce using rule 73 (postfix_expression -> primary_expression .)
    DECREASE        reduce using rule 73 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 73 (postfix_expression -> primary_expression .)
    EQTIMES         reduce using rule 73 (postfix_expression -> primary_expression .)
    EQDIV           reduce using rule 73 (postfix_expression -> primary_expression .)
    EQMOD           reduce using rule 73 (postfix_expression -> primary_expression .)
    EQPLUS          reduce using rule 73 (postfix_expression -> primary_expression .)
    EQMINUS         reduce using rule 73 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 73 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 73 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 73 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 73 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 73 (postfix_expression -> primary_expression .)
    LT              reduce using rule 73 (postfix_expression -> primary_expression .)
    LE              reduce using rule 73 (postfix_expression -> primary_expression .)
    GT              reduce using rule 73 (postfix_expression -> primary_expression .)
    GE              reduce using rule 73 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 73 (postfix_expression -> primary_expression .)
    NQ              reduce using rule 73 (postfix_expression -> primary_expression .)
    AND             reduce using rule 73 (postfix_expression -> primary_expression .)
    OR              reduce using rule 73 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 73 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 73 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 73 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 73 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 73 (postfix_expression -> primary_expression .)


state 54

    (97) unary_operator -> ADDRESS .

    LPAREN          reduce using rule 97 (unary_operator -> ADDRESS .)
    INCREASE        reduce using rule 97 (unary_operator -> ADDRESS .)
    DECREASE        reduce using rule 97 (unary_operator -> ADDRESS .)
    ADDRESS         reduce using rule 97 (unary_operator -> ADDRESS .)
    TIMES           reduce using rule 97 (unary_operator -> ADDRESS .)
    PLUS            reduce using rule 97 (unary_operator -> ADDRESS .)
    UMINUS          reduce using rule 97 (unary_operator -> ADDRESS .)
    NOT             reduce using rule 97 (unary_operator -> ADDRESS .)
    ID              reduce using rule 97 (unary_operator -> ADDRESS .)
    STRING          reduce using rule 97 (unary_operator -> ADDRESS .)
    INT_CONST       reduce using rule 97 (unary_operator -> ADDRESS .)
    FLOAT_CONST     reduce using rule 97 (unary_operator -> ADDRESS .)
    CHAR_CONST      reduce using rule 97 (unary_operator -> ADDRESS .)


state 55

    (100) unary_operator -> UMINUS .

    LPAREN          reduce using rule 100 (unary_operator -> UMINUS .)
    INCREASE        reduce using rule 100 (unary_operator -> UMINUS .)
    DECREASE        reduce using rule 100 (unary_operator -> UMINUS .)
    ADDRESS         reduce using rule 100 (unary_operator -> UMINUS .)
    TIMES           reduce using rule 100 (unary_operator -> UMINUS .)
    PLUS            reduce using rule 100 (unary_operator -> UMINUS .)
    UMINUS          reduce using rule 100 (unary_operator -> UMINUS .)
    NOT             reduce using rule 100 (unary_operator -> UMINUS .)
    ID              reduce using rule 100 (unary_operator -> UMINUS .)
    STRING          reduce using rule 100 (unary_operator -> UMINUS .)
    INT_CONST       reduce using rule 100 (unary_operator -> UMINUS .)
    FLOAT_CONST     reduce using rule 100 (unary_operator -> UMINUS .)
    CHAR_CONST      reduce using rule 100 (unary_operator -> UMINUS .)


state 56

    (101) unary_operator -> NOT .

    LPAREN          reduce using rule 101 (unary_operator -> NOT .)
    INCREASE        reduce using rule 101 (unary_operator -> NOT .)
    DECREASE        reduce using rule 101 (unary_operator -> NOT .)
    ADDRESS         reduce using rule 101 (unary_operator -> NOT .)
    TIMES           reduce using rule 101 (unary_operator -> NOT .)
    PLUS            reduce using rule 101 (unary_operator -> NOT .)
    UMINUS          reduce using rule 101 (unary_operator -> NOT .)
    NOT             reduce using rule 101 (unary_operator -> NOT .)
    ID              reduce using rule 101 (unary_operator -> NOT .)
    STRING          reduce using rule 101 (unary_operator -> NOT .)
    INT_CONST       reduce using rule 101 (unary_operator -> NOT .)
    FLOAT_CONST     reduce using rule 101 (unary_operator -> NOT .)
    CHAR_CONST      reduce using rule 101 (unary_operator -> NOT .)


state 57

    (80) primary_expression -> ID .

    LBRACKET        reduce using rule 80 (primary_expression -> ID .)
    LPAREN          reduce using rule 80 (primary_expression -> ID .)
    INCREASE        reduce using rule 80 (primary_expression -> ID .)
    DECREASE        reduce using rule 80 (primary_expression -> ID .)
    EQUALS          reduce using rule 80 (primary_expression -> ID .)
    EQTIMES         reduce using rule 80 (primary_expression -> ID .)
    EQDIV           reduce using rule 80 (primary_expression -> ID .)
    EQMOD           reduce using rule 80 (primary_expression -> ID .)
    EQPLUS          reduce using rule 80 (primary_expression -> ID .)
    EQMINUS         reduce using rule 80 (primary_expression -> ID .)
    TIMES           reduce using rule 80 (primary_expression -> ID .)
    DIVIDE          reduce using rule 80 (primary_expression -> ID .)
    MOD             reduce using rule 80 (primary_expression -> ID .)
    PLUS            reduce using rule 80 (primary_expression -> ID .)
    MINUS           reduce using rule 80 (primary_expression -> ID .)
    LT              reduce using rule 80 (primary_expression -> ID .)
    LE              reduce using rule 80 (primary_expression -> ID .)
    GT              reduce using rule 80 (primary_expression -> ID .)
    GE              reduce using rule 80 (primary_expression -> ID .)
    EQ              reduce using rule 80 (primary_expression -> ID .)
    NQ              reduce using rule 80 (primary_expression -> ID .)
    AND             reduce using rule 80 (primary_expression -> ID .)
    OR              reduce using rule 80 (primary_expression -> ID .)
    COMMA           reduce using rule 80 (primary_expression -> ID .)
    SEMI            reduce using rule 80 (primary_expression -> ID .)
    RBRACKET        reduce using rule 80 (primary_expression -> ID .)
    RBRACE          reduce using rule 80 (primary_expression -> ID .)
    RPAREN          reduce using rule 80 (primary_expression -> ID .)


state 58

    (81) primary_expression -> constant .

    LBRACKET        reduce using rule 81 (primary_expression -> constant .)
    LPAREN          reduce using rule 81 (primary_expression -> constant .)
    INCREASE        reduce using rule 81 (primary_expression -> constant .)
    DECREASE        reduce using rule 81 (primary_expression -> constant .)
    EQUALS          reduce using rule 81 (primary_expression -> constant .)
    EQTIMES         reduce using rule 81 (primary_expression -> constant .)
    EQDIV           reduce using rule 81 (primary_expression -> constant .)
    EQMOD           reduce using rule 81 (primary_expression -> constant .)
    EQPLUS          reduce using rule 81 (primary_expression -> constant .)
    EQMINUS         reduce using rule 81 (primary_expression -> constant .)
    TIMES           reduce using rule 81 (primary_expression -> constant .)
    DIVIDE          reduce using rule 81 (primary_expression -> constant .)
    MOD             reduce using rule 81 (primary_expression -> constant .)
    PLUS            reduce using rule 81 (primary_expression -> constant .)
    MINUS           reduce using rule 81 (primary_expression -> constant .)
    LT              reduce using rule 81 (primary_expression -> constant .)
    LE              reduce using rule 81 (primary_expression -> constant .)
    GT              reduce using rule 81 (primary_expression -> constant .)
    GE              reduce using rule 81 (primary_expression -> constant .)
    EQ              reduce using rule 81 (primary_expression -> constant .)
    NQ              reduce using rule 81 (primary_expression -> constant .)
    AND             reduce using rule 81 (primary_expression -> constant .)
    OR              reduce using rule 81 (primary_expression -> constant .)
    COMMA           reduce using rule 81 (primary_expression -> constant .)
    SEMI            reduce using rule 81 (primary_expression -> constant .)
    RBRACKET        reduce using rule 81 (primary_expression -> constant .)
    RBRACE          reduce using rule 81 (primary_expression -> constant .)
    RPAREN          reduce using rule 81 (primary_expression -> constant .)


state 59

    (82) primary_expression -> STRING .

    LBRACKET        reduce using rule 82 (primary_expression -> STRING .)
    LPAREN          reduce using rule 82 (primary_expression -> STRING .)
    INCREASE        reduce using rule 82 (primary_expression -> STRING .)
    DECREASE        reduce using rule 82 (primary_expression -> STRING .)
    EQUALS          reduce using rule 82 (primary_expression -> STRING .)
    EQTIMES         reduce using rule 82 (primary_expression -> STRING .)
    EQDIV           reduce using rule 82 (primary_expression -> STRING .)
    EQMOD           reduce using rule 82 (primary_expression -> STRING .)
    EQPLUS          reduce using rule 82 (primary_expression -> STRING .)
    EQMINUS         reduce using rule 82 (primary_expression -> STRING .)
    TIMES           reduce using rule 82 (primary_expression -> STRING .)
    DIVIDE          reduce using rule 82 (primary_expression -> STRING .)
    MOD             reduce using rule 82 (primary_expression -> STRING .)
    PLUS            reduce using rule 82 (primary_expression -> STRING .)
    MINUS           reduce using rule 82 (primary_expression -> STRING .)
    LT              reduce using rule 82 (primary_expression -> STRING .)
    LE              reduce using rule 82 (primary_expression -> STRING .)
    GT              reduce using rule 82 (primary_expression -> STRING .)
    GE              reduce using rule 82 (primary_expression -> STRING .)
    EQ              reduce using rule 82 (primary_expression -> STRING .)
    NQ              reduce using rule 82 (primary_expression -> STRING .)
    AND             reduce using rule 82 (primary_expression -> STRING .)
    OR              reduce using rule 82 (primary_expression -> STRING .)
    COMMA           reduce using rule 82 (primary_expression -> STRING .)
    SEMI            reduce using rule 82 (primary_expression -> STRING .)
    RBRACKET        reduce using rule 82 (primary_expression -> STRING .)
    RBRACE          reduce using rule 82 (primary_expression -> STRING .)
    RPAREN          reduce using rule 82 (primary_expression -> STRING .)


state 60

    (102) constant -> INT_CONST .

    LBRACKET        reduce using rule 102 (constant -> INT_CONST .)
    LPAREN          reduce using rule 102 (constant -> INT_CONST .)
    INCREASE        reduce using rule 102 (constant -> INT_CONST .)
    DECREASE        reduce using rule 102 (constant -> INT_CONST .)
    EQUALS          reduce using rule 102 (constant -> INT_CONST .)
    EQTIMES         reduce using rule 102 (constant -> INT_CONST .)
    EQDIV           reduce using rule 102 (constant -> INT_CONST .)
    EQMOD           reduce using rule 102 (constant -> INT_CONST .)
    EQPLUS          reduce using rule 102 (constant -> INT_CONST .)
    EQMINUS         reduce using rule 102 (constant -> INT_CONST .)
    TIMES           reduce using rule 102 (constant -> INT_CONST .)
    DIVIDE          reduce using rule 102 (constant -> INT_CONST .)
    MOD             reduce using rule 102 (constant -> INT_CONST .)
    PLUS            reduce using rule 102 (constant -> INT_CONST .)
    MINUS           reduce using rule 102 (constant -> INT_CONST .)
    LT              reduce using rule 102 (constant -> INT_CONST .)
    LE              reduce using rule 102 (constant -> INT_CONST .)
    GT              reduce using rule 102 (constant -> INT_CONST .)
    GE              reduce using rule 102 (constant -> INT_CONST .)
    EQ              reduce using rule 102 (constant -> INT_CONST .)
    NQ              reduce using rule 102 (constant -> INT_CONST .)
    AND             reduce using rule 102 (constant -> INT_CONST .)
    OR              reduce using rule 102 (constant -> INT_CONST .)
    COMMA           reduce using rule 102 (constant -> INT_CONST .)
    SEMI            reduce using rule 102 (constant -> INT_CONST .)
    RBRACKET        reduce using rule 102 (constant -> INT_CONST .)
    RBRACE          reduce using rule 102 (constant -> INT_CONST .)
    RPAREN          reduce using rule 102 (constant -> INT_CONST .)


state 61

    (103) constant -> FLOAT_CONST .

    LBRACKET        reduce using rule 103 (constant -> FLOAT_CONST .)
    LPAREN          reduce using rule 103 (constant -> FLOAT_CONST .)
    INCREASE        reduce using rule 103 (constant -> FLOAT_CONST .)
    DECREASE        reduce using rule 103 (constant -> FLOAT_CONST .)
    EQUALS          reduce using rule 103 (constant -> FLOAT_CONST .)
    EQTIMES         reduce using rule 103 (constant -> FLOAT_CONST .)
    EQDIV           reduce using rule 103 (constant -> FLOAT_CONST .)
    EQMOD           reduce using rule 103 (constant -> FLOAT_CONST .)
    EQPLUS          reduce using rule 103 (constant -> FLOAT_CONST .)
    EQMINUS         reduce using rule 103 (constant -> FLOAT_CONST .)
    TIMES           reduce using rule 103 (constant -> FLOAT_CONST .)
    DIVIDE          reduce using rule 103 (constant -> FLOAT_CONST .)
    MOD             reduce using rule 103 (constant -> FLOAT_CONST .)
    PLUS            reduce using rule 103 (constant -> FLOAT_CONST .)
    MINUS           reduce using rule 103 (constant -> FLOAT_CONST .)
    LT              reduce using rule 103 (constant -> FLOAT_CONST .)
    LE              reduce using rule 103 (constant -> FLOAT_CONST .)
    GT              reduce using rule 103 (constant -> FLOAT_CONST .)
    GE              reduce using rule 103 (constant -> FLOAT_CONST .)
    EQ              reduce using rule 103 (constant -> FLOAT_CONST .)
    NQ              reduce using rule 103 (constant -> FLOAT_CONST .)
    AND             reduce using rule 103 (constant -> FLOAT_CONST .)
    OR              reduce using rule 103 (constant -> FLOAT_CONST .)
    COMMA           reduce using rule 103 (constant -> FLOAT_CONST .)
    SEMI            reduce using rule 103 (constant -> FLOAT_CONST .)
    RBRACKET        reduce using rule 103 (constant -> FLOAT_CONST .)
    RBRACE          reduce using rule 103 (constant -> FLOAT_CONST .)
    RPAREN          reduce using rule 103 (constant -> FLOAT_CONST .)


state 62

    (104) constant -> CHAR_CONST .

    LBRACKET        reduce using rule 104 (constant -> CHAR_CONST .)
    LPAREN          reduce using rule 104 (constant -> CHAR_CONST .)
    INCREASE        reduce using rule 104 (constant -> CHAR_CONST .)
    DECREASE        reduce using rule 104 (constant -> CHAR_CONST .)
    EQUALS          reduce using rule 104 (constant -> CHAR_CONST .)
    EQTIMES         reduce using rule 104 (constant -> CHAR_CONST .)
    EQDIV           reduce using rule 104 (constant -> CHAR_CONST .)
    EQMOD           reduce using rule 104 (constant -> CHAR_CONST .)
    EQPLUS          reduce using rule 104 (constant -> CHAR_CONST .)
    EQMINUS         reduce using rule 104 (constant -> CHAR_CONST .)
    TIMES           reduce using rule 104 (constant -> CHAR_CONST .)
    DIVIDE          reduce using rule 104 (constant -> CHAR_CONST .)
    MOD             reduce using rule 104 (constant -> CHAR_CONST .)
    PLUS            reduce using rule 104 (constant -> CHAR_CONST .)
    MINUS           reduce using rule 104 (constant -> CHAR_CONST .)
    LT              reduce using rule 104 (constant -> CHAR_CONST .)
    LE              reduce using rule 104 (constant -> CHAR_CONST .)
    GT              reduce using rule 104 (constant -> CHAR_CONST .)
    GE              reduce using rule 104 (constant -> CHAR_CONST .)
    EQ              reduce using rule 104 (constant -> CHAR_CONST .)
    NQ              reduce using rule 104 (constant -> CHAR_CONST .)
    AND             reduce using rule 104 (constant -> CHAR_CONST .)
    OR              reduce using rule 104 (constant -> CHAR_CONST .)
    COMMA           reduce using rule 104 (constant -> CHAR_CONST .)
    SEMI            reduce using rule 104 (constant -> CHAR_CONST .)
    RBRACKET        reduce using rule 104 (constant -> CHAR_CONST .)
    RBRACE          reduce using rule 104 (constant -> CHAR_CONST .)
    RPAREN          reduce using rule 104 (constant -> CHAR_CONST .)


state 63

    (11) init_declarator_list -> init_declarator_list COMMA init_declarator .

    COMMA           reduce using rule 11 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    SEMI            reduce using rule 11 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 64

    (12) init_declarator -> declarator .
    (13) init_declarator -> declarator . EQUALS initializer

    COMMA           reduce using rule 12 (init_declarator -> declarator .)
    SEMI            reduce using rule 12 (init_declarator -> declarator .)
    EQUALS          shift and go to state 29


state 65

    (26) compound_statement -> LBRACE declaration_list_opt . statement_list_opt RBRACE
    (20) declaration_list_opt -> declaration_list_opt . declaration
    (51) statement_list_opt -> . statement_list_opt statement
    (52) statement_list_opt -> . empty
    (19) declaration -> . type_specifier init_declarator_list_opt SEMI
    (120) empty -> .
    (116) type_specifier -> . VOID
    (117) type_specifier -> . INT
    (118) type_specifier -> . FLOAT
    (119) type_specifier -> . CHAR

    RBRACE          reduce using rule 120 (empty -> .)
    LBRACE          reduce using rule 120 (empty -> .)
    IF              reduce using rule 120 (empty -> .)
    WHILE           reduce using rule 120 (empty -> .)
    FOR             reduce using rule 120 (empty -> .)
    BREAK           reduce using rule 120 (empty -> .)
    RETURN          reduce using rule 120 (empty -> .)
    ASSERT          reduce using rule 120 (empty -> .)
    PRINT           reduce using rule 120 (empty -> .)
    READ            reduce using rule 120 (empty -> .)
    INCREASE        reduce using rule 120 (empty -> .)
    DECREASE        reduce using rule 120 (empty -> .)
    LPAREN          reduce using rule 120 (empty -> .)
    ADDRESS         reduce using rule 120 (empty -> .)
    TIMES           reduce using rule 120 (empty -> .)
    PLUS            reduce using rule 120 (empty -> .)
    UMINUS          reduce using rule 120 (empty -> .)
    NOT             reduce using rule 120 (empty -> .)
    ID              reduce using rule 120 (empty -> .)
    STRING          reduce using rule 120 (empty -> .)
    INT_CONST       reduce using rule 120 (empty -> .)
    FLOAT_CONST     reduce using rule 120 (empty -> .)
    CHAR_CONST      reduce using rule 120 (empty -> .)
    SEMI            reduce using rule 120 (empty -> .)
    VOID            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12

    statement_list_opt             shift and go to state 110
    declaration                    shift and go to state 33
    empty                          shift and go to state 111
    type_specifier                 shift and go to state 35

state 66

    (111) direct_declarator -> direct_declarator LBRACKET constant_expression_opt . RBRACKET

    RBRACKET        shift and go to state 112


state 67

    (88) constant_expression_opt -> constant_expression .

    RBRACKET        reduce using rule 88 (constant_expression_opt -> constant_expression .)


state 68

    (89) constant_expression_opt -> empty .

    RBRACKET        reduce using rule 89 (constant_expression_opt -> empty .)


state 69

    (90) constant_expression -> binary_expression .
    (56) binary_expression -> binary_expression . TIMES binary_expression
    (57) binary_expression -> binary_expression . DIVIDE binary_expression
    (58) binary_expression -> binary_expression . MOD binary_expression
    (59) binary_expression -> binary_expression . PLUS binary_expression
    (60) binary_expression -> binary_expression . MINUS binary_expression
    (61) binary_expression -> binary_expression . LT binary_expression
    (62) binary_expression -> binary_expression . LE binary_expression
    (63) binary_expression -> binary_expression . GT binary_expression
    (64) binary_expression -> binary_expression . GE binary_expression
    (65) binary_expression -> binary_expression . EQ binary_expression
    (66) binary_expression -> binary_expression . NQ binary_expression
    (67) binary_expression -> binary_expression . AND binary_expression
    (68) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 90 (constant_expression -> binary_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    MOD             shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NQ              shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91


state 70

    (78) cast_expression -> unary_expression .

    TIMES           reduce using rule 78 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 78 (cast_expression -> unary_expression .)
    MOD             reduce using rule 78 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 78 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 78 (cast_expression -> unary_expression .)
    LT              reduce using rule 78 (cast_expression -> unary_expression .)
    LE              reduce using rule 78 (cast_expression -> unary_expression .)
    GT              reduce using rule 78 (cast_expression -> unary_expression .)
    GE              reduce using rule 78 (cast_expression -> unary_expression .)
    EQ              reduce using rule 78 (cast_expression -> unary_expression .)
    NQ              reduce using rule 78 (cast_expression -> unary_expression .)
    AND             reduce using rule 78 (cast_expression -> unary_expression .)
    OR              reduce using rule 78 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 78 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 78 (cast_expression -> unary_expression .)
    EQTIMES         reduce using rule 78 (cast_expression -> unary_expression .)
    EQDIV           reduce using rule 78 (cast_expression -> unary_expression .)
    EQMOD           reduce using rule 78 (cast_expression -> unary_expression .)
    EQPLUS          reduce using rule 78 (cast_expression -> unary_expression .)
    EQMINUS         reduce using rule 78 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 78 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 78 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 78 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 78 (cast_expression -> unary_expression .)


state 71

    (112) direct_declarator -> direct_declarator LPAREN parameter_list . RPAREN
    (24) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          shift and go to state 113
    COMMA           shift and go to state 114


state 72

    (113) direct_declarator -> direct_declarator LPAREN id_list . RPAREN
    (114) id_list -> id_list . ID

    RPAREN          shift and go to state 115
    ID              shift and go to state 116


state 73

    (23) parameter_list -> parameter_declaration .

    RPAREN          reduce using rule 23 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 23 (parameter_list -> parameter_declaration .)


state 74

    (115) id_list -> empty .

    RPAREN          reduce using rule 115 (id_list -> empty .)
    ID              reduce using rule 115 (id_list -> empty .)


state 75

    (25) parameter_declaration -> type_specifier . declarator
    (22) declarator -> . pointer_opt direct_declarator
    (105) pointer_opt -> . pointer
    (106) pointer_opt -> . empty
    (107) pointer -> . TIMES pointer
    (108) pointer -> . TIMES
    (120) empty -> .

    TIMES           shift and go to state 16
    ID              reduce using rule 120 (empty -> .)
    LPAREN          reduce using rule 120 (empty -> .)

    declarator                     shift and go to state 117
    pointer_opt                    shift and go to state 13
    pointer                        shift and go to state 14
    empty                          shift and go to state 15

state 76

    (110) direct_declarator -> LPAREN declarator RPAREN .

    LBRACKET        reduce using rule 110 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 110 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 110 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 110 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 110 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 110 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 110 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 110 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 110 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 110 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 110 (direct_declarator -> LPAREN declarator RPAREN .)


state 77

    (15) initializer -> LBRACE initializer_list . RBRACE
    (16) initializer -> LBRACE initializer_list . COMMA RBRACE
    (18) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 118
    COMMA           shift and go to state 119


state 78

    (17) initializer_list -> initializer .

    RBRACE          reduce using rule 17 (initializer_list -> initializer .)
    COMMA           reduce using rule 17 (initializer_list -> initializer .)


state 79

    (56) binary_expression -> binary_expression TIMES . binary_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    LPAREN          shift and go to state 52
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    binary_expression              shift and go to state 120
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 80

    (57) binary_expression -> binary_expression DIVIDE . binary_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    LPAREN          shift and go to state 52
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    binary_expression              shift and go to state 121
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 81

    (58) binary_expression -> binary_expression MOD . binary_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    LPAREN          shift and go to state 52
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    binary_expression              shift and go to state 122
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 82

    (59) binary_expression -> binary_expression PLUS . binary_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    LPAREN          shift and go to state 52
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    binary_expression              shift and go to state 123
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 83

    (60) binary_expression -> binary_expression MINUS . binary_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    LPAREN          shift and go to state 52
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    binary_expression              shift and go to state 124
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 84

    (61) binary_expression -> binary_expression LT . binary_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    LPAREN          shift and go to state 52
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    binary_expression              shift and go to state 125
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 85

    (62) binary_expression -> binary_expression LE . binary_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    LPAREN          shift and go to state 52
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    binary_expression              shift and go to state 126
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 86

    (63) binary_expression -> binary_expression GT . binary_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    LPAREN          shift and go to state 52
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    binary_expression              shift and go to state 127
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 87

    (64) binary_expression -> binary_expression GE . binary_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    LPAREN          shift and go to state 52
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    binary_expression              shift and go to state 128
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 88

    (65) binary_expression -> binary_expression EQ . binary_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    LPAREN          shift and go to state 52
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    binary_expression              shift and go to state 129
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 89

    (66) binary_expression -> binary_expression NQ . binary_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    LPAREN          shift and go to state 52
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    binary_expression              shift and go to state 130
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 90

    (67) binary_expression -> binary_expression AND . binary_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    LPAREN          shift and go to state 52
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    binary_expression              shift and go to state 131
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 91

    (68) binary_expression -> binary_expression OR . binary_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    LPAREN          shift and go to state 52
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    binary_expression              shift and go to state 132
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 92

    (54) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    unary_expression               shift and go to state 44
    assignment_expression          shift and go to state 133
    binary_expression              shift and go to state 43
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 93

    (91) assignment_operator -> EQUALS .

    INCREASE        reduce using rule 91 (assignment_operator -> EQUALS .)
    DECREASE        reduce using rule 91 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 91 (assignment_operator -> EQUALS .)
    ADDRESS         reduce using rule 91 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 91 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 91 (assignment_operator -> EQUALS .)
    UMINUS          reduce using rule 91 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 91 (assignment_operator -> EQUALS .)
    ID              reduce using rule 91 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 91 (assignment_operator -> EQUALS .)
    INT_CONST       reduce using rule 91 (assignment_operator -> EQUALS .)
    FLOAT_CONST     reduce using rule 91 (assignment_operator -> EQUALS .)
    CHAR_CONST      reduce using rule 91 (assignment_operator -> EQUALS .)


state 94

    (92) assignment_operator -> EQTIMES .

    INCREASE        reduce using rule 92 (assignment_operator -> EQTIMES .)
    DECREASE        reduce using rule 92 (assignment_operator -> EQTIMES .)
    LPAREN          reduce using rule 92 (assignment_operator -> EQTIMES .)
    ADDRESS         reduce using rule 92 (assignment_operator -> EQTIMES .)
    TIMES           reduce using rule 92 (assignment_operator -> EQTIMES .)
    PLUS            reduce using rule 92 (assignment_operator -> EQTIMES .)
    UMINUS          reduce using rule 92 (assignment_operator -> EQTIMES .)
    NOT             reduce using rule 92 (assignment_operator -> EQTIMES .)
    ID              reduce using rule 92 (assignment_operator -> EQTIMES .)
    STRING          reduce using rule 92 (assignment_operator -> EQTIMES .)
    INT_CONST       reduce using rule 92 (assignment_operator -> EQTIMES .)
    FLOAT_CONST     reduce using rule 92 (assignment_operator -> EQTIMES .)
    CHAR_CONST      reduce using rule 92 (assignment_operator -> EQTIMES .)


state 95

    (93) assignment_operator -> EQDIV .

    INCREASE        reduce using rule 93 (assignment_operator -> EQDIV .)
    DECREASE        reduce using rule 93 (assignment_operator -> EQDIV .)
    LPAREN          reduce using rule 93 (assignment_operator -> EQDIV .)
    ADDRESS         reduce using rule 93 (assignment_operator -> EQDIV .)
    TIMES           reduce using rule 93 (assignment_operator -> EQDIV .)
    PLUS            reduce using rule 93 (assignment_operator -> EQDIV .)
    UMINUS          reduce using rule 93 (assignment_operator -> EQDIV .)
    NOT             reduce using rule 93 (assignment_operator -> EQDIV .)
    ID              reduce using rule 93 (assignment_operator -> EQDIV .)
    STRING          reduce using rule 93 (assignment_operator -> EQDIV .)
    INT_CONST       reduce using rule 93 (assignment_operator -> EQDIV .)
    FLOAT_CONST     reduce using rule 93 (assignment_operator -> EQDIV .)
    CHAR_CONST      reduce using rule 93 (assignment_operator -> EQDIV .)


state 96

    (94) assignment_operator -> EQMOD .

    INCREASE        reduce using rule 94 (assignment_operator -> EQMOD .)
    DECREASE        reduce using rule 94 (assignment_operator -> EQMOD .)
    LPAREN          reduce using rule 94 (assignment_operator -> EQMOD .)
    ADDRESS         reduce using rule 94 (assignment_operator -> EQMOD .)
    TIMES           reduce using rule 94 (assignment_operator -> EQMOD .)
    PLUS            reduce using rule 94 (assignment_operator -> EQMOD .)
    UMINUS          reduce using rule 94 (assignment_operator -> EQMOD .)
    NOT             reduce using rule 94 (assignment_operator -> EQMOD .)
    ID              reduce using rule 94 (assignment_operator -> EQMOD .)
    STRING          reduce using rule 94 (assignment_operator -> EQMOD .)
    INT_CONST       reduce using rule 94 (assignment_operator -> EQMOD .)
    FLOAT_CONST     reduce using rule 94 (assignment_operator -> EQMOD .)
    CHAR_CONST      reduce using rule 94 (assignment_operator -> EQMOD .)


state 97

    (95) assignment_operator -> EQPLUS .

    INCREASE        reduce using rule 95 (assignment_operator -> EQPLUS .)
    DECREASE        reduce using rule 95 (assignment_operator -> EQPLUS .)
    LPAREN          reduce using rule 95 (assignment_operator -> EQPLUS .)
    ADDRESS         reduce using rule 95 (assignment_operator -> EQPLUS .)
    TIMES           reduce using rule 95 (assignment_operator -> EQPLUS .)
    PLUS            reduce using rule 95 (assignment_operator -> EQPLUS .)
    UMINUS          reduce using rule 95 (assignment_operator -> EQPLUS .)
    NOT             reduce using rule 95 (assignment_operator -> EQPLUS .)
    ID              reduce using rule 95 (assignment_operator -> EQPLUS .)
    STRING          reduce using rule 95 (assignment_operator -> EQPLUS .)
    INT_CONST       reduce using rule 95 (assignment_operator -> EQPLUS .)
    FLOAT_CONST     reduce using rule 95 (assignment_operator -> EQPLUS .)
    CHAR_CONST      reduce using rule 95 (assignment_operator -> EQPLUS .)


state 98

    (96) assignment_operator -> EQMINUS .

    INCREASE        reduce using rule 96 (assignment_operator -> EQMINUS .)
    DECREASE        reduce using rule 96 (assignment_operator -> EQMINUS .)
    LPAREN          reduce using rule 96 (assignment_operator -> EQMINUS .)
    ADDRESS         reduce using rule 96 (assignment_operator -> EQMINUS .)
    TIMES           reduce using rule 96 (assignment_operator -> EQMINUS .)
    PLUS            reduce using rule 96 (assignment_operator -> EQMINUS .)
    UMINUS          reduce using rule 96 (assignment_operator -> EQMINUS .)
    NOT             reduce using rule 96 (assignment_operator -> EQMINUS .)
    ID              reduce using rule 96 (assignment_operator -> EQMINUS .)
    STRING          reduce using rule 96 (assignment_operator -> EQMINUS .)
    INT_CONST       reduce using rule 96 (assignment_operator -> EQMINUS .)
    FLOAT_CONST     reduce using rule 96 (assignment_operator -> EQMINUS .)
    CHAR_CONST      reduce using rule 96 (assignment_operator -> EQMINUS .)


state 99

    (74) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (30) expression -> . assignment_expression
    (31) expression -> . expression COMMA assignment_expression
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    postfix_expression             shift and go to state 48
    expression                     shift and go to state 134
    assignment_expression          shift and go to state 109
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 100

    (75) postfix_expression -> postfix_expression LPAREN . argument_expression_opt RPAREN
    (84) argument_expression_opt -> . argument_expression
    (85) argument_expression_opt -> . empty
    (86) argument_expression -> . assignment_expression
    (87) argument_expression -> . argument_expression COMMA assignment_expression
    (120) empty -> .
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    RPAREN          reduce using rule 120 (empty -> .)
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    postfix_expression             shift and go to state 48
    argument_expression_opt        shift and go to state 135
    argument_expression            shift and go to state 136
    empty                          shift and go to state 137
    assignment_expression          shift and go to state 138
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 101

    (76) postfix_expression -> postfix_expression INCREASE .

    LBRACKET        reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    LPAREN          reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    INCREASE        reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    DECREASE        reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    EQUALS          reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    EQTIMES         reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    EQDIV           reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    EQMOD           reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    EQPLUS          reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    EQMINUS         reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    TIMES           reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    DIVIDE          reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    MOD             reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    PLUS            reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    MINUS           reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    LT              reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    LE              reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    GT              reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    GE              reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    EQ              reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    NQ              reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    AND             reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    OR              reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    COMMA           reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    SEMI            reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    RBRACKET        reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    RBRACE          reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)
    RPAREN          reduce using rule 76 (postfix_expression -> postfix_expression INCREASE .)


state 102

    (77) postfix_expression -> postfix_expression DECREASE .

    LBRACKET        reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    LPAREN          reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    INCREASE        reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    DECREASE        reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    EQUALS          reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    EQTIMES         reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    EQDIV           reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    EQMOD           reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    EQPLUS          reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    EQMINUS         reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    TIMES           reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    DIVIDE          reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    MOD             reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    PLUS            reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    MINUS           reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    LT              reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    LE              reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    GT              reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    GE              reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    EQ              reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    NQ              reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    AND             reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    OR              reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    COMMA           reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    SEMI            reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    RBRACKET        reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    RBRACE          reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)
    RPAREN          reduce using rule 77 (postfix_expression -> postfix_expression DECREASE .)


state 103

    (70) unary_expression -> INCREASE unary_expression .

    EQUALS          reduce using rule 70 (unary_expression -> INCREASE unary_expression .)
    EQTIMES         reduce using rule 70 (unary_expression -> INCREASE unary_expression .)
    EQDIV           reduce using rule 70 (unary_expression -> INCREASE unary_expression .)
    EQMOD           reduce using rule 70 (unary_expression -> INCREASE unary_expression .)
    EQPLUS          reduce using rule 70 (unary_expression -> INCREASE unary_expression .)
    EQMINUS         reduce using rule 70 (unary_expression -> INCREASE unary_expression .)
    TIMES           reduce using rule 70 (unary_expression -> INCREASE unary_expression .)
    DIVIDE          reduce using rule 70 (unary_expression -> INCREASE unary_expression .)
    MOD             reduce using rule 70 (unary_expression -> INCREASE unary_expression .)
    PLUS            reduce using rule 70 (unary_expression -> INCREASE unary_expression .)
    MINUS           reduce using rule 70 (unary_expression -> INCREASE unary_expression .)
    LT              reduce using rule 70 (unary_expression -> INCREASE unary_expression .)
    LE              reduce using rule 70 (unary_expression -> INCREASE unary_expression .)
    GT              reduce using rule 70 (unary_expression -> INCREASE unary_expression .)
    GE              reduce using rule 70 (unary_expression -> INCREASE unary_expression .)
    EQ              reduce using rule 70 (unary_expression -> INCREASE unary_expression .)
    NQ              reduce using rule 70 (unary_expression -> INCREASE unary_expression .)
    AND             reduce using rule 70 (unary_expression -> INCREASE unary_expression .)
    OR              reduce using rule 70 (unary_expression -> INCREASE unary_expression .)
    COMMA           reduce using rule 70 (unary_expression -> INCREASE unary_expression .)
    SEMI            reduce using rule 70 (unary_expression -> INCREASE unary_expression .)
    RBRACKET        reduce using rule 70 (unary_expression -> INCREASE unary_expression .)
    RBRACE          reduce using rule 70 (unary_expression -> INCREASE unary_expression .)
    RPAREN          reduce using rule 70 (unary_expression -> INCREASE unary_expression .)


state 104

    (83) primary_expression -> LPAREN . expression RPAREN
    (30) expression -> . assignment_expression
    (31) expression -> . expression COMMA assignment_expression
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    expression                     shift and go to state 108
    assignment_expression          shift and go to state 109
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 105

    (71) unary_expression -> DECREASE unary_expression .

    EQUALS          reduce using rule 71 (unary_expression -> DECREASE unary_expression .)
    EQTIMES         reduce using rule 71 (unary_expression -> DECREASE unary_expression .)
    EQDIV           reduce using rule 71 (unary_expression -> DECREASE unary_expression .)
    EQMOD           reduce using rule 71 (unary_expression -> DECREASE unary_expression .)
    EQPLUS          reduce using rule 71 (unary_expression -> DECREASE unary_expression .)
    EQMINUS         reduce using rule 71 (unary_expression -> DECREASE unary_expression .)
    TIMES           reduce using rule 71 (unary_expression -> DECREASE unary_expression .)
    DIVIDE          reduce using rule 71 (unary_expression -> DECREASE unary_expression .)
    MOD             reduce using rule 71 (unary_expression -> DECREASE unary_expression .)
    PLUS            reduce using rule 71 (unary_expression -> DECREASE unary_expression .)
    MINUS           reduce using rule 71 (unary_expression -> DECREASE unary_expression .)
    LT              reduce using rule 71 (unary_expression -> DECREASE unary_expression .)
    LE              reduce using rule 71 (unary_expression -> DECREASE unary_expression .)
    GT              reduce using rule 71 (unary_expression -> DECREASE unary_expression .)
    GE              reduce using rule 71 (unary_expression -> DECREASE unary_expression .)
    EQ              reduce using rule 71 (unary_expression -> DECREASE unary_expression .)
    NQ              reduce using rule 71 (unary_expression -> DECREASE unary_expression .)
    AND             reduce using rule 71 (unary_expression -> DECREASE unary_expression .)
    OR              reduce using rule 71 (unary_expression -> DECREASE unary_expression .)
    COMMA           reduce using rule 71 (unary_expression -> DECREASE unary_expression .)
    SEMI            reduce using rule 71 (unary_expression -> DECREASE unary_expression .)
    RBRACKET        reduce using rule 71 (unary_expression -> DECREASE unary_expression .)
    RBRACE          reduce using rule 71 (unary_expression -> DECREASE unary_expression .)
    RPAREN          reduce using rule 71 (unary_expression -> DECREASE unary_expression .)


state 106

    (72) unary_expression -> unary_operator cast_expression .

    EQUALS          reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    EQTIMES         reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    EQDIV           reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    EQMOD           reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    EQPLUS          reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    EQMINUS         reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    TIMES           reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    NQ              reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 72 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 72 (unary_expression -> unary_operator cast_expression .)


state 107

    (79) cast_expression -> LPAREN type_specifier . RPAREN cast_expression

    RPAREN          shift and go to state 139


state 108

    (83) primary_expression -> LPAREN expression . RPAREN
    (31) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 140
    COMMA           shift and go to state 141


state 109

    (30) expression -> assignment_expression .

    RPAREN          reduce using rule 30 (expression -> assignment_expression .)
    COMMA           reduce using rule 30 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 30 (expression -> assignment_expression .)
    SEMI            reduce using rule 30 (expression -> assignment_expression .)


state 110

    (26) compound_statement -> LBRACE declaration_list_opt statement_list_opt . RBRACE
    (51) statement_list_opt -> statement_list_opt . statement
    (43) statement -> . expression_statement
    (44) statement -> . compound_statement
    (45) statement -> . selection_statement
    (46) statement -> . iteration_statement
    (47) statement -> . jump_statement
    (48) statement -> . assert_statement
    (49) statement -> . print_statement
    (50) statement -> . read_statement
    (27) expression_statement -> . expression_opt SEMI
    (26) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE
    (32) selection_statement -> . IF LPAREN expression RPAREN statement
    (33) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (34) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (35) iteration_statement -> . FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (36) iteration_statement -> . FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (37) jump_statement -> . BREAK SEMI
    (38) jump_statement -> . RETURN expression SEMI
    (39) jump_statement -> . RETURN SEMI
    (40) assert_statement -> . ASSERT expression SEMI
    (41) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (42) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (28) expression_opt -> . expression
    (29) expression_opt -> . empty
    (30) expression -> . assignment_expression
    (31) expression -> . expression COMMA assignment_expression
    (120) empty -> .
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    RBRACE          shift and go to state 142
    LBRACE          shift and go to state 34
    IF              shift and go to state 153
    WHILE           shift and go to state 155
    FOR             shift and go to state 156
    BREAK           shift and go to state 157
    RETURN          shift and go to state 158
    ASSERT          shift and go to state 159
    PRINT           shift and go to state 160
    READ            shift and go to state 161
    SEMI            reduce using rule 120 (empty -> .)
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    statement                      shift and go to state 143
    expression_statement           shift and go to state 144
    compound_statement             shift and go to state 145
    selection_statement            shift and go to state 146
    iteration_statement            shift and go to state 147
    jump_statement                 shift and go to state 148
    assert_statement               shift and go to state 149
    print_statement                shift and go to state 150
    read_statement                 shift and go to state 151
    expression_opt                 shift and go to state 152
    expression                     shift and go to state 154
    empty                          shift and go to state 162
    assignment_expression          shift and go to state 109
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 111

    (52) statement_list_opt -> empty .

    RBRACE          reduce using rule 52 (statement_list_opt -> empty .)
    LBRACE          reduce using rule 52 (statement_list_opt -> empty .)
    IF              reduce using rule 52 (statement_list_opt -> empty .)
    WHILE           reduce using rule 52 (statement_list_opt -> empty .)
    FOR             reduce using rule 52 (statement_list_opt -> empty .)
    BREAK           reduce using rule 52 (statement_list_opt -> empty .)
    RETURN          reduce using rule 52 (statement_list_opt -> empty .)
    ASSERT          reduce using rule 52 (statement_list_opt -> empty .)
    PRINT           reduce using rule 52 (statement_list_opt -> empty .)
    READ            reduce using rule 52 (statement_list_opt -> empty .)
    INCREASE        reduce using rule 52 (statement_list_opt -> empty .)
    DECREASE        reduce using rule 52 (statement_list_opt -> empty .)
    LPAREN          reduce using rule 52 (statement_list_opt -> empty .)
    ADDRESS         reduce using rule 52 (statement_list_opt -> empty .)
    TIMES           reduce using rule 52 (statement_list_opt -> empty .)
    PLUS            reduce using rule 52 (statement_list_opt -> empty .)
    UMINUS          reduce using rule 52 (statement_list_opt -> empty .)
    NOT             reduce using rule 52 (statement_list_opt -> empty .)
    ID              reduce using rule 52 (statement_list_opt -> empty .)
    STRING          reduce using rule 52 (statement_list_opt -> empty .)
    INT_CONST       reduce using rule 52 (statement_list_opt -> empty .)
    FLOAT_CONST     reduce using rule 52 (statement_list_opt -> empty .)
    CHAR_CONST      reduce using rule 52 (statement_list_opt -> empty .)
    SEMI            reduce using rule 52 (statement_list_opt -> empty .)


state 112

    (111) direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .

    LBRACKET        reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    LPAREN          reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    LBRACE          reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    VOID            reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    INT             reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    FLOAT           reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    CHAR            reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    EQUALS          reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    COMMA           reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    SEMI            reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    RPAREN          reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)


state 113

    (112) direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .

    LBRACKET        reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LPAREN          reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LBRACE          reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    VOID            reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    INT             reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    FLOAT           reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    CHAR            reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    EQUALS          reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)


state 114

    (24) parameter_list -> parameter_list COMMA . parameter_declaration
    (25) parameter_declaration -> . type_specifier declarator
    (116) type_specifier -> . VOID
    (117) type_specifier -> . INT
    (118) type_specifier -> . FLOAT
    (119) type_specifier -> . CHAR

    VOID            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12

    parameter_declaration          shift and go to state 163
    type_specifier                 shift and go to state 75

state 115

    (113) direct_declarator -> direct_declarator LPAREN id_list RPAREN .

    LBRACKET        reduce using rule 113 (direct_declarator -> direct_declarator LPAREN id_list RPAREN .)
    LPAREN          reduce using rule 113 (direct_declarator -> direct_declarator LPAREN id_list RPAREN .)
    LBRACE          reduce using rule 113 (direct_declarator -> direct_declarator LPAREN id_list RPAREN .)
    VOID            reduce using rule 113 (direct_declarator -> direct_declarator LPAREN id_list RPAREN .)
    INT             reduce using rule 113 (direct_declarator -> direct_declarator LPAREN id_list RPAREN .)
    FLOAT           reduce using rule 113 (direct_declarator -> direct_declarator LPAREN id_list RPAREN .)
    CHAR            reduce using rule 113 (direct_declarator -> direct_declarator LPAREN id_list RPAREN .)
    EQUALS          reduce using rule 113 (direct_declarator -> direct_declarator LPAREN id_list RPAREN .)
    COMMA           reduce using rule 113 (direct_declarator -> direct_declarator LPAREN id_list RPAREN .)
    SEMI            reduce using rule 113 (direct_declarator -> direct_declarator LPAREN id_list RPAREN .)
    RPAREN          reduce using rule 113 (direct_declarator -> direct_declarator LPAREN id_list RPAREN .)


state 116

    (114) id_list -> id_list ID .

    RPAREN          reduce using rule 114 (id_list -> id_list ID .)
    ID              reduce using rule 114 (id_list -> id_list ID .)


state 117

    (25) parameter_declaration -> type_specifier declarator .

    RPAREN          reduce using rule 25 (parameter_declaration -> type_specifier declarator .)
    COMMA           reduce using rule 25 (parameter_declaration -> type_specifier declarator .)


state 118

    (15) initializer -> LBRACE initializer_list RBRACE .

    COMMA           reduce using rule 15 (initializer -> LBRACE initializer_list RBRACE .)
    SEMI            reduce using rule 15 (initializer -> LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 15 (initializer -> LBRACE initializer_list RBRACE .)


state 119

    (16) initializer -> LBRACE initializer_list COMMA . RBRACE
    (18) initializer_list -> initializer_list COMMA . initializer
    (14) initializer -> . assignment_expression
    (15) initializer -> . LBRACE initializer_list RBRACE
    (16) initializer -> . LBRACE initializer_list COMMA RBRACE
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    RBRACE          shift and go to state 164
    LBRACE          shift and go to state 42
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    initializer                    shift and go to state 165
    assignment_expression          shift and go to state 41
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 120

    (56) binary_expression -> binary_expression TIMES binary_expression .
    (56) binary_expression -> binary_expression . TIMES binary_expression
    (57) binary_expression -> binary_expression . DIVIDE binary_expression
    (58) binary_expression -> binary_expression . MOD binary_expression
    (59) binary_expression -> binary_expression . PLUS binary_expression
    (60) binary_expression -> binary_expression . MINUS binary_expression
    (61) binary_expression -> binary_expression . LT binary_expression
    (62) binary_expression -> binary_expression . LE binary_expression
    (63) binary_expression -> binary_expression . GT binary_expression
    (64) binary_expression -> binary_expression . GE binary_expression
    (65) binary_expression -> binary_expression . EQ binary_expression
    (66) binary_expression -> binary_expression . NQ binary_expression
    (67) binary_expression -> binary_expression . AND binary_expression
    (68) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 56 (binary_expression -> binary_expression TIMES binary_expression .)
    DIVIDE          reduce using rule 56 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             reduce using rule 56 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS            reduce using rule 56 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 56 (binary_expression -> binary_expression TIMES binary_expression .)
    LT              reduce using rule 56 (binary_expression -> binary_expression TIMES binary_expression .)
    LE              reduce using rule 56 (binary_expression -> binary_expression TIMES binary_expression .)
    GT              reduce using rule 56 (binary_expression -> binary_expression TIMES binary_expression .)
    GE              reduce using rule 56 (binary_expression -> binary_expression TIMES binary_expression .)
    EQ              reduce using rule 56 (binary_expression -> binary_expression TIMES binary_expression .)
    NQ              reduce using rule 56 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             reduce using rule 56 (binary_expression -> binary_expression TIMES binary_expression .)
    OR              reduce using rule 56 (binary_expression -> binary_expression TIMES binary_expression .)
    COMMA           reduce using rule 56 (binary_expression -> binary_expression TIMES binary_expression .)
    SEMI            reduce using rule 56 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACKET        reduce using rule 56 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACE          reduce using rule 56 (binary_expression -> binary_expression TIMES binary_expression .)
    RPAREN          reduce using rule 56 (binary_expression -> binary_expression TIMES binary_expression .)

  ! TIMES           [ shift and go to state 79 ]
  ! DIVIDE          [ shift and go to state 80 ]
  ! MOD             [ shift and go to state 81 ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NQ              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 121

    (57) binary_expression -> binary_expression DIVIDE binary_expression .
    (56) binary_expression -> binary_expression . TIMES binary_expression
    (57) binary_expression -> binary_expression . DIVIDE binary_expression
    (58) binary_expression -> binary_expression . MOD binary_expression
    (59) binary_expression -> binary_expression . PLUS binary_expression
    (60) binary_expression -> binary_expression . MINUS binary_expression
    (61) binary_expression -> binary_expression . LT binary_expression
    (62) binary_expression -> binary_expression . LE binary_expression
    (63) binary_expression -> binary_expression . GT binary_expression
    (64) binary_expression -> binary_expression . GE binary_expression
    (65) binary_expression -> binary_expression . EQ binary_expression
    (66) binary_expression -> binary_expression . NQ binary_expression
    (67) binary_expression -> binary_expression . AND binary_expression
    (68) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 57 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIVIDE          reduce using rule 57 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MOD             reduce using rule 57 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PLUS            reduce using rule 57 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS           reduce using rule 57 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LT              reduce using rule 57 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LE              reduce using rule 57 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GT              reduce using rule 57 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GE              reduce using rule 57 (binary_expression -> binary_expression DIVIDE binary_expression .)
    EQ              reduce using rule 57 (binary_expression -> binary_expression DIVIDE binary_expression .)
    NQ              reduce using rule 57 (binary_expression -> binary_expression DIVIDE binary_expression .)
    AND             reduce using rule 57 (binary_expression -> binary_expression DIVIDE binary_expression .)
    OR              reduce using rule 57 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COMMA           reduce using rule 57 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SEMI            reduce using rule 57 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACKET        reduce using rule 57 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACE          reduce using rule 57 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RPAREN          reduce using rule 57 (binary_expression -> binary_expression DIVIDE binary_expression .)

  ! TIMES           [ shift and go to state 79 ]
  ! DIVIDE          [ shift and go to state 80 ]
  ! MOD             [ shift and go to state 81 ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NQ              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 122

    (58) binary_expression -> binary_expression MOD binary_expression .
    (56) binary_expression -> binary_expression . TIMES binary_expression
    (57) binary_expression -> binary_expression . DIVIDE binary_expression
    (58) binary_expression -> binary_expression . MOD binary_expression
    (59) binary_expression -> binary_expression . PLUS binary_expression
    (60) binary_expression -> binary_expression . MINUS binary_expression
    (61) binary_expression -> binary_expression . LT binary_expression
    (62) binary_expression -> binary_expression . LE binary_expression
    (63) binary_expression -> binary_expression . GT binary_expression
    (64) binary_expression -> binary_expression . GE binary_expression
    (65) binary_expression -> binary_expression . EQ binary_expression
    (66) binary_expression -> binary_expression . NQ binary_expression
    (67) binary_expression -> binary_expression . AND binary_expression
    (68) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 58 (binary_expression -> binary_expression MOD binary_expression .)
    DIVIDE          reduce using rule 58 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 58 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS            reduce using rule 58 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 58 (binary_expression -> binary_expression MOD binary_expression .)
    LT              reduce using rule 58 (binary_expression -> binary_expression MOD binary_expression .)
    LE              reduce using rule 58 (binary_expression -> binary_expression MOD binary_expression .)
    GT              reduce using rule 58 (binary_expression -> binary_expression MOD binary_expression .)
    GE              reduce using rule 58 (binary_expression -> binary_expression MOD binary_expression .)
    EQ              reduce using rule 58 (binary_expression -> binary_expression MOD binary_expression .)
    NQ              reduce using rule 58 (binary_expression -> binary_expression MOD binary_expression .)
    AND             reduce using rule 58 (binary_expression -> binary_expression MOD binary_expression .)
    OR              reduce using rule 58 (binary_expression -> binary_expression MOD binary_expression .)
    COMMA           reduce using rule 58 (binary_expression -> binary_expression MOD binary_expression .)
    SEMI            reduce using rule 58 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACKET        reduce using rule 58 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACE          reduce using rule 58 (binary_expression -> binary_expression MOD binary_expression .)
    RPAREN          reduce using rule 58 (binary_expression -> binary_expression MOD binary_expression .)

  ! TIMES           [ shift and go to state 79 ]
  ! DIVIDE          [ shift and go to state 80 ]
  ! MOD             [ shift and go to state 81 ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NQ              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 123

    (59) binary_expression -> binary_expression PLUS binary_expression .
    (56) binary_expression -> binary_expression . TIMES binary_expression
    (57) binary_expression -> binary_expression . DIVIDE binary_expression
    (58) binary_expression -> binary_expression . MOD binary_expression
    (59) binary_expression -> binary_expression . PLUS binary_expression
    (60) binary_expression -> binary_expression . MINUS binary_expression
    (61) binary_expression -> binary_expression . LT binary_expression
    (62) binary_expression -> binary_expression . LE binary_expression
    (63) binary_expression -> binary_expression . GT binary_expression
    (64) binary_expression -> binary_expression . GE binary_expression
    (65) binary_expression -> binary_expression . EQ binary_expression
    (66) binary_expression -> binary_expression . NQ binary_expression
    (67) binary_expression -> binary_expression . AND binary_expression
    (68) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 59 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 59 (binary_expression -> binary_expression PLUS binary_expression .)
    LT              reduce using rule 59 (binary_expression -> binary_expression PLUS binary_expression .)
    LE              reduce using rule 59 (binary_expression -> binary_expression PLUS binary_expression .)
    GT              reduce using rule 59 (binary_expression -> binary_expression PLUS binary_expression .)
    GE              reduce using rule 59 (binary_expression -> binary_expression PLUS binary_expression .)
    EQ              reduce using rule 59 (binary_expression -> binary_expression PLUS binary_expression .)
    NQ              reduce using rule 59 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 59 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 59 (binary_expression -> binary_expression PLUS binary_expression .)
    COMMA           reduce using rule 59 (binary_expression -> binary_expression PLUS binary_expression .)
    SEMI            reduce using rule 59 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACKET        reduce using rule 59 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACE          reduce using rule 59 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 59 (binary_expression -> binary_expression PLUS binary_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    MOD             shift and go to state 81

  ! TIMES           [ reduce using rule 59 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 59 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! MOD             [ reduce using rule 59 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NQ              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 124

    (60) binary_expression -> binary_expression MINUS binary_expression .
    (56) binary_expression -> binary_expression . TIMES binary_expression
    (57) binary_expression -> binary_expression . DIVIDE binary_expression
    (58) binary_expression -> binary_expression . MOD binary_expression
    (59) binary_expression -> binary_expression . PLUS binary_expression
    (60) binary_expression -> binary_expression . MINUS binary_expression
    (61) binary_expression -> binary_expression . LT binary_expression
    (62) binary_expression -> binary_expression . LE binary_expression
    (63) binary_expression -> binary_expression . GT binary_expression
    (64) binary_expression -> binary_expression . GE binary_expression
    (65) binary_expression -> binary_expression . EQ binary_expression
    (66) binary_expression -> binary_expression . NQ binary_expression
    (67) binary_expression -> binary_expression . AND binary_expression
    (68) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 60 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 60 (binary_expression -> binary_expression MINUS binary_expression .)
    LT              reduce using rule 60 (binary_expression -> binary_expression MINUS binary_expression .)
    LE              reduce using rule 60 (binary_expression -> binary_expression MINUS binary_expression .)
    GT              reduce using rule 60 (binary_expression -> binary_expression MINUS binary_expression .)
    GE              reduce using rule 60 (binary_expression -> binary_expression MINUS binary_expression .)
    EQ              reduce using rule 60 (binary_expression -> binary_expression MINUS binary_expression .)
    NQ              reduce using rule 60 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 60 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 60 (binary_expression -> binary_expression MINUS binary_expression .)
    COMMA           reduce using rule 60 (binary_expression -> binary_expression MINUS binary_expression .)
    SEMI            reduce using rule 60 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACKET        reduce using rule 60 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACE          reduce using rule 60 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 60 (binary_expression -> binary_expression MINUS binary_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    MOD             shift and go to state 81

  ! TIMES           [ reduce using rule 60 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 60 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! MOD             [ reduce using rule 60 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NQ              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 125

    (61) binary_expression -> binary_expression LT binary_expression .
    (56) binary_expression -> binary_expression . TIMES binary_expression
    (57) binary_expression -> binary_expression . DIVIDE binary_expression
    (58) binary_expression -> binary_expression . MOD binary_expression
    (59) binary_expression -> binary_expression . PLUS binary_expression
    (60) binary_expression -> binary_expression . MINUS binary_expression
    (61) binary_expression -> binary_expression . LT binary_expression
    (62) binary_expression -> binary_expression . LE binary_expression
    (63) binary_expression -> binary_expression . GT binary_expression
    (64) binary_expression -> binary_expression . GE binary_expression
    (65) binary_expression -> binary_expression . EQ binary_expression
    (66) binary_expression -> binary_expression . NQ binary_expression
    (67) binary_expression -> binary_expression . AND binary_expression
    (68) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 61 (binary_expression -> binary_expression LT binary_expression .)
    LE              reduce using rule 61 (binary_expression -> binary_expression LT binary_expression .)
    GT              reduce using rule 61 (binary_expression -> binary_expression LT binary_expression .)
    GE              reduce using rule 61 (binary_expression -> binary_expression LT binary_expression .)
    EQ              reduce using rule 61 (binary_expression -> binary_expression LT binary_expression .)
    NQ              reduce using rule 61 (binary_expression -> binary_expression LT binary_expression .)
    AND             reduce using rule 61 (binary_expression -> binary_expression LT binary_expression .)
    OR              reduce using rule 61 (binary_expression -> binary_expression LT binary_expression .)
    COMMA           reduce using rule 61 (binary_expression -> binary_expression LT binary_expression .)
    SEMI            reduce using rule 61 (binary_expression -> binary_expression LT binary_expression .)
    RBRACKET        reduce using rule 61 (binary_expression -> binary_expression LT binary_expression .)
    RBRACE          reduce using rule 61 (binary_expression -> binary_expression LT binary_expression .)
    RPAREN          reduce using rule 61 (binary_expression -> binary_expression LT binary_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    MOD             shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83

  ! TIMES           [ reduce using rule 61 (binary_expression -> binary_expression LT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 61 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MOD             [ reduce using rule 61 (binary_expression -> binary_expression LT binary_expression .) ]
  ! PLUS            [ reduce using rule 61 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MINUS           [ reduce using rule 61 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NQ              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 126

    (62) binary_expression -> binary_expression LE binary_expression .
    (56) binary_expression -> binary_expression . TIMES binary_expression
    (57) binary_expression -> binary_expression . DIVIDE binary_expression
    (58) binary_expression -> binary_expression . MOD binary_expression
    (59) binary_expression -> binary_expression . PLUS binary_expression
    (60) binary_expression -> binary_expression . MINUS binary_expression
    (61) binary_expression -> binary_expression . LT binary_expression
    (62) binary_expression -> binary_expression . LE binary_expression
    (63) binary_expression -> binary_expression . GT binary_expression
    (64) binary_expression -> binary_expression . GE binary_expression
    (65) binary_expression -> binary_expression . EQ binary_expression
    (66) binary_expression -> binary_expression . NQ binary_expression
    (67) binary_expression -> binary_expression . AND binary_expression
    (68) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 62 (binary_expression -> binary_expression LE binary_expression .)
    LE              reduce using rule 62 (binary_expression -> binary_expression LE binary_expression .)
    GT              reduce using rule 62 (binary_expression -> binary_expression LE binary_expression .)
    GE              reduce using rule 62 (binary_expression -> binary_expression LE binary_expression .)
    EQ              reduce using rule 62 (binary_expression -> binary_expression LE binary_expression .)
    NQ              reduce using rule 62 (binary_expression -> binary_expression LE binary_expression .)
    AND             reduce using rule 62 (binary_expression -> binary_expression LE binary_expression .)
    OR              reduce using rule 62 (binary_expression -> binary_expression LE binary_expression .)
    COMMA           reduce using rule 62 (binary_expression -> binary_expression LE binary_expression .)
    SEMI            reduce using rule 62 (binary_expression -> binary_expression LE binary_expression .)
    RBRACKET        reduce using rule 62 (binary_expression -> binary_expression LE binary_expression .)
    RBRACE          reduce using rule 62 (binary_expression -> binary_expression LE binary_expression .)
    RPAREN          reduce using rule 62 (binary_expression -> binary_expression LE binary_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    MOD             shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83

  ! TIMES           [ reduce using rule 62 (binary_expression -> binary_expression LE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 62 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MOD             [ reduce using rule 62 (binary_expression -> binary_expression LE binary_expression .) ]
  ! PLUS            [ reduce using rule 62 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MINUS           [ reduce using rule 62 (binary_expression -> binary_expression LE binary_expression .) ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NQ              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 127

    (63) binary_expression -> binary_expression GT binary_expression .
    (56) binary_expression -> binary_expression . TIMES binary_expression
    (57) binary_expression -> binary_expression . DIVIDE binary_expression
    (58) binary_expression -> binary_expression . MOD binary_expression
    (59) binary_expression -> binary_expression . PLUS binary_expression
    (60) binary_expression -> binary_expression . MINUS binary_expression
    (61) binary_expression -> binary_expression . LT binary_expression
    (62) binary_expression -> binary_expression . LE binary_expression
    (63) binary_expression -> binary_expression . GT binary_expression
    (64) binary_expression -> binary_expression . GE binary_expression
    (65) binary_expression -> binary_expression . EQ binary_expression
    (66) binary_expression -> binary_expression . NQ binary_expression
    (67) binary_expression -> binary_expression . AND binary_expression
    (68) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 63 (binary_expression -> binary_expression GT binary_expression .)
    LE              reduce using rule 63 (binary_expression -> binary_expression GT binary_expression .)
    GT              reduce using rule 63 (binary_expression -> binary_expression GT binary_expression .)
    GE              reduce using rule 63 (binary_expression -> binary_expression GT binary_expression .)
    EQ              reduce using rule 63 (binary_expression -> binary_expression GT binary_expression .)
    NQ              reduce using rule 63 (binary_expression -> binary_expression GT binary_expression .)
    AND             reduce using rule 63 (binary_expression -> binary_expression GT binary_expression .)
    OR              reduce using rule 63 (binary_expression -> binary_expression GT binary_expression .)
    COMMA           reduce using rule 63 (binary_expression -> binary_expression GT binary_expression .)
    SEMI            reduce using rule 63 (binary_expression -> binary_expression GT binary_expression .)
    RBRACKET        reduce using rule 63 (binary_expression -> binary_expression GT binary_expression .)
    RBRACE          reduce using rule 63 (binary_expression -> binary_expression GT binary_expression .)
    RPAREN          reduce using rule 63 (binary_expression -> binary_expression GT binary_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    MOD             shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83

  ! TIMES           [ reduce using rule 63 (binary_expression -> binary_expression GT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 63 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MOD             [ reduce using rule 63 (binary_expression -> binary_expression GT binary_expression .) ]
  ! PLUS            [ reduce using rule 63 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MINUS           [ reduce using rule 63 (binary_expression -> binary_expression GT binary_expression .) ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NQ              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 128

    (64) binary_expression -> binary_expression GE binary_expression .
    (56) binary_expression -> binary_expression . TIMES binary_expression
    (57) binary_expression -> binary_expression . DIVIDE binary_expression
    (58) binary_expression -> binary_expression . MOD binary_expression
    (59) binary_expression -> binary_expression . PLUS binary_expression
    (60) binary_expression -> binary_expression . MINUS binary_expression
    (61) binary_expression -> binary_expression . LT binary_expression
    (62) binary_expression -> binary_expression . LE binary_expression
    (63) binary_expression -> binary_expression . GT binary_expression
    (64) binary_expression -> binary_expression . GE binary_expression
    (65) binary_expression -> binary_expression . EQ binary_expression
    (66) binary_expression -> binary_expression . NQ binary_expression
    (67) binary_expression -> binary_expression . AND binary_expression
    (68) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 64 (binary_expression -> binary_expression GE binary_expression .)
    LE              reduce using rule 64 (binary_expression -> binary_expression GE binary_expression .)
    GT              reduce using rule 64 (binary_expression -> binary_expression GE binary_expression .)
    GE              reduce using rule 64 (binary_expression -> binary_expression GE binary_expression .)
    EQ              reduce using rule 64 (binary_expression -> binary_expression GE binary_expression .)
    NQ              reduce using rule 64 (binary_expression -> binary_expression GE binary_expression .)
    AND             reduce using rule 64 (binary_expression -> binary_expression GE binary_expression .)
    OR              reduce using rule 64 (binary_expression -> binary_expression GE binary_expression .)
    COMMA           reduce using rule 64 (binary_expression -> binary_expression GE binary_expression .)
    SEMI            reduce using rule 64 (binary_expression -> binary_expression GE binary_expression .)
    RBRACKET        reduce using rule 64 (binary_expression -> binary_expression GE binary_expression .)
    RBRACE          reduce using rule 64 (binary_expression -> binary_expression GE binary_expression .)
    RPAREN          reduce using rule 64 (binary_expression -> binary_expression GE binary_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    MOD             shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83

  ! TIMES           [ reduce using rule 64 (binary_expression -> binary_expression GE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 64 (binary_expression -> binary_expression GE binary_expression .) ]
  ! MOD             [ reduce using rule 64 (binary_expression -> binary_expression GE binary_expression .) ]
  ! PLUS            [ reduce using rule 64 (binary_expression -> binary_expression GE binary_expression .) ]
  ! MINUS           [ reduce using rule 64 (binary_expression -> binary_expression GE binary_expression .) ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NQ              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 129

    (65) binary_expression -> binary_expression EQ binary_expression .
    (56) binary_expression -> binary_expression . TIMES binary_expression
    (57) binary_expression -> binary_expression . DIVIDE binary_expression
    (58) binary_expression -> binary_expression . MOD binary_expression
    (59) binary_expression -> binary_expression . PLUS binary_expression
    (60) binary_expression -> binary_expression . MINUS binary_expression
    (61) binary_expression -> binary_expression . LT binary_expression
    (62) binary_expression -> binary_expression . LE binary_expression
    (63) binary_expression -> binary_expression . GT binary_expression
    (64) binary_expression -> binary_expression . GE binary_expression
    (65) binary_expression -> binary_expression . EQ binary_expression
    (66) binary_expression -> binary_expression . NQ binary_expression
    (67) binary_expression -> binary_expression . AND binary_expression
    (68) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 65 (binary_expression -> binary_expression EQ binary_expression .)
    LE              reduce using rule 65 (binary_expression -> binary_expression EQ binary_expression .)
    GT              reduce using rule 65 (binary_expression -> binary_expression EQ binary_expression .)
    GE              reduce using rule 65 (binary_expression -> binary_expression EQ binary_expression .)
    EQ              reduce using rule 65 (binary_expression -> binary_expression EQ binary_expression .)
    NQ              reduce using rule 65 (binary_expression -> binary_expression EQ binary_expression .)
    AND             reduce using rule 65 (binary_expression -> binary_expression EQ binary_expression .)
    OR              reduce using rule 65 (binary_expression -> binary_expression EQ binary_expression .)
    COMMA           reduce using rule 65 (binary_expression -> binary_expression EQ binary_expression .)
    SEMI            reduce using rule 65 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACKET        reduce using rule 65 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACE          reduce using rule 65 (binary_expression -> binary_expression EQ binary_expression .)
    RPAREN          reduce using rule 65 (binary_expression -> binary_expression EQ binary_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    MOD             shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83

  ! TIMES           [ reduce using rule 65 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! DIVIDE          [ reduce using rule 65 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MOD             [ reduce using rule 65 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! PLUS            [ reduce using rule 65 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MINUS           [ reduce using rule 65 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NQ              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 130

    (66) binary_expression -> binary_expression NQ binary_expression .
    (56) binary_expression -> binary_expression . TIMES binary_expression
    (57) binary_expression -> binary_expression . DIVIDE binary_expression
    (58) binary_expression -> binary_expression . MOD binary_expression
    (59) binary_expression -> binary_expression . PLUS binary_expression
    (60) binary_expression -> binary_expression . MINUS binary_expression
    (61) binary_expression -> binary_expression . LT binary_expression
    (62) binary_expression -> binary_expression . LE binary_expression
    (63) binary_expression -> binary_expression . GT binary_expression
    (64) binary_expression -> binary_expression . GE binary_expression
    (65) binary_expression -> binary_expression . EQ binary_expression
    (66) binary_expression -> binary_expression . NQ binary_expression
    (67) binary_expression -> binary_expression . AND binary_expression
    (68) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 66 (binary_expression -> binary_expression NQ binary_expression .)
    LE              reduce using rule 66 (binary_expression -> binary_expression NQ binary_expression .)
    GT              reduce using rule 66 (binary_expression -> binary_expression NQ binary_expression .)
    GE              reduce using rule 66 (binary_expression -> binary_expression NQ binary_expression .)
    EQ              reduce using rule 66 (binary_expression -> binary_expression NQ binary_expression .)
    NQ              reduce using rule 66 (binary_expression -> binary_expression NQ binary_expression .)
    AND             reduce using rule 66 (binary_expression -> binary_expression NQ binary_expression .)
    OR              reduce using rule 66 (binary_expression -> binary_expression NQ binary_expression .)
    COMMA           reduce using rule 66 (binary_expression -> binary_expression NQ binary_expression .)
    SEMI            reduce using rule 66 (binary_expression -> binary_expression NQ binary_expression .)
    RBRACKET        reduce using rule 66 (binary_expression -> binary_expression NQ binary_expression .)
    RBRACE          reduce using rule 66 (binary_expression -> binary_expression NQ binary_expression .)
    RPAREN          reduce using rule 66 (binary_expression -> binary_expression NQ binary_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    MOD             shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83

  ! TIMES           [ reduce using rule 66 (binary_expression -> binary_expression NQ binary_expression .) ]
  ! DIVIDE          [ reduce using rule 66 (binary_expression -> binary_expression NQ binary_expression .) ]
  ! MOD             [ reduce using rule 66 (binary_expression -> binary_expression NQ binary_expression .) ]
  ! PLUS            [ reduce using rule 66 (binary_expression -> binary_expression NQ binary_expression .) ]
  ! MINUS           [ reduce using rule 66 (binary_expression -> binary_expression NQ binary_expression .) ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NQ              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 131

    (67) binary_expression -> binary_expression AND binary_expression .
    (56) binary_expression -> binary_expression . TIMES binary_expression
    (57) binary_expression -> binary_expression . DIVIDE binary_expression
    (58) binary_expression -> binary_expression . MOD binary_expression
    (59) binary_expression -> binary_expression . PLUS binary_expression
    (60) binary_expression -> binary_expression . MINUS binary_expression
    (61) binary_expression -> binary_expression . LT binary_expression
    (62) binary_expression -> binary_expression . LE binary_expression
    (63) binary_expression -> binary_expression . GT binary_expression
    (64) binary_expression -> binary_expression . GE binary_expression
    (65) binary_expression -> binary_expression . EQ binary_expression
    (66) binary_expression -> binary_expression . NQ binary_expression
    (67) binary_expression -> binary_expression . AND binary_expression
    (68) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 67 (binary_expression -> binary_expression AND binary_expression .)
    LE              reduce using rule 67 (binary_expression -> binary_expression AND binary_expression .)
    GT              reduce using rule 67 (binary_expression -> binary_expression AND binary_expression .)
    GE              reduce using rule 67 (binary_expression -> binary_expression AND binary_expression .)
    EQ              reduce using rule 67 (binary_expression -> binary_expression AND binary_expression .)
    NQ              reduce using rule 67 (binary_expression -> binary_expression AND binary_expression .)
    AND             reduce using rule 67 (binary_expression -> binary_expression AND binary_expression .)
    OR              reduce using rule 67 (binary_expression -> binary_expression AND binary_expression .)
    COMMA           reduce using rule 67 (binary_expression -> binary_expression AND binary_expression .)
    SEMI            reduce using rule 67 (binary_expression -> binary_expression AND binary_expression .)
    RBRACKET        reduce using rule 67 (binary_expression -> binary_expression AND binary_expression .)
    RBRACE          reduce using rule 67 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 67 (binary_expression -> binary_expression AND binary_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    MOD             shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83

  ! TIMES           [ reduce using rule 67 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 67 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MOD             [ reduce using rule 67 (binary_expression -> binary_expression AND binary_expression .) ]
  ! PLUS            [ reduce using rule 67 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MINUS           [ reduce using rule 67 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NQ              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 132

    (68) binary_expression -> binary_expression OR binary_expression .
    (56) binary_expression -> binary_expression . TIMES binary_expression
    (57) binary_expression -> binary_expression . DIVIDE binary_expression
    (58) binary_expression -> binary_expression . MOD binary_expression
    (59) binary_expression -> binary_expression . PLUS binary_expression
    (60) binary_expression -> binary_expression . MINUS binary_expression
    (61) binary_expression -> binary_expression . LT binary_expression
    (62) binary_expression -> binary_expression . LE binary_expression
    (63) binary_expression -> binary_expression . GT binary_expression
    (64) binary_expression -> binary_expression . GE binary_expression
    (65) binary_expression -> binary_expression . EQ binary_expression
    (66) binary_expression -> binary_expression . NQ binary_expression
    (67) binary_expression -> binary_expression . AND binary_expression
    (68) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 68 (binary_expression -> binary_expression OR binary_expression .)
    LE              reduce using rule 68 (binary_expression -> binary_expression OR binary_expression .)
    GT              reduce using rule 68 (binary_expression -> binary_expression OR binary_expression .)
    GE              reduce using rule 68 (binary_expression -> binary_expression OR binary_expression .)
    EQ              reduce using rule 68 (binary_expression -> binary_expression OR binary_expression .)
    NQ              reduce using rule 68 (binary_expression -> binary_expression OR binary_expression .)
    AND             reduce using rule 68 (binary_expression -> binary_expression OR binary_expression .)
    OR              reduce using rule 68 (binary_expression -> binary_expression OR binary_expression .)
    COMMA           reduce using rule 68 (binary_expression -> binary_expression OR binary_expression .)
    SEMI            reduce using rule 68 (binary_expression -> binary_expression OR binary_expression .)
    RBRACKET        reduce using rule 68 (binary_expression -> binary_expression OR binary_expression .)
    RBRACE          reduce using rule 68 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 68 (binary_expression -> binary_expression OR binary_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    MOD             shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83

  ! TIMES           [ reduce using rule 68 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 68 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MOD             [ reduce using rule 68 (binary_expression -> binary_expression OR binary_expression .) ]
  ! PLUS            [ reduce using rule 68 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MINUS           [ reduce using rule 68 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NQ              [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 133

    (54) assignment_expression -> unary_expression assignment_operator assignment_expression .

    COMMA           reduce using rule 54 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI            reduce using rule 54 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 54 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 54 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 54 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 134

    (74) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (31) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 166
    COMMA           shift and go to state 141


state 135

    (75) postfix_expression -> postfix_expression LPAREN argument_expression_opt . RPAREN

    RPAREN          shift and go to state 167


state 136

    (84) argument_expression_opt -> argument_expression .
    (87) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          reduce using rule 84 (argument_expression_opt -> argument_expression .)
    COMMA           shift and go to state 168


state 137

    (85) argument_expression_opt -> empty .

    RPAREN          reduce using rule 85 (argument_expression_opt -> empty .)


state 138

    (86) argument_expression -> assignment_expression .

    COMMA           reduce using rule 86 (argument_expression -> assignment_expression .)
    RPAREN          reduce using rule 86 (argument_expression -> assignment_expression .)


state 139

    (79) cast_expression -> LPAREN type_specifier RPAREN . cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    LPAREN          shift and go to state 52
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    cast_expression                shift and go to state 169
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 140

    (83) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    INCREASE        reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    DECREASE        reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    EQTIMES         reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    EQDIV           reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    EQMOD           reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    EQPLUS          reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    EQMINUS         reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    NQ              reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 83 (primary_expression -> LPAREN expression RPAREN .)


state 141

    (31) expression -> expression COMMA . assignment_expression
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    assignment_expression          shift and go to state 170
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 142

    (26) compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .

    VOID            reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    INT             reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    FLOAT           reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    CHAR            reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    TIMES           reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    ID              reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    LPAREN          reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    $end            reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    RBRACE          reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    LBRACE          reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    IF              reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    WHILE           reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    FOR             reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    BREAK           reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    RETURN          reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    ASSERT          reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    PRINT           reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    READ            reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    INCREASE        reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    DECREASE        reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    ADDRESS         reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    PLUS            reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    UMINUS          reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    NOT             reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    STRING          reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    INT_CONST       reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    FLOAT_CONST     reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    CHAR_CONST      reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    SEMI            reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)
    ELSE            reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE .)


state 143

    (51) statement_list_opt -> statement_list_opt statement .

    RBRACE          reduce using rule 51 (statement_list_opt -> statement_list_opt statement .)
    LBRACE          reduce using rule 51 (statement_list_opt -> statement_list_opt statement .)
    IF              reduce using rule 51 (statement_list_opt -> statement_list_opt statement .)
    WHILE           reduce using rule 51 (statement_list_opt -> statement_list_opt statement .)
    FOR             reduce using rule 51 (statement_list_opt -> statement_list_opt statement .)
    BREAK           reduce using rule 51 (statement_list_opt -> statement_list_opt statement .)
    RETURN          reduce using rule 51 (statement_list_opt -> statement_list_opt statement .)
    ASSERT          reduce using rule 51 (statement_list_opt -> statement_list_opt statement .)
    PRINT           reduce using rule 51 (statement_list_opt -> statement_list_opt statement .)
    READ            reduce using rule 51 (statement_list_opt -> statement_list_opt statement .)
    INCREASE        reduce using rule 51 (statement_list_opt -> statement_list_opt statement .)
    DECREASE        reduce using rule 51 (statement_list_opt -> statement_list_opt statement .)
    LPAREN          reduce using rule 51 (statement_list_opt -> statement_list_opt statement .)
    ADDRESS         reduce using rule 51 (statement_list_opt -> statement_list_opt statement .)
    TIMES           reduce using rule 51 (statement_list_opt -> statement_list_opt statement .)
    PLUS            reduce using rule 51 (statement_list_opt -> statement_list_opt statement .)
    UMINUS          reduce using rule 51 (statement_list_opt -> statement_list_opt statement .)
    NOT             reduce using rule 51 (statement_list_opt -> statement_list_opt statement .)
    ID              reduce using rule 51 (statement_list_opt -> statement_list_opt statement .)
    STRING          reduce using rule 51 (statement_list_opt -> statement_list_opt statement .)
    INT_CONST       reduce using rule 51 (statement_list_opt -> statement_list_opt statement .)
    FLOAT_CONST     reduce using rule 51 (statement_list_opt -> statement_list_opt statement .)
    CHAR_CONST      reduce using rule 51 (statement_list_opt -> statement_list_opt statement .)
    SEMI            reduce using rule 51 (statement_list_opt -> statement_list_opt statement .)


state 144

    (43) statement -> expression_statement .

    RBRACE          reduce using rule 43 (statement -> expression_statement .)
    LBRACE          reduce using rule 43 (statement -> expression_statement .)
    IF              reduce using rule 43 (statement -> expression_statement .)
    WHILE           reduce using rule 43 (statement -> expression_statement .)
    FOR             reduce using rule 43 (statement -> expression_statement .)
    BREAK           reduce using rule 43 (statement -> expression_statement .)
    RETURN          reduce using rule 43 (statement -> expression_statement .)
    ASSERT          reduce using rule 43 (statement -> expression_statement .)
    PRINT           reduce using rule 43 (statement -> expression_statement .)
    READ            reduce using rule 43 (statement -> expression_statement .)
    INCREASE        reduce using rule 43 (statement -> expression_statement .)
    DECREASE        reduce using rule 43 (statement -> expression_statement .)
    LPAREN          reduce using rule 43 (statement -> expression_statement .)
    ADDRESS         reduce using rule 43 (statement -> expression_statement .)
    TIMES           reduce using rule 43 (statement -> expression_statement .)
    PLUS            reduce using rule 43 (statement -> expression_statement .)
    UMINUS          reduce using rule 43 (statement -> expression_statement .)
    NOT             reduce using rule 43 (statement -> expression_statement .)
    ID              reduce using rule 43 (statement -> expression_statement .)
    STRING          reduce using rule 43 (statement -> expression_statement .)
    INT_CONST       reduce using rule 43 (statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 43 (statement -> expression_statement .)
    CHAR_CONST      reduce using rule 43 (statement -> expression_statement .)
    SEMI            reduce using rule 43 (statement -> expression_statement .)
    ELSE            reduce using rule 43 (statement -> expression_statement .)


state 145

    (44) statement -> compound_statement .

    RBRACE          reduce using rule 44 (statement -> compound_statement .)
    LBRACE          reduce using rule 44 (statement -> compound_statement .)
    IF              reduce using rule 44 (statement -> compound_statement .)
    WHILE           reduce using rule 44 (statement -> compound_statement .)
    FOR             reduce using rule 44 (statement -> compound_statement .)
    BREAK           reduce using rule 44 (statement -> compound_statement .)
    RETURN          reduce using rule 44 (statement -> compound_statement .)
    ASSERT          reduce using rule 44 (statement -> compound_statement .)
    PRINT           reduce using rule 44 (statement -> compound_statement .)
    READ            reduce using rule 44 (statement -> compound_statement .)
    INCREASE        reduce using rule 44 (statement -> compound_statement .)
    DECREASE        reduce using rule 44 (statement -> compound_statement .)
    LPAREN          reduce using rule 44 (statement -> compound_statement .)
    ADDRESS         reduce using rule 44 (statement -> compound_statement .)
    TIMES           reduce using rule 44 (statement -> compound_statement .)
    PLUS            reduce using rule 44 (statement -> compound_statement .)
    UMINUS          reduce using rule 44 (statement -> compound_statement .)
    NOT             reduce using rule 44 (statement -> compound_statement .)
    ID              reduce using rule 44 (statement -> compound_statement .)
    STRING          reduce using rule 44 (statement -> compound_statement .)
    INT_CONST       reduce using rule 44 (statement -> compound_statement .)
    FLOAT_CONST     reduce using rule 44 (statement -> compound_statement .)
    CHAR_CONST      reduce using rule 44 (statement -> compound_statement .)
    SEMI            reduce using rule 44 (statement -> compound_statement .)
    ELSE            reduce using rule 44 (statement -> compound_statement .)


state 146

    (45) statement -> selection_statement .

    RBRACE          reduce using rule 45 (statement -> selection_statement .)
    LBRACE          reduce using rule 45 (statement -> selection_statement .)
    IF              reduce using rule 45 (statement -> selection_statement .)
    WHILE           reduce using rule 45 (statement -> selection_statement .)
    FOR             reduce using rule 45 (statement -> selection_statement .)
    BREAK           reduce using rule 45 (statement -> selection_statement .)
    RETURN          reduce using rule 45 (statement -> selection_statement .)
    ASSERT          reduce using rule 45 (statement -> selection_statement .)
    PRINT           reduce using rule 45 (statement -> selection_statement .)
    READ            reduce using rule 45 (statement -> selection_statement .)
    INCREASE        reduce using rule 45 (statement -> selection_statement .)
    DECREASE        reduce using rule 45 (statement -> selection_statement .)
    LPAREN          reduce using rule 45 (statement -> selection_statement .)
    ADDRESS         reduce using rule 45 (statement -> selection_statement .)
    TIMES           reduce using rule 45 (statement -> selection_statement .)
    PLUS            reduce using rule 45 (statement -> selection_statement .)
    UMINUS          reduce using rule 45 (statement -> selection_statement .)
    NOT             reduce using rule 45 (statement -> selection_statement .)
    ID              reduce using rule 45 (statement -> selection_statement .)
    STRING          reduce using rule 45 (statement -> selection_statement .)
    INT_CONST       reduce using rule 45 (statement -> selection_statement .)
    FLOAT_CONST     reduce using rule 45 (statement -> selection_statement .)
    CHAR_CONST      reduce using rule 45 (statement -> selection_statement .)
    SEMI            reduce using rule 45 (statement -> selection_statement .)
    ELSE            reduce using rule 45 (statement -> selection_statement .)


state 147

    (46) statement -> iteration_statement .

    RBRACE          reduce using rule 46 (statement -> iteration_statement .)
    LBRACE          reduce using rule 46 (statement -> iteration_statement .)
    IF              reduce using rule 46 (statement -> iteration_statement .)
    WHILE           reduce using rule 46 (statement -> iteration_statement .)
    FOR             reduce using rule 46 (statement -> iteration_statement .)
    BREAK           reduce using rule 46 (statement -> iteration_statement .)
    RETURN          reduce using rule 46 (statement -> iteration_statement .)
    ASSERT          reduce using rule 46 (statement -> iteration_statement .)
    PRINT           reduce using rule 46 (statement -> iteration_statement .)
    READ            reduce using rule 46 (statement -> iteration_statement .)
    INCREASE        reduce using rule 46 (statement -> iteration_statement .)
    DECREASE        reduce using rule 46 (statement -> iteration_statement .)
    LPAREN          reduce using rule 46 (statement -> iteration_statement .)
    ADDRESS         reduce using rule 46 (statement -> iteration_statement .)
    TIMES           reduce using rule 46 (statement -> iteration_statement .)
    PLUS            reduce using rule 46 (statement -> iteration_statement .)
    UMINUS          reduce using rule 46 (statement -> iteration_statement .)
    NOT             reduce using rule 46 (statement -> iteration_statement .)
    ID              reduce using rule 46 (statement -> iteration_statement .)
    STRING          reduce using rule 46 (statement -> iteration_statement .)
    INT_CONST       reduce using rule 46 (statement -> iteration_statement .)
    FLOAT_CONST     reduce using rule 46 (statement -> iteration_statement .)
    CHAR_CONST      reduce using rule 46 (statement -> iteration_statement .)
    SEMI            reduce using rule 46 (statement -> iteration_statement .)
    ELSE            reduce using rule 46 (statement -> iteration_statement .)


state 148

    (47) statement -> jump_statement .

    RBRACE          reduce using rule 47 (statement -> jump_statement .)
    LBRACE          reduce using rule 47 (statement -> jump_statement .)
    IF              reduce using rule 47 (statement -> jump_statement .)
    WHILE           reduce using rule 47 (statement -> jump_statement .)
    FOR             reduce using rule 47 (statement -> jump_statement .)
    BREAK           reduce using rule 47 (statement -> jump_statement .)
    RETURN          reduce using rule 47 (statement -> jump_statement .)
    ASSERT          reduce using rule 47 (statement -> jump_statement .)
    PRINT           reduce using rule 47 (statement -> jump_statement .)
    READ            reduce using rule 47 (statement -> jump_statement .)
    INCREASE        reduce using rule 47 (statement -> jump_statement .)
    DECREASE        reduce using rule 47 (statement -> jump_statement .)
    LPAREN          reduce using rule 47 (statement -> jump_statement .)
    ADDRESS         reduce using rule 47 (statement -> jump_statement .)
    TIMES           reduce using rule 47 (statement -> jump_statement .)
    PLUS            reduce using rule 47 (statement -> jump_statement .)
    UMINUS          reduce using rule 47 (statement -> jump_statement .)
    NOT             reduce using rule 47 (statement -> jump_statement .)
    ID              reduce using rule 47 (statement -> jump_statement .)
    STRING          reduce using rule 47 (statement -> jump_statement .)
    INT_CONST       reduce using rule 47 (statement -> jump_statement .)
    FLOAT_CONST     reduce using rule 47 (statement -> jump_statement .)
    CHAR_CONST      reduce using rule 47 (statement -> jump_statement .)
    SEMI            reduce using rule 47 (statement -> jump_statement .)
    ELSE            reduce using rule 47 (statement -> jump_statement .)


state 149

    (48) statement -> assert_statement .

    RBRACE          reduce using rule 48 (statement -> assert_statement .)
    LBRACE          reduce using rule 48 (statement -> assert_statement .)
    IF              reduce using rule 48 (statement -> assert_statement .)
    WHILE           reduce using rule 48 (statement -> assert_statement .)
    FOR             reduce using rule 48 (statement -> assert_statement .)
    BREAK           reduce using rule 48 (statement -> assert_statement .)
    RETURN          reduce using rule 48 (statement -> assert_statement .)
    ASSERT          reduce using rule 48 (statement -> assert_statement .)
    PRINT           reduce using rule 48 (statement -> assert_statement .)
    READ            reduce using rule 48 (statement -> assert_statement .)
    INCREASE        reduce using rule 48 (statement -> assert_statement .)
    DECREASE        reduce using rule 48 (statement -> assert_statement .)
    LPAREN          reduce using rule 48 (statement -> assert_statement .)
    ADDRESS         reduce using rule 48 (statement -> assert_statement .)
    TIMES           reduce using rule 48 (statement -> assert_statement .)
    PLUS            reduce using rule 48 (statement -> assert_statement .)
    UMINUS          reduce using rule 48 (statement -> assert_statement .)
    NOT             reduce using rule 48 (statement -> assert_statement .)
    ID              reduce using rule 48 (statement -> assert_statement .)
    STRING          reduce using rule 48 (statement -> assert_statement .)
    INT_CONST       reduce using rule 48 (statement -> assert_statement .)
    FLOAT_CONST     reduce using rule 48 (statement -> assert_statement .)
    CHAR_CONST      reduce using rule 48 (statement -> assert_statement .)
    SEMI            reduce using rule 48 (statement -> assert_statement .)
    ELSE            reduce using rule 48 (statement -> assert_statement .)


state 150

    (49) statement -> print_statement .

    RBRACE          reduce using rule 49 (statement -> print_statement .)
    LBRACE          reduce using rule 49 (statement -> print_statement .)
    IF              reduce using rule 49 (statement -> print_statement .)
    WHILE           reduce using rule 49 (statement -> print_statement .)
    FOR             reduce using rule 49 (statement -> print_statement .)
    BREAK           reduce using rule 49 (statement -> print_statement .)
    RETURN          reduce using rule 49 (statement -> print_statement .)
    ASSERT          reduce using rule 49 (statement -> print_statement .)
    PRINT           reduce using rule 49 (statement -> print_statement .)
    READ            reduce using rule 49 (statement -> print_statement .)
    INCREASE        reduce using rule 49 (statement -> print_statement .)
    DECREASE        reduce using rule 49 (statement -> print_statement .)
    LPAREN          reduce using rule 49 (statement -> print_statement .)
    ADDRESS         reduce using rule 49 (statement -> print_statement .)
    TIMES           reduce using rule 49 (statement -> print_statement .)
    PLUS            reduce using rule 49 (statement -> print_statement .)
    UMINUS          reduce using rule 49 (statement -> print_statement .)
    NOT             reduce using rule 49 (statement -> print_statement .)
    ID              reduce using rule 49 (statement -> print_statement .)
    STRING          reduce using rule 49 (statement -> print_statement .)
    INT_CONST       reduce using rule 49 (statement -> print_statement .)
    FLOAT_CONST     reduce using rule 49 (statement -> print_statement .)
    CHAR_CONST      reduce using rule 49 (statement -> print_statement .)
    SEMI            reduce using rule 49 (statement -> print_statement .)
    ELSE            reduce using rule 49 (statement -> print_statement .)


state 151

    (50) statement -> read_statement .

    RBRACE          reduce using rule 50 (statement -> read_statement .)
    LBRACE          reduce using rule 50 (statement -> read_statement .)
    IF              reduce using rule 50 (statement -> read_statement .)
    WHILE           reduce using rule 50 (statement -> read_statement .)
    FOR             reduce using rule 50 (statement -> read_statement .)
    BREAK           reduce using rule 50 (statement -> read_statement .)
    RETURN          reduce using rule 50 (statement -> read_statement .)
    ASSERT          reduce using rule 50 (statement -> read_statement .)
    PRINT           reduce using rule 50 (statement -> read_statement .)
    READ            reduce using rule 50 (statement -> read_statement .)
    INCREASE        reduce using rule 50 (statement -> read_statement .)
    DECREASE        reduce using rule 50 (statement -> read_statement .)
    LPAREN          reduce using rule 50 (statement -> read_statement .)
    ADDRESS         reduce using rule 50 (statement -> read_statement .)
    TIMES           reduce using rule 50 (statement -> read_statement .)
    PLUS            reduce using rule 50 (statement -> read_statement .)
    UMINUS          reduce using rule 50 (statement -> read_statement .)
    NOT             reduce using rule 50 (statement -> read_statement .)
    ID              reduce using rule 50 (statement -> read_statement .)
    STRING          reduce using rule 50 (statement -> read_statement .)
    INT_CONST       reduce using rule 50 (statement -> read_statement .)
    FLOAT_CONST     reduce using rule 50 (statement -> read_statement .)
    CHAR_CONST      reduce using rule 50 (statement -> read_statement .)
    SEMI            reduce using rule 50 (statement -> read_statement .)
    ELSE            reduce using rule 50 (statement -> read_statement .)


state 152

    (27) expression_statement -> expression_opt . SEMI

    SEMI            shift and go to state 171


state 153

    (32) selection_statement -> IF . LPAREN expression RPAREN statement
    (33) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 172


state 154

    (28) expression_opt -> expression .
    (31) expression -> expression . COMMA assignment_expression

    SEMI            reduce using rule 28 (expression_opt -> expression .)
    RPAREN          reduce using rule 28 (expression_opt -> expression .)
    COMMA           shift and go to state 141


state 155

    (34) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 173


state 156

    (35) iteration_statement -> FOR . LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (36) iteration_statement -> FOR . LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement

    LPAREN          shift and go to state 174


state 157

    (37) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 175


state 158

    (38) jump_statement -> RETURN . expression SEMI
    (39) jump_statement -> RETURN . SEMI
    (30) expression -> . assignment_expression
    (31) expression -> . expression COMMA assignment_expression
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    SEMI            shift and go to state 177
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    expression                     shift and go to state 176
    assignment_expression          shift and go to state 109
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 159

    (40) assert_statement -> ASSERT . expression SEMI
    (30) expression -> . assignment_expression
    (31) expression -> . expression COMMA assignment_expression
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    expression                     shift and go to state 178
    assignment_expression          shift and go to state 109
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 160

    (41) print_statement -> PRINT . LPAREN expression_opt RPAREN SEMI

    LPAREN          shift and go to state 179


state 161

    (42) read_statement -> READ . LPAREN argument_expression RPAREN SEMI

    LPAREN          shift and go to state 180


state 162

    (29) expression_opt -> empty .

    SEMI            reduce using rule 29 (expression_opt -> empty .)
    RPAREN          reduce using rule 29 (expression_opt -> empty .)


state 163

    (24) parameter_list -> parameter_list COMMA parameter_declaration .

    RPAREN          reduce using rule 24 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 24 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 164

    (16) initializer -> LBRACE initializer_list COMMA RBRACE .

    COMMA           reduce using rule 16 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    SEMI            reduce using rule 16 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 16 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 165

    (18) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 18 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 18 (initializer_list -> initializer_list COMMA initializer .)


state 166

    (74) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    INCREASE        reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DECREASE        reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQTIMES         reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQDIV           reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQMOD           reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQPLUS          reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQMINUS         reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NQ              reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 74 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 167

    (75) postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .

    LBRACKET        reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    LPAREN          reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    INCREASE        reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    DECREASE        reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    EQUALS          reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    EQTIMES         reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    EQDIV           reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    EQMOD           reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    EQPLUS          reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    EQMINUS         reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    TIMES           reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    DIVIDE          reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    MOD             reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    PLUS            reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    MINUS           reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    LT              reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    LE              reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    GT              reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    GE              reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    EQ              reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    NQ              reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    AND             reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    OR              reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    COMMA           reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    SEMI            reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    RBRACKET        reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    RBRACE          reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    RPAREN          reduce using rule 75 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)


state 168

    (87) argument_expression -> argument_expression COMMA . assignment_expression
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    assignment_expression          shift and go to state 181
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 169

    (79) cast_expression -> LPAREN type_specifier RPAREN cast_expression .

    TIMES           reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIVIDE          reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MOD             reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUS            reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUS           reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LT              reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LE              reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    GT              reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    GE              reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQ              reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    NQ              reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    AND             reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    OR              reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    COMMA           reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    SEMI            reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACKET        reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACE          reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQUALS          reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQTIMES         reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQDIV           reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQMOD           reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQPLUS          reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQMINUS         reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RPAREN          reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)


state 170

    (31) expression -> expression COMMA assignment_expression .

    RPAREN          reduce using rule 31 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 31 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 31 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 31 (expression -> expression COMMA assignment_expression .)


state 171

    (27) expression_statement -> expression_opt SEMI .

    RBRACE          reduce using rule 27 (expression_statement -> expression_opt SEMI .)
    LBRACE          reduce using rule 27 (expression_statement -> expression_opt SEMI .)
    IF              reduce using rule 27 (expression_statement -> expression_opt SEMI .)
    WHILE           reduce using rule 27 (expression_statement -> expression_opt SEMI .)
    FOR             reduce using rule 27 (expression_statement -> expression_opt SEMI .)
    BREAK           reduce using rule 27 (expression_statement -> expression_opt SEMI .)
    RETURN          reduce using rule 27 (expression_statement -> expression_opt SEMI .)
    ASSERT          reduce using rule 27 (expression_statement -> expression_opt SEMI .)
    PRINT           reduce using rule 27 (expression_statement -> expression_opt SEMI .)
    READ            reduce using rule 27 (expression_statement -> expression_opt SEMI .)
    INCREASE        reduce using rule 27 (expression_statement -> expression_opt SEMI .)
    DECREASE        reduce using rule 27 (expression_statement -> expression_opt SEMI .)
    LPAREN          reduce using rule 27 (expression_statement -> expression_opt SEMI .)
    ADDRESS         reduce using rule 27 (expression_statement -> expression_opt SEMI .)
    TIMES           reduce using rule 27 (expression_statement -> expression_opt SEMI .)
    PLUS            reduce using rule 27 (expression_statement -> expression_opt SEMI .)
    UMINUS          reduce using rule 27 (expression_statement -> expression_opt SEMI .)
    NOT             reduce using rule 27 (expression_statement -> expression_opt SEMI .)
    ID              reduce using rule 27 (expression_statement -> expression_opt SEMI .)
    STRING          reduce using rule 27 (expression_statement -> expression_opt SEMI .)
    INT_CONST       reduce using rule 27 (expression_statement -> expression_opt SEMI .)
    FLOAT_CONST     reduce using rule 27 (expression_statement -> expression_opt SEMI .)
    CHAR_CONST      reduce using rule 27 (expression_statement -> expression_opt SEMI .)
    SEMI            reduce using rule 27 (expression_statement -> expression_opt SEMI .)
    ELSE            reduce using rule 27 (expression_statement -> expression_opt SEMI .)


state 172

    (32) selection_statement -> IF LPAREN . expression RPAREN statement
    (33) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (30) expression -> . assignment_expression
    (31) expression -> . expression COMMA assignment_expression
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    expression                     shift and go to state 182
    assignment_expression          shift and go to state 109
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 173

    (34) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (30) expression -> . assignment_expression
    (31) expression -> . expression COMMA assignment_expression
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    expression                     shift and go to state 183
    assignment_expression          shift and go to state 109
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 174

    (35) iteration_statement -> FOR LPAREN . init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (36) iteration_statement -> FOR LPAREN . type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (12) init_declarator -> . declarator
    (13) init_declarator -> . declarator EQUALS initializer
    (116) type_specifier -> . VOID
    (117) type_specifier -> . INT
    (118) type_specifier -> . FLOAT
    (119) type_specifier -> . CHAR
    (22) declarator -> . pointer_opt direct_declarator
    (105) pointer_opt -> . pointer
    (106) pointer_opt -> . empty
    (107) pointer -> . TIMES pointer
    (108) pointer -> . TIMES
    (120) empty -> .

    VOID            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    TIMES           shift and go to state 16
    ID              reduce using rule 120 (empty -> .)
    LPAREN          reduce using rule 120 (empty -> .)

    init_declarator                shift and go to state 184
    type_specifier                 shift and go to state 185
    declarator                     shift and go to state 64
    pointer_opt                    shift and go to state 13
    pointer                        shift and go to state 14
    empty                          shift and go to state 15

state 175

    (37) jump_statement -> BREAK SEMI .

    RBRACE          reduce using rule 37 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 37 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 37 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 37 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 37 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 37 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 37 (jump_statement -> BREAK SEMI .)
    ASSERT          reduce using rule 37 (jump_statement -> BREAK SEMI .)
    PRINT           reduce using rule 37 (jump_statement -> BREAK SEMI .)
    READ            reduce using rule 37 (jump_statement -> BREAK SEMI .)
    INCREASE        reduce using rule 37 (jump_statement -> BREAK SEMI .)
    DECREASE        reduce using rule 37 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 37 (jump_statement -> BREAK SEMI .)
    ADDRESS         reduce using rule 37 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 37 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 37 (jump_statement -> BREAK SEMI .)
    UMINUS          reduce using rule 37 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 37 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 37 (jump_statement -> BREAK SEMI .)
    STRING          reduce using rule 37 (jump_statement -> BREAK SEMI .)
    INT_CONST       reduce using rule 37 (jump_statement -> BREAK SEMI .)
    FLOAT_CONST     reduce using rule 37 (jump_statement -> BREAK SEMI .)
    CHAR_CONST      reduce using rule 37 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 37 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 37 (jump_statement -> BREAK SEMI .)


state 176

    (38) jump_statement -> RETURN expression . SEMI
    (31) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 186
    COMMA           shift and go to state 141


state 177

    (39) jump_statement -> RETURN SEMI .

    RBRACE          reduce using rule 39 (jump_statement -> RETURN SEMI .)
    LBRACE          reduce using rule 39 (jump_statement -> RETURN SEMI .)
    IF              reduce using rule 39 (jump_statement -> RETURN SEMI .)
    WHILE           reduce using rule 39 (jump_statement -> RETURN SEMI .)
    FOR             reduce using rule 39 (jump_statement -> RETURN SEMI .)
    BREAK           reduce using rule 39 (jump_statement -> RETURN SEMI .)
    RETURN          reduce using rule 39 (jump_statement -> RETURN SEMI .)
    ASSERT          reduce using rule 39 (jump_statement -> RETURN SEMI .)
    PRINT           reduce using rule 39 (jump_statement -> RETURN SEMI .)
    READ            reduce using rule 39 (jump_statement -> RETURN SEMI .)
    INCREASE        reduce using rule 39 (jump_statement -> RETURN SEMI .)
    DECREASE        reduce using rule 39 (jump_statement -> RETURN SEMI .)
    LPAREN          reduce using rule 39 (jump_statement -> RETURN SEMI .)
    ADDRESS         reduce using rule 39 (jump_statement -> RETURN SEMI .)
    TIMES           reduce using rule 39 (jump_statement -> RETURN SEMI .)
    PLUS            reduce using rule 39 (jump_statement -> RETURN SEMI .)
    UMINUS          reduce using rule 39 (jump_statement -> RETURN SEMI .)
    NOT             reduce using rule 39 (jump_statement -> RETURN SEMI .)
    ID              reduce using rule 39 (jump_statement -> RETURN SEMI .)
    STRING          reduce using rule 39 (jump_statement -> RETURN SEMI .)
    INT_CONST       reduce using rule 39 (jump_statement -> RETURN SEMI .)
    FLOAT_CONST     reduce using rule 39 (jump_statement -> RETURN SEMI .)
    CHAR_CONST      reduce using rule 39 (jump_statement -> RETURN SEMI .)
    SEMI            reduce using rule 39 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 39 (jump_statement -> RETURN SEMI .)


state 178

    (40) assert_statement -> ASSERT expression . SEMI
    (31) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 187
    COMMA           shift and go to state 141


state 179

    (41) print_statement -> PRINT LPAREN . expression_opt RPAREN SEMI
    (28) expression_opt -> . expression
    (29) expression_opt -> . empty
    (30) expression -> . assignment_expression
    (31) expression -> . expression COMMA assignment_expression
    (120) empty -> .
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    RPAREN          reduce using rule 120 (empty -> .)
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    expression_opt                 shift and go to state 188
    expression                     shift and go to state 154
    empty                          shift and go to state 162
    assignment_expression          shift and go to state 109
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 180

    (42) read_statement -> READ LPAREN . argument_expression RPAREN SEMI
    (86) argument_expression -> . assignment_expression
    (87) argument_expression -> . argument_expression COMMA assignment_expression
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    argument_expression            shift and go to state 189
    assignment_expression          shift and go to state 138
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 181

    (87) argument_expression -> argument_expression COMMA assignment_expression .

    COMMA           reduce using rule 87 (argument_expression -> argument_expression COMMA assignment_expression .)
    RPAREN          reduce using rule 87 (argument_expression -> argument_expression COMMA assignment_expression .)


state 182

    (32) selection_statement -> IF LPAREN expression . RPAREN statement
    (33) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (31) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 190
    COMMA           shift and go to state 141


state 183

    (34) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (31) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 191
    COMMA           shift and go to state 141


state 184

    (35) iteration_statement -> FOR LPAREN init_declarator . SEMI expression_opt SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 192


state 185

    (36) iteration_statement -> FOR LPAREN type_specifier . init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (12) init_declarator -> . declarator
    (13) init_declarator -> . declarator EQUALS initializer
    (22) declarator -> . pointer_opt direct_declarator
    (105) pointer_opt -> . pointer
    (106) pointer_opt -> . empty
    (107) pointer -> . TIMES pointer
    (108) pointer -> . TIMES
    (120) empty -> .

    TIMES           shift and go to state 16
    ID              reduce using rule 120 (empty -> .)
    LPAREN          reduce using rule 120 (empty -> .)

    init_declarator                shift and go to state 193
    declarator                     shift and go to state 64
    pointer_opt                    shift and go to state 13
    pointer                        shift and go to state 14
    empty                          shift and go to state 15

state 186

    (38) jump_statement -> RETURN expression SEMI .

    RBRACE          reduce using rule 38 (jump_statement -> RETURN expression SEMI .)
    LBRACE          reduce using rule 38 (jump_statement -> RETURN expression SEMI .)
    IF              reduce using rule 38 (jump_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 38 (jump_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 38 (jump_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 38 (jump_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 38 (jump_statement -> RETURN expression SEMI .)
    ASSERT          reduce using rule 38 (jump_statement -> RETURN expression SEMI .)
    PRINT           reduce using rule 38 (jump_statement -> RETURN expression SEMI .)
    READ            reduce using rule 38 (jump_statement -> RETURN expression SEMI .)
    INCREASE        reduce using rule 38 (jump_statement -> RETURN expression SEMI .)
    DECREASE        reduce using rule 38 (jump_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 38 (jump_statement -> RETURN expression SEMI .)
    ADDRESS         reduce using rule 38 (jump_statement -> RETURN expression SEMI .)
    TIMES           reduce using rule 38 (jump_statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 38 (jump_statement -> RETURN expression SEMI .)
    UMINUS          reduce using rule 38 (jump_statement -> RETURN expression SEMI .)
    NOT             reduce using rule 38 (jump_statement -> RETURN expression SEMI .)
    ID              reduce using rule 38 (jump_statement -> RETURN expression SEMI .)
    STRING          reduce using rule 38 (jump_statement -> RETURN expression SEMI .)
    INT_CONST       reduce using rule 38 (jump_statement -> RETURN expression SEMI .)
    FLOAT_CONST     reduce using rule 38 (jump_statement -> RETURN expression SEMI .)
    CHAR_CONST      reduce using rule 38 (jump_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 38 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 38 (jump_statement -> RETURN expression SEMI .)


state 187

    (40) assert_statement -> ASSERT expression SEMI .

    RBRACE          reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)
    LBRACE          reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)
    IF              reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)
    WHILE           reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)
    FOR             reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)
    BREAK           reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)
    RETURN          reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)
    ASSERT          reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)
    PRINT           reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)
    READ            reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)
    INCREASE        reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)
    DECREASE        reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)
    LPAREN          reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)
    ADDRESS         reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)
    TIMES           reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)
    PLUS            reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)
    UMINUS          reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)
    NOT             reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)
    ID              reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)
    STRING          reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)
    INT_CONST       reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)
    FLOAT_CONST     reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)
    CHAR_CONST      reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)
    SEMI            reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)
    ELSE            reduce using rule 40 (assert_statement -> ASSERT expression SEMI .)


state 188

    (41) print_statement -> PRINT LPAREN expression_opt . RPAREN SEMI

    RPAREN          shift and go to state 194


state 189

    (42) read_statement -> READ LPAREN argument_expression . RPAREN SEMI
    (87) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          shift and go to state 195
    COMMA           shift and go to state 168


state 190

    (32) selection_statement -> IF LPAREN expression RPAREN . statement
    (33) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (43) statement -> . expression_statement
    (44) statement -> . compound_statement
    (45) statement -> . selection_statement
    (46) statement -> . iteration_statement
    (47) statement -> . jump_statement
    (48) statement -> . assert_statement
    (49) statement -> . print_statement
    (50) statement -> . read_statement
    (27) expression_statement -> . expression_opt SEMI
    (26) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE
    (32) selection_statement -> . IF LPAREN expression RPAREN statement
    (33) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (34) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (35) iteration_statement -> . FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (36) iteration_statement -> . FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (37) jump_statement -> . BREAK SEMI
    (38) jump_statement -> . RETURN expression SEMI
    (39) jump_statement -> . RETURN SEMI
    (40) assert_statement -> . ASSERT expression SEMI
    (41) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (42) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (28) expression_opt -> . expression
    (29) expression_opt -> . empty
    (30) expression -> . assignment_expression
    (31) expression -> . expression COMMA assignment_expression
    (120) empty -> .
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    LBRACE          shift and go to state 34
    IF              shift and go to state 153
    WHILE           shift and go to state 155
    FOR             shift and go to state 156
    BREAK           shift and go to state 157
    RETURN          shift and go to state 158
    ASSERT          shift and go to state 159
    PRINT           shift and go to state 160
    READ            shift and go to state 161
    SEMI            reduce using rule 120 (empty -> .)
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    expression                     shift and go to state 154
    statement                      shift and go to state 196
    expression_statement           shift and go to state 144
    compound_statement             shift and go to state 145
    selection_statement            shift and go to state 146
    iteration_statement            shift and go to state 147
    jump_statement                 shift and go to state 148
    assert_statement               shift and go to state 149
    print_statement                shift and go to state 150
    read_statement                 shift and go to state 151
    expression_opt                 shift and go to state 152
    empty                          shift and go to state 162
    assignment_expression          shift and go to state 109
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 191

    (34) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (43) statement -> . expression_statement
    (44) statement -> . compound_statement
    (45) statement -> . selection_statement
    (46) statement -> . iteration_statement
    (47) statement -> . jump_statement
    (48) statement -> . assert_statement
    (49) statement -> . print_statement
    (50) statement -> . read_statement
    (27) expression_statement -> . expression_opt SEMI
    (26) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE
    (32) selection_statement -> . IF LPAREN expression RPAREN statement
    (33) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (34) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (35) iteration_statement -> . FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (36) iteration_statement -> . FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (37) jump_statement -> . BREAK SEMI
    (38) jump_statement -> . RETURN expression SEMI
    (39) jump_statement -> . RETURN SEMI
    (40) assert_statement -> . ASSERT expression SEMI
    (41) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (42) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (28) expression_opt -> . expression
    (29) expression_opt -> . empty
    (30) expression -> . assignment_expression
    (31) expression -> . expression COMMA assignment_expression
    (120) empty -> .
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    LBRACE          shift and go to state 34
    IF              shift and go to state 153
    WHILE           shift and go to state 155
    FOR             shift and go to state 156
    BREAK           shift and go to state 157
    RETURN          shift and go to state 158
    ASSERT          shift and go to state 159
    PRINT           shift and go to state 160
    READ            shift and go to state 161
    SEMI            reduce using rule 120 (empty -> .)
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    expression                     shift and go to state 154
    statement                      shift and go to state 197
    expression_statement           shift and go to state 144
    compound_statement             shift and go to state 145
    selection_statement            shift and go to state 146
    iteration_statement            shift and go to state 147
    jump_statement                 shift and go to state 148
    assert_statement               shift and go to state 149
    print_statement                shift and go to state 150
    read_statement                 shift and go to state 151
    expression_opt                 shift and go to state 152
    empty                          shift and go to state 162
    assignment_expression          shift and go to state 109
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 192

    (35) iteration_statement -> FOR LPAREN init_declarator SEMI . expression_opt SEMI expression_opt RPAREN statement
    (28) expression_opt -> . expression
    (29) expression_opt -> . empty
    (30) expression -> . assignment_expression
    (31) expression -> . expression COMMA assignment_expression
    (120) empty -> .
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    SEMI            reduce using rule 120 (empty -> .)
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    expression_opt                 shift and go to state 198
    expression                     shift and go to state 154
    empty                          shift and go to state 162
    assignment_expression          shift and go to state 109
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 193

    (36) iteration_statement -> FOR LPAREN type_specifier init_declarator . SEMI expression_opt SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 199


state 194

    (41) print_statement -> PRINT LPAREN expression_opt RPAREN . SEMI

    SEMI            shift and go to state 200


state 195

    (42) read_statement -> READ LPAREN argument_expression RPAREN . SEMI

    SEMI            shift and go to state 201


state 196

    (32) selection_statement -> IF LPAREN expression RPAREN statement .
    (33) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBRACE          reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .)
    READ            reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INCREASE        reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DECREASE        reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ADDRESS         reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UMINUS          reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 202

  ! ELSE            [ reduce using rule 32 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 197

    (34) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    READ            reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INCREASE        reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DECREASE        reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ADDRESS         reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UMINUS          reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 34 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 198

    (35) iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 203


state 199

    (36) iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI . expression_opt SEMI expression_opt RPAREN statement
    (28) expression_opt -> . expression
    (29) expression_opt -> . empty
    (30) expression -> . assignment_expression
    (31) expression -> . expression COMMA assignment_expression
    (120) empty -> .
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    SEMI            reduce using rule 120 (empty -> .)
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    expression_opt                 shift and go to state 204
    expression                     shift and go to state 154
    empty                          shift and go to state 162
    assignment_expression          shift and go to state 109
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 200

    (41) print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .

    RBRACE          reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    LBRACE          reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    IF              reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    WHILE           reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    FOR             reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    BREAK           reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    RETURN          reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ASSERT          reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    PRINT           reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    READ            reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    INCREASE        reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    DECREASE        reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    LPAREN          reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ADDRESS         reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    TIMES           reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    PLUS            reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    UMINUS          reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    NOT             reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ID              reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    STRING          reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    INT_CONST       reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    CHAR_CONST      reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    SEMI            reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ELSE            reduce using rule 41 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)


state 201

    (42) read_statement -> READ LPAREN argument_expression RPAREN SEMI .

    RBRACE          reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    LBRACE          reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    IF              reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    WHILE           reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FOR             reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    BREAK           reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    RETURN          reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ASSERT          reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PRINT           reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    READ            reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    INCREASE        reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    DECREASE        reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    LPAREN          reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ADDRESS         reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    TIMES           reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PLUS            reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    UMINUS          reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    NOT             reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ID              reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    STRING          reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    INT_CONST       reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    CHAR_CONST      reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    SEMI            reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ELSE            reduce using rule 42 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)


state 202

    (33) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (43) statement -> . expression_statement
    (44) statement -> . compound_statement
    (45) statement -> . selection_statement
    (46) statement -> . iteration_statement
    (47) statement -> . jump_statement
    (48) statement -> . assert_statement
    (49) statement -> . print_statement
    (50) statement -> . read_statement
    (27) expression_statement -> . expression_opt SEMI
    (26) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE
    (32) selection_statement -> . IF LPAREN expression RPAREN statement
    (33) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (34) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (35) iteration_statement -> . FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (36) iteration_statement -> . FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (37) jump_statement -> . BREAK SEMI
    (38) jump_statement -> . RETURN expression SEMI
    (39) jump_statement -> . RETURN SEMI
    (40) assert_statement -> . ASSERT expression SEMI
    (41) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (42) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (28) expression_opt -> . expression
    (29) expression_opt -> . empty
    (30) expression -> . assignment_expression
    (31) expression -> . expression COMMA assignment_expression
    (120) empty -> .
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    LBRACE          shift and go to state 34
    IF              shift and go to state 153
    WHILE           shift and go to state 155
    FOR             shift and go to state 156
    BREAK           shift and go to state 157
    RETURN          shift and go to state 158
    ASSERT          shift and go to state 159
    PRINT           shift and go to state 160
    READ            shift and go to state 161
    SEMI            reduce using rule 120 (empty -> .)
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    expression                     shift and go to state 154
    statement                      shift and go to state 205
    expression_statement           shift and go to state 144
    compound_statement             shift and go to state 145
    selection_statement            shift and go to state 146
    iteration_statement            shift and go to state 147
    jump_statement                 shift and go to state 148
    assert_statement               shift and go to state 149
    print_statement                shift and go to state 150
    read_statement                 shift and go to state 151
    expression_opt                 shift and go to state 152
    empty                          shift and go to state 162
    assignment_expression          shift and go to state 109
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 203

    (35) iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI . expression_opt RPAREN statement
    (28) expression_opt -> . expression
    (29) expression_opt -> . empty
    (30) expression -> . assignment_expression
    (31) expression -> . expression COMMA assignment_expression
    (120) empty -> .
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    RPAREN          reduce using rule 120 (empty -> .)
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    expression_opt                 shift and go to state 206
    expression                     shift and go to state 154
    empty                          shift and go to state 162
    assignment_expression          shift and go to state 109
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 204

    (36) iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 207


state 205

    (33) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RBRACE          reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASSERT          reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PRINT           reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    READ            reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INCREASE        reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DECREASE        reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ADDRESS         reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UMINUS          reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST       reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT_CONST     reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR_CONST      reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 33 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 206

    (35) iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 208


state 207

    (36) iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI . expression_opt RPAREN statement
    (28) expression_opt -> . expression
    (29) expression_opt -> . empty
    (30) expression -> . assignment_expression
    (31) expression -> . expression COMMA assignment_expression
    (120) empty -> .
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    RPAREN          reduce using rule 120 (empty -> .)
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    expression_opt                 shift and go to state 209
    expression                     shift and go to state 154
    empty                          shift and go to state 162
    assignment_expression          shift and go to state 109
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 208

    (35) iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN . statement
    (43) statement -> . expression_statement
    (44) statement -> . compound_statement
    (45) statement -> . selection_statement
    (46) statement -> . iteration_statement
    (47) statement -> . jump_statement
    (48) statement -> . assert_statement
    (49) statement -> . print_statement
    (50) statement -> . read_statement
    (27) expression_statement -> . expression_opt SEMI
    (26) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE
    (32) selection_statement -> . IF LPAREN expression RPAREN statement
    (33) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (34) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (35) iteration_statement -> . FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (36) iteration_statement -> . FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (37) jump_statement -> . BREAK SEMI
    (38) jump_statement -> . RETURN expression SEMI
    (39) jump_statement -> . RETURN SEMI
    (40) assert_statement -> . ASSERT expression SEMI
    (41) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (42) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (28) expression_opt -> . expression
    (29) expression_opt -> . empty
    (30) expression -> . assignment_expression
    (31) expression -> . expression COMMA assignment_expression
    (120) empty -> .
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    LBRACE          shift and go to state 34
    IF              shift and go to state 153
    WHILE           shift and go to state 155
    FOR             shift and go to state 156
    BREAK           shift and go to state 157
    RETURN          shift and go to state 158
    ASSERT          shift and go to state 159
    PRINT           shift and go to state 160
    READ            shift and go to state 161
    SEMI            reduce using rule 120 (empty -> .)
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    expression_opt                 shift and go to state 152
    statement                      shift and go to state 210
    expression_statement           shift and go to state 144
    compound_statement             shift and go to state 145
    selection_statement            shift and go to state 146
    iteration_statement            shift and go to state 147
    jump_statement                 shift and go to state 148
    assert_statement               shift and go to state 149
    print_statement                shift and go to state 150
    read_statement                 shift and go to state 151
    expression                     shift and go to state 154
    empty                          shift and go to state 162
    assignment_expression          shift and go to state 109
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 209

    (36) iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 211


state 210

    (35) iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .

    RBRACE          reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LBRACE          reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ASSERT          reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PRINT           reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    READ            reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INCREASE        reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    DECREASE        reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ADDRESS         reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    UMINUS          reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ID              reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STRING          reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST       reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_CONST      reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 35 (iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)


state 211

    (36) iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN . statement
    (43) statement -> . expression_statement
    (44) statement -> . compound_statement
    (45) statement -> . selection_statement
    (46) statement -> . iteration_statement
    (47) statement -> . jump_statement
    (48) statement -> . assert_statement
    (49) statement -> . print_statement
    (50) statement -> . read_statement
    (27) expression_statement -> . expression_opt SEMI
    (26) compound_statement -> . LBRACE declaration_list_opt statement_list_opt RBRACE
    (32) selection_statement -> . IF LPAREN expression RPAREN statement
    (33) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (34) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (35) iteration_statement -> . FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (36) iteration_statement -> . FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement
    (37) jump_statement -> . BREAK SEMI
    (38) jump_statement -> . RETURN expression SEMI
    (39) jump_statement -> . RETURN SEMI
    (40) assert_statement -> . ASSERT expression SEMI
    (41) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (42) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (28) expression_opt -> . expression
    (29) expression_opt -> . empty
    (30) expression -> . assignment_expression
    (31) expression -> . expression COMMA assignment_expression
    (120) empty -> .
    (53) assignment_expression -> . binary_expression
    (54) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (55) binary_expression -> . cast_expression
    (56) binary_expression -> . binary_expression TIMES binary_expression
    (57) binary_expression -> . binary_expression DIVIDE binary_expression
    (58) binary_expression -> . binary_expression MOD binary_expression
    (59) binary_expression -> . binary_expression PLUS binary_expression
    (60) binary_expression -> . binary_expression MINUS binary_expression
    (61) binary_expression -> . binary_expression LT binary_expression
    (62) binary_expression -> . binary_expression LE binary_expression
    (63) binary_expression -> . binary_expression GT binary_expression
    (64) binary_expression -> . binary_expression GE binary_expression
    (65) binary_expression -> . binary_expression EQ binary_expression
    (66) binary_expression -> . binary_expression NQ binary_expression
    (67) binary_expression -> . binary_expression AND binary_expression
    (68) binary_expression -> . binary_expression OR binary_expression
    (69) unary_expression -> . postfix_expression
    (70) unary_expression -> . INCREASE unary_expression
    (71) unary_expression -> . DECREASE unary_expression
    (72) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (73) postfix_expression -> . primary_expression
    (74) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (75) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (76) postfix_expression -> . postfix_expression INCREASE
    (77) postfix_expression -> . postfix_expression DECREASE
    (97) unary_operator -> . ADDRESS
    (98) unary_operator -> . TIMES
    (99) unary_operator -> . PLUS
    (100) unary_operator -> . UMINUS
    (101) unary_operator -> . NOT
    (80) primary_expression -> . ID
    (81) primary_expression -> . constant
    (82) primary_expression -> . STRING
    (83) primary_expression -> . LPAREN expression RPAREN
    (102) constant -> . INT_CONST
    (103) constant -> . FLOAT_CONST
    (104) constant -> . CHAR_CONST

    LBRACE          shift and go to state 34
    IF              shift and go to state 153
    WHILE           shift and go to state 155
    FOR             shift and go to state 156
    BREAK           shift and go to state 157
    RETURN          shift and go to state 158
    ASSERT          shift and go to state 159
    PRINT           shift and go to state 160
    READ            shift and go to state 161
    SEMI            reduce using rule 120 (empty -> .)
    INCREASE        shift and go to state 49
    DECREASE        shift and go to state 50
    LPAREN          shift and go to state 52
    ADDRESS         shift and go to state 54
    TIMES           shift and go to state 46
    PLUS            shift and go to state 47
    UMINUS          shift and go to state 55
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING          shift and go to state 59
    INT_CONST       shift and go to state 60
    FLOAT_CONST     shift and go to state 61
    CHAR_CONST      shift and go to state 62

    expression_opt                 shift and go to state 152
    statement                      shift and go to state 212
    expression_statement           shift and go to state 144
    compound_statement             shift and go to state 145
    selection_statement            shift and go to state 146
    iteration_statement            shift and go to state 147
    jump_statement                 shift and go to state 148
    assert_statement               shift and go to state 149
    print_statement                shift and go to state 150
    read_statement                 shift and go to state 151
    expression                     shift and go to state 154
    empty                          shift and go to state 162
    assignment_expression          shift and go to state 109
    binary_expression              shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 53
    constant                       shift and go to state 58

state 212

    (36) iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .

    RBRACE          reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LBRACE          reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ASSERT          reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PRINT           reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    READ            reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INCREASE        reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    DECREASE        reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ADDRESS         reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    UMINUS          reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ID              reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STRING          reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST       reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_CONST      reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 36 (iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 196 resolved as shift
