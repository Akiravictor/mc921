
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDEQUALSleftEQNQleftGTGELTLEleftPLUSMINUSleftTIMESDIVIDEMODADDRESS AND ASSERT BREAK CHAR CHAR_CONST COMMA DECREASE DIVIDE ELSE EQ EQDIV EQMINUS EQMOD EQPLUS EQTIMES EQUALS FLOAT FLOAT_CONST FOR GE GT ID IF INCREASE INT INT_CONST LBRACE LBRACKET LE LPAREN LT MINUS MOD NOT NQ OR PLUS PRINT RBRACE RBRACKET READ RETURN RPAREN SEMI STRING TIMES UMINUS VOID WHILE program : global_declaration_list_opt\n         global_declaration_list_opt : global_declaration global_declaration_list_opt\n                                        | empty\n         global_declaration : function_definition\n                              | declaration\n         function_definition : type_specifier declarator compound_statement\n                                | declarator declaration_list_opt  compound_statement\n         declaration_list_opt : declaration declaration_list_opt\n                                 | empty\n         declarator : direct_declarator\n         direct_declarator : ID\n                              | LPAREN declarator RPAREN\n         direct_declarator : direct_declarator LBRACKET constant_expression_opt RBRACKET  direct_declarator : direct_declarator LPAREN parameter_list RPAREN  direct_declarator : direct_declarator LPAREN identifier_list_opt RPAREN  constant_expression_opt : constant_expression\n                                    | empty\n         identifier_list_opt : ID identifier_list_opt\n                                | empty\n         constant_expression : binary_expression binary_expression : cast_expression\n                              | binary_expression TIMES binary_expression\n                              | binary_expression DIVIDE binary_expression\n                              | binary_expression MOD binary_expression\n                              | binary_expression PLUS binary_expression\n                              | binary_expression MINUS binary_expression\n                              | binary_expression LT binary_expression\n                              | binary_expression EQUALS binary_expression\n                              | binary_expression EQ binary_expression\n                              | binary_expression LE binary_expression\n                              | binary_expression GT binary_expression\n                              | binary_expression GE binary_expression\n                              | binary_expression NQ binary_expression\n                              | binary_expression AND binary_expression\n                              | binary_expression OR binary_expression\n        cast_expression : unary_expression\n                            | LPAREN type_specifier RPAREN cast_expression\n         unary_expression : postfix_expression\n                             | INCREASE unary_expression\n                             | DECREASE unary_expression\n                             | unary_operator cast_expression\n         postfix_expression : primary_expression\n                               | postfix_expression LBRACKET expression RBRACKET\n                               | postfix_expression LPAREN argument_expression_opt RPAREN\n                               | postfix_expression INCREASE\n                               | postfix_expression DECREASE\n         argument_expression_opt : argument_expression\n                                    | empty\n         primary_expression : ID\n                               | constant\n                               | STRING\n                               | LPAREN expression RPAREN\n         constant : INT_CONST\n                     | FLOAT_CONST\n                     | CHAR_CONST\n         expression : assignment_expression\n                       | expression COMMA assignment_expression\n         argument_expression : assignment_expression\n                                | argument_expression COMMA assignment_expression\n         assignment_expression : binary_expression\n                                  | unary_expression assignment_operator assignment_expression\n        assignment_operator :  EQTIMES\n                               | EQDIV\n                               | EQMOD\n                               | EQPLUS\n                               | EQMINUS\n         unary_operator : ADDRESS\n                           | TIMES\n                           | PLUS\n                           | MINUS\n                           | NOT\n         type_specifier : VOID\n                           | CHAR\n                           | INT\n                           | FLOAT\n         parameter_list : parameter_declaration\n                           | parameter_list COMMA parameter_declaration\n         parameter_declaration : type_specifier declarator  declaration : type_specifier init_declarator_list_opt SEMI init_declarator_list_opt : init_declarator_list\n                                     | empty\n         init_declarator_list : init_declarator\n                                 | init_declarator_list COMMA init_declarator\n         init_declarator : declarator\n                            | declarator EQUALS initializer\n         initializer : assignment_expression\n                        | LBRACE initializer_list RBRACE\n                        | LBRACE initializer_list COMMA RBRACE\n         initializer_list : initializer\n                             | initializer_list COMMA initializer\n         compound_statement : LBRACE declaration_list_opt statement_list_opt RBRACE  statement_list_opt : statement statement_list_opt\n                               | empty\n         statement : expression_statement\n                      | compound_statement\n                      | selection_statement\n                      | iteration_statement\n                      | jump_statement\n                      | assert_statement\n                      | print_statement\n                      | read_statement\n         expression_statement : expression_opt SEMI expression_opt : expression\n                           | empty\n         selection_statement : IF LPAREN expression RPAREN statement\n                                | IF LPAREN expression RPAREN statement ELSE statement\n         iteration_statement : WHILE LPAREN expression RPAREN statement\n                                | FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement\n                                | FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement\n         jump_statement : BREAK SEMI\n                           | RETURN SEMI\n                           | RETURN expression SEMI\n         assert_statement : ASSERT expression SEMI  print_statement : PRINT LPAREN expression_opt RPAREN SEMI read_statement : READ LPAREN argument_expression RPAREN SEMIempty :'
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,16,29,32,34,160,],[-116,0,-1,-116,-3,-4,-5,-2,-6,-79,-7,-91,]),'VOID':([0,3,5,6,8,13,14,23,27,29,31,32,34,46,66,74,100,101,102,160,165,],[9,9,-4,-5,9,-10,-11,9,9,-6,9,-79,-7,9,-12,-13,-14,9,-15,-91,9,]),'CHAR':([0,3,5,6,8,13,14,23,27,29,31,32,34,46,66,74,100,101,102,160,165,],[10,10,-4,-5,10,-10,-11,10,10,-6,10,-79,-7,10,-12,-13,-14,10,-15,-91,10,]),'INT':([0,3,5,6,8,13,14,23,27,29,31,32,34,46,66,74,100,101,102,160,165,],[11,11,-4,-5,11,-10,-11,11,11,-6,11,-79,-7,11,-12,-13,-14,11,-15,-91,11,]),'FLOAT':([0,3,5,6,8,13,14,23,27,29,31,32,34,46,66,74,100,101,102,160,165,],[12,12,-4,-5,12,-10,-11,12,12,-6,12,-79,-7,12,-12,-13,-14,12,-15,-91,12,]),'ID':([0,3,5,6,7,9,10,11,12,15,23,24,25,26,27,29,30,31,32,33,34,35,42,43,44,46,48,49,50,52,53,63,65,69,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,97,107,108,109,110,111,112,114,116,117,118,119,120,121,122,123,130,131,148,150,158,160,162,163,164,165,166,167,170,171,176,182,183,184,189,190,191,195,196,198,199,200,201,202,204,206,207,209,210,211,],[14,14,-4,-5,14,-72,-73,-74,-75,14,-116,-9,14,54,63,-6,54,-116,-79,14,-7,-8,-68,-69,-70,54,54,54,54,-67,-71,63,14,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-62,-63,-64,-65,-66,54,-94,-95,-96,-97,-98,-99,-100,-101,54,54,54,54,54,-91,-102,54,54,14,-110,-111,54,54,54,14,-112,-113,54,54,54,-105,-107,54,-114,-115,54,54,-106,54,54,-108,54,-109,]),'LPAREN':([0,3,5,6,7,9,10,11,12,13,14,15,23,24,25,26,29,30,31,32,33,34,35,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,65,66,69,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,94,95,97,100,102,107,108,109,110,111,112,114,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,148,149,150,158,160,162,163,164,165,166,167,170,171,174,175,176,182,183,184,189,190,191,195,196,198,199,200,201,202,204,206,207,209,210,211,],[15,15,-4,-5,15,-72,-73,-74,-75,27,-11,15,-116,-9,15,46,-6,46,-116,-79,15,-7,-8,-68,-69,-70,46,93,97,97,46,-42,-67,-71,-49,-50,-51,-53,-54,-55,15,-12,46,46,-13,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-45,-46,46,-14,-15,46,-62,-63,-64,-65,-66,46,-94,-95,-96,-97,-98,-99,-100,-101,163,164,165,46,46,170,171,46,-52,46,46,-91,-102,46,46,15,-110,-111,46,46,-43,-44,46,15,-112,-113,46,46,46,-105,-107,46,-114,-115,46,46,-106,46,46,-108,46,-109,]),'SEMI':([7,9,10,11,12,13,14,17,18,19,20,21,23,24,25,31,32,35,36,41,45,47,51,54,55,56,57,58,59,66,67,68,70,71,72,73,74,91,94,95,96,98,99,100,102,114,115,116,117,118,119,120,121,122,123,124,126,129,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,157,159,160,162,166,167,168,169,172,173,174,175,177,181,183,184,186,189,190,191,192,193,194,195,196,197,198,199,200,201,203,204,207,209,210,211,],[-116,-72,-73,-74,-75,-10,-11,-84,32,-80,-81,-82,-116,-9,-116,-116,-79,-8,-84,-21,-36,-38,-42,-49,-50,-51,-53,-54,-55,-12,-85,-86,-60,-36,-116,-83,-13,-56,-45,-46,-39,-40,-41,-14,-15,-116,-104,-94,-95,-96,-97,-98,-99,-100,-101,162,-103,166,167,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-52,-87,-61,-91,-102,-110,-111,183,184,-37,-57,-43,-44,-88,191,-112,-113,-104,-116,-116,-116,198,199,200,-105,-107,202,-116,-114,-115,-116,206,-106,-116,-108,-116,-109,]),'LBRACE':([8,13,14,17,22,23,24,30,31,32,35,66,69,72,74,100,102,114,116,117,118,119,120,121,122,123,158,160,162,166,167,183,184,189,190,195,196,199,200,201,204,207,209,210,211,],[-116,-10,-11,31,31,-116,-9,69,-116,-79,-8,-12,69,31,-13,-14,-15,31,-94,-95,-96,-97,-98,-99,-100,-101,69,-91,-102,-110,-111,-112,-113,31,31,-105,-107,-114,-115,31,-106,31,-108,31,-109,]),'RPAREN':([9,10,11,12,13,14,27,28,41,45,47,51,54,55,56,57,58,59,60,61,62,63,64,66,70,71,74,89,90,91,93,94,95,96,98,99,100,102,103,104,126,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,152,153,154,155,156,159,170,172,173,174,175,179,180,185,186,187,188,202,205,206,208,],[-72,-73,-74,-75,-10,-11,-116,66,-21,-36,-38,-42,-49,-50,-51,-53,-54,-55,100,102,-76,-116,-19,-12,-60,-36,-13,148,149,-56,-116,-45,-46,-39,-40,-41,-14,-15,-18,-78,-103,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-52,175,-47,-48,-58,-77,-61,-116,-37,-57,-43,-44,189,190,193,-104,194,-59,-116,207,-116,210,]),'EQUALS':([13,14,17,36,40,41,45,47,51,54,55,56,57,58,59,66,70,71,74,94,95,96,98,99,100,102,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,172,174,175,],[-10,-11,30,30,81,-21,-36,-38,-42,-49,-50,-51,-53,-54,-55,-12,81,-36,-13,-45,-46,-39,-40,-41,-14,-15,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,81,-52,-37,-43,-44,]),'COMMA':([13,14,17,19,21,36,41,45,47,51,54,55,56,57,58,59,60,62,66,67,68,70,71,73,74,90,91,94,95,96,98,99,100,102,104,105,106,126,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,151,153,155,156,157,159,168,169,172,173,174,175,177,178,179,180,187,188,],[-10,-11,-84,33,-82,-84,-21,-36,-38,-42,-49,-50,-51,-53,-54,-55,101,-76,-12,-85,-86,-60,-36,-83,-13,150,-56,-45,-46,-39,-40,-41,-14,-15,-78,158,-89,150,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-52,150,176,-58,-77,-87,-61,150,150,-37,-57,-43,-44,-88,-90,150,150,176,-59,]),'LBRACKET':([13,14,47,51,54,55,56,57,58,59,66,74,94,95,100,102,149,174,175,],[26,-11,92,-42,-49,-50,-51,-53,-54,-55,-12,-13,-45,-46,-14,-15,-52,-43,-44,]),'IF':([23,24,31,32,35,72,114,116,117,118,119,120,121,122,123,160,162,166,167,183,184,189,190,195,196,199,200,201,204,207,209,210,211,],[-116,-9,-116,-79,-8,125,125,-94,-95,-96,-97,-98,-99,-100,-101,-91,-102,-110,-111,-112,-113,125,125,-105,-107,-114,-115,125,-106,125,-108,125,-109,]),'WHILE':([23,24,31,32,35,72,114,116,117,118,119,120,121,122,123,160,162,166,167,183,184,189,190,195,196,199,200,201,204,207,209,210,211,],[-116,-9,-116,-79,-8,127,127,-94,-95,-96,-97,-98,-99,-100,-101,-91,-102,-110,-111,-112,-113,127,127,-105,-107,-114,-115,127,-106,127,-108,127,-109,]),'FOR':([23,24,31,32,35,72,114,116,117,118,119,120,121,122,123,160,162,166,167,183,184,189,190,195,196,199,200,201,204,207,209,210,211,],[-116,-9,-116,-79,-8,128,128,-94,-95,-96,-97,-98,-99,-100,-101,-91,-102,-110,-111,-112,-113,128,128,-105,-107,-114,-115,128,-106,128,-108,128,-109,]),'BREAK':([23,24,31,32,35,72,114,116,117,118,119,120,121,122,123,160,162,166,167,183,184,189,190,195,196,199,200,201,204,207,209,210,211,],[-116,-9,-116,-79,-8,129,129,-94,-95,-96,-97,-98,-99,-100,-101,-91,-102,-110,-111,-112,-113,129,129,-105,-107,-114,-115,129,-106,129,-108,129,-109,]),'RETURN':([23,24,31,32,35,72,114,116,117,118,119,120,121,122,123,160,162,166,167,183,184,189,190,195,196,199,200,201,204,207,209,210,211,],[-116,-9,-116,-79,-8,130,130,-94,-95,-96,-97,-98,-99,-100,-101,-91,-102,-110,-111,-112,-113,130,130,-105,-107,-114,-115,130,-106,130,-108,130,-109,]),'ASSERT':([23,24,31,32,35,72,114,116,117,118,119,120,121,122,123,160,162,166,167,183,184,189,190,195,196,199,200,201,204,207,209,210,211,],[-116,-9,-116,-79,-8,131,131,-94,-95,-96,-97,-98,-99,-100,-101,-91,-102,-110,-111,-112,-113,131,131,-105,-107,-114,-115,131,-106,131,-108,131,-109,]),'PRINT':([23,24,31,32,35,72,114,116,117,118,119,120,121,122,123,160,162,166,167,183,184,189,190,195,196,199,200,201,204,207,209,210,211,],[-116,-9,-116,-79,-8,132,132,-94,-95,-96,-97,-98,-99,-100,-101,-91,-102,-110,-111,-112,-113,132,132,-105,-107,-114,-115,132,-106,132,-108,132,-109,]),'READ':([23,24,31,32,35,72,114,116,117,118,119,120,121,122,123,160,162,166,167,183,184,189,190,195,196,199,200,201,204,207,209,210,211,],[-116,-9,-116,-79,-8,133,133,-94,-95,-96,-97,-98,-99,-100,-101,-91,-102,-110,-111,-112,-113,133,133,-105,-107,-114,-115,133,-106,133,-108,133,-109,]),'INCREASE':([23,24,26,30,31,32,35,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,69,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,94,95,97,107,108,109,110,111,112,114,116,117,118,119,120,121,122,123,130,131,148,149,150,158,160,162,163,164,166,167,170,171,174,175,176,183,184,189,190,191,195,196,198,199,200,201,202,204,206,207,209,210,211,],[-116,-9,48,48,-116,-79,-8,-68,-69,-70,48,94,48,48,48,-42,-67,-71,-49,-50,-51,-53,-54,-55,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-45,-46,48,48,-62,-63,-64,-65,-66,48,-94,-95,-96,-97,-98,-99,-100,-101,48,48,48,-52,48,48,-91,-102,48,48,-110,-111,48,48,-43,-44,48,-112,-113,48,48,48,-105,-107,48,-114,-115,48,48,-106,48,48,-108,48,-109,]),'DECREASE':([23,24,26,30,31,32,35,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,69,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,94,95,97,107,108,109,110,111,112,114,116,117,118,119,120,121,122,123,130,131,148,149,150,158,160,162,163,164,166,167,170,171,174,175,176,183,184,189,190,191,195,196,198,199,200,201,202,204,206,207,209,210,211,],[-116,-9,49,49,-116,-79,-8,-68,-69,-70,49,95,49,49,49,-42,-67,-71,-49,-50,-51,-53,-54,-55,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-45,-46,49,49,-62,-63,-64,-65,-66,49,-94,-95,-96,-97,-98,-99,-100,-101,49,49,49,-52,49,49,-91,-102,49,49,-110,-111,49,49,-43,-44,49,-112,-113,49,49,49,-105,-107,49,-114,-115,49,49,-106,49,49,-108,49,-109,]),'ADDRESS':([23,24,26,30,31,32,35,42,43,44,46,48,49,50,52,53,69,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,97,107,108,109,110,111,112,114,116,117,118,119,120,121,122,123,130,131,148,150,158,160,162,163,164,166,167,170,171,176,183,184,189,190,191,195,196,198,199,200,201,202,204,206,207,209,210,211,],[-116,-9,52,52,-116,-79,-8,-68,-69,-70,52,52,52,52,-67,-71,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-62,-63,-64,-65,-66,52,-94,-95,-96,-97,-98,-99,-100,-101,52,52,52,52,52,-91,-102,52,52,-110,-111,52,52,52,-112,-113,52,52,52,-105,-107,52,-114,-115,52,52,-106,52,52,-108,52,-109,]),'TIMES':([23,24,26,30,31,32,35,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,69,70,71,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,94,95,96,97,98,99,107,108,109,110,111,112,114,116,117,118,119,120,121,122,123,130,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,158,160,162,163,164,166,167,170,171,172,174,175,176,183,184,189,190,191,195,196,198,199,200,201,202,204,206,207,209,210,211,],[-116,-9,42,42,-116,-79,-8,75,-21,-68,-69,-70,-36,42,-38,42,42,42,-42,-67,-71,-49,-50,-51,-53,-54,-55,42,75,-36,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-45,-46,-39,42,-40,-41,42,-62,-63,-64,-65,-66,42,-94,-95,-96,-97,-98,-99,-100,-101,42,42,-22,-23,-24,75,75,75,75,75,75,75,75,75,75,75,42,-52,42,42,-91,-102,42,42,-110,-111,42,42,-37,-43,-44,42,-112,-113,42,42,42,-105,-107,42,-114,-115,42,42,-106,42,42,-108,42,-109,]),'PLUS':([23,24,26,30,31,32,35,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,69,70,71,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,94,95,96,97,98,99,107,108,109,110,111,112,114,116,117,118,119,120,121,122,123,130,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,158,160,162,163,164,166,167,170,171,172,174,175,176,183,184,189,190,191,195,196,198,199,200,201,202,204,206,207,209,210,211,],[-116,-9,43,43,-116,-79,-8,78,-21,-68,-69,-70,-36,43,-38,43,43,43,-42,-67,-71,-49,-50,-51,-53,-54,-55,43,78,-36,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-45,-46,-39,43,-40,-41,43,-62,-63,-64,-65,-66,43,-94,-95,-96,-97,-98,-99,-100,-101,43,43,-22,-23,-24,-25,-26,78,78,78,78,78,78,78,78,78,43,-52,43,43,-91,-102,43,43,-110,-111,43,43,-37,-43,-44,43,-112,-113,43,43,43,-105,-107,43,-114,-115,43,43,-106,43,43,-108,43,-109,]),'MINUS':([23,24,26,30,31,32,35,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,69,70,71,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,94,95,96,97,98,99,107,108,109,110,111,112,114,116,117,118,119,120,121,122,123,130,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,158,160,162,163,164,166,167,170,171,172,174,175,176,183,184,189,190,191,195,196,198,199,200,201,202,204,206,207,209,210,211,],[-116,-9,44,44,-116,-79,-8,79,-21,-68,-69,-70,-36,44,-38,44,44,44,-42,-67,-71,-49,-50,-51,-53,-54,-55,44,79,-36,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-45,-46,-39,44,-40,-41,44,-62,-63,-64,-65,-66,44,-94,-95,-96,-97,-98,-99,-100,-101,44,44,-22,-23,-24,-25,-26,79,79,79,79,79,79,79,79,79,44,-52,44,44,-91,-102,44,44,-110,-111,44,44,-37,-43,-44,44,-112,-113,44,44,44,-105,-107,44,-114,-115,44,44,-106,44,44,-108,44,-109,]),'NOT':([23,24,26,30,31,32,35,42,43,44,46,48,49,50,52,53,69,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,97,107,108,109,110,111,112,114,116,117,118,119,120,121,122,123,130,131,148,150,158,160,162,163,164,166,167,170,171,176,183,184,189,190,191,195,196,198,199,200,201,202,204,206,207,209,210,211,],[-116,-9,53,53,-116,-79,-8,-68,-69,-70,53,53,53,53,-67,-71,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-62,-63,-64,-65,-66,53,-94,-95,-96,-97,-98,-99,-100,-101,53,53,53,53,53,-91,-102,53,53,-110,-111,53,53,53,-112,-113,53,53,53,-105,-107,53,-114,-115,53,53,-106,53,53,-108,53,-109,]),'STRING':([23,24,26,30,31,32,35,42,43,44,46,48,49,50,52,53,69,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,97,107,108,109,110,111,112,114,116,117,118,119,120,121,122,123,130,131,148,150,158,160,162,163,164,166,167,170,171,176,183,184,189,190,191,195,196,198,199,200,201,202,204,206,207,209,210,211,],[-116,-9,56,56,-116,-79,-8,-68,-69,-70,56,56,56,56,-67,-71,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-62,-63,-64,-65,-66,56,-94,-95,-96,-97,-98,-99,-100,-101,56,56,56,56,56,-91,-102,56,56,-110,-111,56,56,56,-112,-113,56,56,56,-105,-107,56,-114,-115,56,56,-106,56,56,-108,56,-109,]),'INT_CONST':([23,24,26,30,31,32,35,42,43,44,46,48,49,50,52,53,69,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,97,107,108,109,110,111,112,114,116,117,118,119,120,121,122,123,130,131,148,150,158,160,162,163,164,166,167,170,171,176,183,184,189,190,191,195,196,198,199,200,201,202,204,206,207,209,210,211,],[-116,-9,57,57,-116,-79,-8,-68,-69,-70,57,57,57,57,-67,-71,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-62,-63,-64,-65,-66,57,-94,-95,-96,-97,-98,-99,-100,-101,57,57,57,57,57,-91,-102,57,57,-110,-111,57,57,57,-112,-113,57,57,57,-105,-107,57,-114,-115,57,57,-106,57,57,-108,57,-109,]),'FLOAT_CONST':([23,24,26,30,31,32,35,42,43,44,46,48,49,50,52,53,69,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,97,107,108,109,110,111,112,114,116,117,118,119,120,121,122,123,130,131,148,150,158,160,162,163,164,166,167,170,171,176,183,184,189,190,191,195,196,198,199,200,201,202,204,206,207,209,210,211,],[-116,-9,58,58,-116,-79,-8,-68,-69,-70,58,58,58,58,-67,-71,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-62,-63,-64,-65,-66,58,-94,-95,-96,-97,-98,-99,-100,-101,58,58,58,58,58,-91,-102,58,58,-110,-111,58,58,58,-112,-113,58,58,58,-105,-107,58,-114,-115,58,58,-106,58,58,-108,58,-109,]),'CHAR_CONST':([23,24,26,30,31,32,35,42,43,44,46,48,49,50,52,53,69,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,97,107,108,109,110,111,112,114,116,117,118,119,120,121,122,123,130,131,148,150,158,160,162,163,164,166,167,170,171,176,183,184,189,190,191,195,196,198,199,200,201,202,204,206,207,209,210,211,],[-116,-9,59,59,-116,-79,-8,-68,-69,-70,59,59,59,59,-67,-71,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-62,-63,-64,-65,-66,59,-94,-95,-96,-97,-98,-99,-100,-101,59,59,59,59,59,-91,-102,59,59,-110,-111,59,59,59,-112,-113,59,59,59,-105,-107,59,-114,-115,59,59,-106,59,59,-108,59,-109,]),'RBRACE':([23,24,31,32,35,41,45,47,51,54,55,56,57,58,59,68,70,71,72,94,95,96,98,99,105,106,113,114,115,116,117,118,119,120,121,122,123,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,157,158,159,160,161,162,166,167,172,174,175,177,178,183,184,195,196,199,200,204,209,211,],[-116,-9,-116,-79,-8,-21,-36,-38,-42,-49,-50,-51,-53,-54,-55,-86,-60,-36,-116,-45,-46,-39,-40,-41,157,-89,160,-116,-93,-94,-95,-96,-97,-98,-99,-100,-101,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-52,-87,177,-61,-91,-92,-102,-110,-111,-37,-43,-44,-88,-90,-112,-113,-105,-107,-114,-115,-106,-108,-109,]),'RBRACKET':([26,37,38,39,40,41,45,47,51,54,55,56,57,58,59,70,71,91,94,95,96,98,99,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,151,159,172,173,174,175,],[-116,74,-16,-17,-20,-21,-36,-38,-42,-49,-50,-51,-53,-54,-55,-60,-36,-56,-45,-46,-39,-40,-41,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-52,174,-61,-37,-57,-43,-44,]),'DIVIDE':([40,41,45,47,51,54,55,56,57,58,59,70,71,94,95,96,98,99,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,172,174,175,],[76,-21,-36,-38,-42,-49,-50,-51,-53,-54,-55,76,-36,-45,-46,-39,-40,-41,-22,-23,-24,76,76,76,76,76,76,76,76,76,76,76,-52,-37,-43,-44,]),'MOD':([40,41,45,47,51,54,55,56,57,58,59,70,71,94,95,96,98,99,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,172,174,175,],[77,-21,-36,-38,-42,-49,-50,-51,-53,-54,-55,77,-36,-45,-46,-39,-40,-41,-22,-23,-24,77,77,77,77,77,77,77,77,77,77,77,-52,-37,-43,-44,]),'LT':([40,41,45,47,51,54,55,56,57,58,59,70,71,94,95,96,98,99,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,172,174,175,],[80,-21,-36,-38,-42,-49,-50,-51,-53,-54,-55,80,-36,-45,-46,-39,-40,-41,-22,-23,-24,-25,-26,-27,80,80,-30,-31,-32,80,80,80,-52,-37,-43,-44,]),'EQ':([40,41,45,47,51,54,55,56,57,58,59,70,71,94,95,96,98,99,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,172,174,175,],[82,-21,-36,-38,-42,-49,-50,-51,-53,-54,-55,82,-36,-45,-46,-39,-40,-41,-22,-23,-24,-25,-26,-27,82,-29,-30,-31,-32,-33,82,82,-52,-37,-43,-44,]),'LE':([40,41,45,47,51,54,55,56,57,58,59,70,71,94,95,96,98,99,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,172,174,175,],[83,-21,-36,-38,-42,-49,-50,-51,-53,-54,-55,83,-36,-45,-46,-39,-40,-41,-22,-23,-24,-25,-26,-27,83,83,-30,-31,-32,83,83,83,-52,-37,-43,-44,]),'GT':([40,41,45,47,51,54,55,56,57,58,59,70,71,94,95,96,98,99,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,172,174,175,],[84,-21,-36,-38,-42,-49,-50,-51,-53,-54,-55,84,-36,-45,-46,-39,-40,-41,-22,-23,-24,-25,-26,-27,84,84,-30,-31,-32,84,84,84,-52,-37,-43,-44,]),'GE':([40,41,45,47,51,54,55,56,57,58,59,70,71,94,95,96,98,99,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,172,174,175,],[85,-21,-36,-38,-42,-49,-50,-51,-53,-54,-55,85,-36,-45,-46,-39,-40,-41,-22,-23,-24,-25,-26,-27,85,85,-30,-31,-32,85,85,85,-52,-37,-43,-44,]),'NQ':([40,41,45,47,51,54,55,56,57,58,59,70,71,94,95,96,98,99,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,172,174,175,],[86,-21,-36,-38,-42,-49,-50,-51,-53,-54,-55,86,-36,-45,-46,-39,-40,-41,-22,-23,-24,-25,-26,-27,86,-29,-30,-31,-32,-33,86,86,-52,-37,-43,-44,]),'AND':([40,41,45,47,51,54,55,56,57,58,59,70,71,94,95,96,98,99,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,172,174,175,],[87,-21,-36,-38,-42,-49,-50,-51,-53,-54,-55,87,-36,-45,-46,-39,-40,-41,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,87,-52,-37,-43,-44,]),'OR':([40,41,45,47,51,54,55,56,57,58,59,70,71,94,95,96,98,99,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,172,174,175,],[88,-21,-36,-38,-42,-49,-50,-51,-53,-54,-55,88,-36,-45,-46,-39,-40,-41,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-52,-37,-43,-44,]),'EQTIMES':([45,47,51,54,55,56,57,58,59,71,94,95,96,98,99,149,172,174,175,],[-36,-38,-42,-49,-50,-51,-53,-54,-55,108,-45,-46,-39,-40,-41,-52,-37,-43,-44,]),'EQDIV':([45,47,51,54,55,56,57,58,59,71,94,95,96,98,99,149,172,174,175,],[-36,-38,-42,-49,-50,-51,-53,-54,-55,109,-45,-46,-39,-40,-41,-52,-37,-43,-44,]),'EQMOD':([45,47,51,54,55,56,57,58,59,71,94,95,96,98,99,149,172,174,175,],[-36,-38,-42,-49,-50,-51,-53,-54,-55,110,-45,-46,-39,-40,-41,-52,-37,-43,-44,]),'EQPLUS':([45,47,51,54,55,56,57,58,59,71,94,95,96,98,99,149,172,174,175,],[-36,-38,-42,-49,-50,-51,-53,-54,-55,111,-45,-46,-39,-40,-41,-52,-37,-43,-44,]),'EQMINUS':([45,47,51,54,55,56,57,58,59,71,94,95,96,98,99,149,172,174,175,],[-36,-38,-42,-49,-50,-51,-53,-54,-55,112,-45,-46,-39,-40,-41,-52,-37,-43,-44,]),'ELSE':([116,117,118,119,120,121,122,123,160,162,166,167,183,184,195,196,199,200,204,209,211,],[-94,-95,-96,-97,-98,-99,-100,-101,-91,-102,-110,-111,-112,-113,201,-107,-114,-115,-106,-108,-109,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_declaration_list_opt':([0,3,],[2,16,]),'global_declaration':([0,3,],[3,3,]),'empty':([0,3,7,8,23,25,26,27,31,63,72,93,114,170,189,190,191,198,201,202,206,207,210,],[4,4,20,24,24,20,39,64,24,64,115,154,115,186,186,186,186,186,186,186,186,186,186,]),'function_definition':([0,3,],[5,5,]),'declaration':([0,3,8,23,31,],[6,6,23,23,23,]),'type_specifier':([0,3,8,23,27,31,46,101,165,],[7,7,25,25,65,25,89,65,182,]),'declarator':([0,3,7,15,25,33,65,165,182,],[8,8,17,28,36,36,104,36,36,]),'direct_declarator':([0,3,7,15,25,33,65,165,182,],[13,13,13,13,13,13,13,13,13,]),'init_declarator_list_opt':([7,25,],[18,18,]),'init_declarator_list':([7,25,],[19,19,]),'init_declarator':([7,25,33,165,182,],[21,21,73,181,192,]),'declaration_list_opt':([8,23,31,],[22,35,72,]),'compound_statement':([17,22,72,114,189,190,201,207,210,],[29,34,117,117,117,117,117,117,117,]),'constant_expression_opt':([26,],[37,]),'constant_expression':([26,],[38,]),'binary_expression':([26,30,46,69,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,97,107,114,130,131,150,158,163,164,170,171,176,189,190,191,198,201,202,206,207,210,],[40,70,70,70,70,134,135,136,137,138,139,140,141,142,143,144,145,146,147,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'cast_expression':([26,30,46,50,69,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,97,107,114,130,131,148,150,158,163,164,170,171,176,189,190,191,198,201,202,206,207,210,],[41,41,41,99,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,172,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'unary_expression':([26,30,46,48,49,50,69,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,97,107,114,130,131,148,150,158,163,164,170,171,176,189,190,191,198,201,202,206,207,210,],[45,71,71,96,98,45,71,71,45,45,45,45,45,45,45,45,45,45,45,45,45,45,71,71,71,71,71,71,71,45,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'postfix_expression':([26,30,46,48,49,50,69,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,97,107,114,130,131,148,150,158,163,164,170,171,176,189,190,191,198,201,202,206,207,210,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'unary_operator':([26,30,46,48,49,50,69,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,97,107,114,130,131,148,150,158,163,164,170,171,176,189,190,191,198,201,202,206,207,210,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'primary_expression':([26,30,46,48,49,50,69,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,97,107,114,130,131,148,150,158,163,164,170,171,176,189,190,191,198,201,202,206,207,210,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'constant':([26,30,46,48,49,50,69,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,97,107,114,130,131,148,150,158,163,164,170,171,176,189,190,191,198,201,202,206,207,210,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'parameter_list':([27,],[60,]),'identifier_list_opt':([27,63,],[61,103,]),'parameter_declaration':([27,101,],[62,156,]),'initializer':([30,69,158,],[67,106,178,]),'assignment_expression':([30,46,69,72,92,93,97,107,114,130,131,150,158,163,164,170,171,176,189,190,191,198,201,202,206,207,210,],[68,91,68,91,91,155,91,159,91,91,91,173,68,91,91,91,155,188,91,91,91,91,91,91,91,91,91,]),'expression':([46,72,92,97,114,130,131,163,164,170,189,190,191,198,201,202,206,207,210,],[90,126,151,90,126,168,169,179,180,126,126,126,126,126,126,126,126,126,126,]),'initializer_list':([69,],[105,]),'assignment_operator':([71,],[107,]),'statement_list_opt':([72,114,],[113,161,]),'statement':([72,114,189,190,201,207,210,],[114,114,195,196,204,209,211,]),'expression_statement':([72,114,189,190,201,207,210,],[116,116,116,116,116,116,116,]),'selection_statement':([72,114,189,190,201,207,210,],[118,118,118,118,118,118,118,]),'iteration_statement':([72,114,189,190,201,207,210,],[119,119,119,119,119,119,119,]),'jump_statement':([72,114,189,190,201,207,210,],[120,120,120,120,120,120,120,]),'assert_statement':([72,114,189,190,201,207,210,],[121,121,121,121,121,121,121,]),'print_statement':([72,114,189,190,201,207,210,],[122,122,122,122,122,122,122,]),'read_statement':([72,114,189,190,201,207,210,],[123,123,123,123,123,123,123,]),'expression_opt':([72,114,170,189,190,191,198,201,202,206,207,210,],[124,124,185,124,124,197,203,124,205,208,124,124,]),'argument_expression_opt':([93,],[152,]),'argument_expression':([93,171,],[153,187,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_declaration_list_opt','program',1,'p_program','uc_parser2.py',24),
  ('global_declaration_list_opt -> global_declaration global_declaration_list_opt','global_declaration_list_opt',2,'p_global_declaration_list_opt','uc_parser2.py',29),
  ('global_declaration_list_opt -> empty','global_declaration_list_opt',1,'p_global_declaration_list_opt','uc_parser2.py',30),
  ('global_declaration -> function_definition','global_declaration',1,'p_global_declaration','uc_parser2.py',37),
  ('global_declaration -> declaration','global_declaration',1,'p_global_declaration','uc_parser2.py',38),
  ('function_definition -> type_specifier declarator compound_statement','function_definition',3,'p_function_definition','uc_parser2.py',44),
  ('function_definition -> declarator declaration_list_opt compound_statement','function_definition',3,'p_function_definition','uc_parser2.py',45),
  ('declaration_list_opt -> declaration declaration_list_opt','declaration_list_opt',2,'p_declaration_list_opt','uc_parser2.py',50),
  ('declaration_list_opt -> empty','declaration_list_opt',1,'p_declaration_list_opt','uc_parser2.py',51),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','uc_parser2.py',56),
  ('direct_declarator -> ID','direct_declarator',1,'p_direct_declarator1','uc_parser2.py',62),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator1','uc_parser2.py',63),
  ('direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET','direct_declarator',4,'p_direct_declarator2','uc_parser2.py',74),
  ('direct_declarator -> direct_declarator LPAREN parameter_list RPAREN','direct_declarator',4,'p_direct_declarator3','uc_parser2.py',77),
  ('direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN','direct_declarator',4,'p_direct_declarator4','uc_parser2.py',80),
  ('constant_expression_opt -> constant_expression','constant_expression_opt',1,'p_constant_expression_opt','uc_parser2.py',83),
  ('constant_expression_opt -> empty','constant_expression_opt',1,'p_constant_expression_opt','uc_parser2.py',84),
  ('identifier_list_opt -> ID identifier_list_opt','identifier_list_opt',2,'p_identifier_list_opt','uc_parser2.py',89),
  ('identifier_list_opt -> empty','identifier_list_opt',1,'p_identifier_list_opt','uc_parser2.py',90),
  ('constant_expression -> binary_expression','constant_expression',1,'p_constant_expression','uc_parser2.py',95),
  ('binary_expression -> cast_expression','binary_expression',1,'p_binary_expression','uc_parser2.py',99),
  ('binary_expression -> binary_expression TIMES binary_expression','binary_expression',3,'p_binary_expression','uc_parser2.py',100),
  ('binary_expression -> binary_expression DIVIDE binary_expression','binary_expression',3,'p_binary_expression','uc_parser2.py',101),
  ('binary_expression -> binary_expression MOD binary_expression','binary_expression',3,'p_binary_expression','uc_parser2.py',102),
  ('binary_expression -> binary_expression PLUS binary_expression','binary_expression',3,'p_binary_expression','uc_parser2.py',103),
  ('binary_expression -> binary_expression MINUS binary_expression','binary_expression',3,'p_binary_expression','uc_parser2.py',104),
  ('binary_expression -> binary_expression LT binary_expression','binary_expression',3,'p_binary_expression','uc_parser2.py',105),
  ('binary_expression -> binary_expression EQUALS binary_expression','binary_expression',3,'p_binary_expression','uc_parser2.py',106),
  ('binary_expression -> binary_expression EQ binary_expression','binary_expression',3,'p_binary_expression','uc_parser2.py',107),
  ('binary_expression -> binary_expression LE binary_expression','binary_expression',3,'p_binary_expression','uc_parser2.py',108),
  ('binary_expression -> binary_expression GT binary_expression','binary_expression',3,'p_binary_expression','uc_parser2.py',109),
  ('binary_expression -> binary_expression GE binary_expression','binary_expression',3,'p_binary_expression','uc_parser2.py',110),
  ('binary_expression -> binary_expression NQ binary_expression','binary_expression',3,'p_binary_expression','uc_parser2.py',111),
  ('binary_expression -> binary_expression AND binary_expression','binary_expression',3,'p_binary_expression','uc_parser2.py',112),
  ('binary_expression -> binary_expression OR binary_expression','binary_expression',3,'p_binary_expression','uc_parser2.py',113),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','uc_parser2.py',118),
  ('cast_expression -> LPAREN type_specifier RPAREN cast_expression','cast_expression',4,'p_cast_expression','uc_parser2.py',119),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','uc_parser2.py',124),
  ('unary_expression -> INCREASE unary_expression','unary_expression',2,'p_unary_expression','uc_parser2.py',125),
  ('unary_expression -> DECREASE unary_expression','unary_expression',2,'p_unary_expression','uc_parser2.py',126),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','uc_parser2.py',127),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','uc_parser2.py',132),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression','uc_parser2.py',133),
  ('postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN','postfix_expression',4,'p_postfix_expression','uc_parser2.py',134),
  ('postfix_expression -> postfix_expression INCREASE','postfix_expression',2,'p_postfix_expression','uc_parser2.py',135),
  ('postfix_expression -> postfix_expression DECREASE','postfix_expression',2,'p_postfix_expression','uc_parser2.py',136),
  ('argument_expression_opt -> argument_expression','argument_expression_opt',1,'p_argument_expression_opt','uc_parser2.py',141),
  ('argument_expression_opt -> empty','argument_expression_opt',1,'p_argument_expression_opt','uc_parser2.py',142),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression','uc_parser2.py',147),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression','uc_parser2.py',148),
  ('primary_expression -> STRING','primary_expression',1,'p_primary_expression','uc_parser2.py',149),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','uc_parser2.py',150),
  ('constant -> INT_CONST','constant',1,'p_constant','uc_parser2.py',155),
  ('constant -> FLOAT_CONST','constant',1,'p_constant','uc_parser2.py',156),
  ('constant -> CHAR_CONST','constant',1,'p_constant','uc_parser2.py',157),
  ('expression -> assignment_expression','expression',1,'p_expression','uc_parser2.py',162),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','uc_parser2.py',163),
  ('argument_expression -> assignment_expression','argument_expression',1,'p_argument_expression','uc_parser2.py',168),
  ('argument_expression -> argument_expression COMMA assignment_expression','argument_expression',3,'p_argument_expression','uc_parser2.py',169),
  ('assignment_expression -> binary_expression','assignment_expression',1,'p_assignment_expression','uc_parser2.py',174),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','uc_parser2.py',175),
  ('assignment_operator -> EQTIMES','assignment_operator',1,'p_assignment_operator','uc_parser2.py',180),
  ('assignment_operator -> EQDIV','assignment_operator',1,'p_assignment_operator','uc_parser2.py',181),
  ('assignment_operator -> EQMOD','assignment_operator',1,'p_assignment_operator','uc_parser2.py',182),
  ('assignment_operator -> EQPLUS','assignment_operator',1,'p_assignment_operator','uc_parser2.py',183),
  ('assignment_operator -> EQMINUS','assignment_operator',1,'p_assignment_operator','uc_parser2.py',184),
  ('unary_operator -> ADDRESS','unary_operator',1,'p_unary_operator','uc_parser2.py',189),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','uc_parser2.py',190),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','uc_parser2.py',191),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','uc_parser2.py',192),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','uc_parser2.py',193),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','uc_parser2.py',198),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','uc_parser2.py',199),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','uc_parser2.py',200),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','uc_parser2.py',201),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','uc_parser2.py',207),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','uc_parser2.py',208),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','uc_parser2.py',213),
  ('declaration -> type_specifier init_declarator_list_opt SEMI','declaration',3,'p_declaration','uc_parser2.py',217),
  ('init_declarator_list_opt -> init_declarator_list','init_declarator_list_opt',1,'p_init_declarator_list_opt','uc_parser2.py',222),
  ('init_declarator_list_opt -> empty','init_declarator_list_opt',1,'p_init_declarator_list_opt','uc_parser2.py',223),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','uc_parser2.py',229),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','uc_parser2.py',230),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','uc_parser2.py',241),
  ('init_declarator -> declarator EQUALS initializer','init_declarator',3,'p_init_declarator','uc_parser2.py',242),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','uc_parser2.py',252),
  ('initializer -> LBRACE initializer_list RBRACE','initializer',3,'p_initializer','uc_parser2.py',253),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer','uc_parser2.py',254),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','uc_parser2.py',259),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','uc_parser2.py',260),
  ('compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE','compound_statement',4,'p_compound_statement','uc_parser2.py',265),
  ('statement_list_opt -> statement statement_list_opt','statement_list_opt',2,'p_statement_list_opt','uc_parser2.py',269),
  ('statement_list_opt -> empty','statement_list_opt',1,'p_statement_list_opt','uc_parser2.py',270),
  ('statement -> expression_statement','statement',1,'p_statement','uc_parser2.py',275),
  ('statement -> compound_statement','statement',1,'p_statement','uc_parser2.py',276),
  ('statement -> selection_statement','statement',1,'p_statement','uc_parser2.py',277),
  ('statement -> iteration_statement','statement',1,'p_statement','uc_parser2.py',278),
  ('statement -> jump_statement','statement',1,'p_statement','uc_parser2.py',279),
  ('statement -> assert_statement','statement',1,'p_statement','uc_parser2.py',280),
  ('statement -> print_statement','statement',1,'p_statement','uc_parser2.py',281),
  ('statement -> read_statement','statement',1,'p_statement','uc_parser2.py',282),
  ('expression_statement -> expression_opt SEMI','expression_statement',2,'p_expression_statement','uc_parser2.py',287),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','uc_parser2.py',291),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','uc_parser2.py',292),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement','uc_parser2.py',297),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement','uc_parser2.py',298),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement','uc_parser2.py',303),
  ('iteration_statement -> FOR LPAREN init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement','iteration_statement',9,'p_iteration_statement','uc_parser2.py',304),
  ('iteration_statement -> FOR LPAREN type_specifier init_declarator SEMI expression_opt SEMI expression_opt RPAREN statement','iteration_statement',10,'p_iteration_statement','uc_parser2.py',305),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement','uc_parser2.py',310),
  ('jump_statement -> RETURN SEMI','jump_statement',2,'p_jump_statement','uc_parser2.py',311),
  ('jump_statement -> RETURN expression SEMI','jump_statement',3,'p_jump_statement','uc_parser2.py',312),
  ('assert_statement -> ASSERT expression SEMI','assert_statement',3,'p_assert_statement','uc_parser2.py',317),
  ('print_statement -> PRINT LPAREN expression_opt RPAREN SEMI','print_statement',5,'p_print_statement','uc_parser2.py',321),
  ('read_statement -> READ LPAREN argument_expression RPAREN SEMI','read_statement',5,'p_read_statement','uc_parser2.py',325),
  ('empty -> <empty>','empty',0,'p_empty','uc_parser2.py',329),
]
