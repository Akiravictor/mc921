
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocLTGTleftPLUSMINUSleftTIMESDIVIDEADDRESS AND ASSERT BREAK CHAR CHAR_CONST COMMA DECREASE DIVIDE ELSE EQ EQDIV EQMINUS EQMOD EQPLUS EQTIMES EQUALS FLOAT FLOAT_CONST FOR GE GT ID IF INCREASE INT INT_CONST LBRACKET LE LPAREN LT MINUS MOD NOT NQ OR PLUS PRINT RBRACKET READ RETURN RPAREN SEMI STRING TIMES UMINUS UPLUS UTIMES VOID WHILE program  : global_declaration_list\n         global_declaration_list : global_declaration\n                                    | global_declaration_list global_declaration\n        global_declaration : function_definition\n                              | declaration\n         function_definition : declarator declaration_list compound_statement\n                                | type_specifier declarator declaration_list  compound_statement\n         declaration_list : declaration\n                             | declaration_list declaration\n         identifier : ID  type_specifier : VOID\n                           | CHAR\n                           | INT\n                           | FLOAT\n         pointer : TIMES\n                    | TIMES pointer\n         declarator : direct_declarator\n                       | pointer direct_declarator\n         direct_declarator : identifier\n                              | declarator\n                              | direct_declarator LBRACKET constant_expression_opt RBRACKET\n                              | direct_declarator LPAREN parameter_list RPAREN\n                              | direct_declarator LPAREN identifier RPAREN\n         constant_expression_opt : constant_expression\n                                    | empty\n         constant_expression : binary_expression\n         binary_expression : cast_expression\n                              | binary_expression TIMES binary_expression\n                              | binary_expression DIVIDE binary_expression\n                              | binary_expression MOD binary_expression\n                              | binary_expression PLUS binary_expression\n                              | binary_expression MINUS binary_expression\n                              | binary_expression LT binary_expression\n                              | binary_expression LE binary_expression\n                              | binary_expression GT binary_expression\n                              | binary_expression GE binary_expression\n                              | binary_expression EQ binary_expression\n                              | binary_expression NQ binary_expression\n                              | binary_expression AND binary_expression\n                              | binary_expression OR binary_expression\n         cast_expression : unary_expression\n                            | LPAREN type_specifier RPAREN cast_expression\n         unary_expression : postfix_expression\n                             | INCREASE unary_expression\n                             | DECREASE unary_expression\n                             | unary_operator cast_expression\n         postfix_expression : primary_expression\n                               | postfix_expression LBRACKET expression RBRACKET\n                               | postfix_expression LPAREN argument_expression_opt RPAREN\n                               | postfix_expression INCREASE\n                               | postfix_expression DECREASE\n         argument_expression_opt : argument_expression\n                                    | empty\n         primary_expression : identifier\n                               | constant\n                               | STRING\n                               | expression\n         constant : INT_CONST\n                     | CHAR_CONST\n                     | FLOAT_CONST\n         expression : assignment_expression\n                       | expression COMMA assignment_expression\n         argument_expression : assignment_expression\n                                | argument_expression COMMA assignment_expression\n         assignment_expression : binary_expression\n                                  | unary_expression assignment_operator assignment_expression\n         assignment_operator : EQUALS\n                                | EQTIMES\n                                | EQDIV\n                                | EQMOD\n                                | EQPLUS\n                                | EQMINUS\n         unary_operator : ADDRESS\n                           | TIMES\n                           | PLUS\n                           | MINUS\n                           | NOT\n         parameter_list : parameter_declaration\n                           | parameter_list COMMA parameter_declaration\n         parameter_declaration : type_specifier declarator\n         declaration : type_specifier init_declarator_list_opt SEMI\n         init_declarator_list_opt : init_declarator_list\n                                     | empty\n         init_declarator_list : init_declarator\n                                 | init_declarator_list COMMA init_declarator\n         init_declarator : declarator\n                            | declarator EQUALS initializer\n         initializer : assignment_expression\n                        | initializer_list\n                        | initializer_list COMMA\n         initializer_list : initializer\n                             | initializer_list COMMA initializer\n         compound_statement : declaration_list statement_list\n         statement_list : statement\n                           | statement_list statement\n         statement : expression_statement\n                      | compound_statement\n                      | selection_statement\n                      | iteration_statement\n                      | jump_statement\n                      | assert_statement\n                      | print_statement\n                      | read_statement\n         expression_statement : expression_opt SEMI\n         expression_opt : expression\n                           | empty\n         selection_statement : IF LPAREN expression RPAREN statement\n                                | IF LPAREN expression RPAREN statement ELSE statement\n         iteration_statement : WHILE LPAREN expression RPAREN statement\n                                | FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement\n                                | FOR LPAREN declaration SEMI expression_opt SEMI expression_opt RPAREN statement\n         jump_statement : BREAK\n                           | RETURN expression_opt SEMI\n         assert_statement : ASSERT expression SEMI\n         print_statement : PRINT LPAREN expression_opt RPAREN SEMI\n         read_statement : READ LPAREN argument_expression RPAREN SEMI\n         empty :\n        '
    
_lr_action_items = {'VOID':([0,2,3,4,5,6,8,14,16,17,18,19,21,27,28,29,31,32,33,35,37,48,68,69,70,71,72,73,74,75,76,77,83,91,96,126,127,128,130,131,134,166,167,175,176,182,183,186,187,188,191,194,195,196,197,],[10,10,-2,-4,-5,10,-17,-19,-10,-3,10,-8,10,10,-17,-20,10,-6,-8,10,-81,10,10,-94,-96,-97,-98,-99,-100,-101,-102,-103,-112,-7,-21,-22,10,-23,-95,-104,10,-113,-114,10,10,-107,-109,-115,-116,10,-108,10,10,-110,-111,]),'CHAR':([0,2,3,4,5,6,8,14,16,17,18,19,21,27,28,29,31,32,33,35,37,48,68,69,70,71,72,73,74,75,76,77,83,91,96,126,127,128,130,131,134,166,167,175,176,182,183,186,187,188,191,194,195,196,197,],[11,11,-2,-4,-5,11,-17,-19,-10,-3,11,-8,11,11,-17,-20,11,-6,-8,11,-81,11,11,-94,-96,-97,-98,-99,-100,-101,-102,-103,-112,-7,-21,-22,11,-23,-95,-104,11,-113,-114,11,11,-107,-109,-115,-116,11,-108,11,11,-110,-111,]),'INT':([0,2,3,4,5,6,8,14,16,17,18,19,21,27,28,29,31,32,33,35,37,48,68,69,70,71,72,73,74,75,76,77,83,91,96,126,127,128,130,131,134,166,167,175,176,182,183,186,187,188,191,194,195,196,197,],[12,12,-2,-4,-5,12,-17,-19,-10,-3,12,-8,12,12,-17,-20,12,-6,-8,12,-81,12,12,-94,-96,-97,-98,-99,-100,-101,-102,-103,-112,-7,-21,-22,12,-23,-95,-104,12,-113,-114,12,12,-107,-109,-115,-116,12,-108,12,12,-110,-111,]),'FLOAT':([0,2,3,4,5,6,8,14,16,17,18,19,21,27,28,29,31,32,33,35,37,48,68,69,70,71,72,73,74,75,76,77,83,91,96,126,127,128,130,131,134,166,167,175,176,182,183,186,187,188,191,194,195,196,197,],[13,13,-2,-4,-5,13,-17,-19,-10,-3,13,-8,13,13,-17,-20,13,-6,-8,13,-81,13,13,-94,-96,-97,-98,-99,-100,-101,-102,-103,-112,-7,-21,-22,13,-23,-95,-104,13,-113,-114,13,13,-107,-109,-115,-116,13,-108,13,13,-110,-111,]),'TIMES':([0,2,3,4,5,7,9,10,11,12,13,15,16,17,19,20,26,30,31,32,33,36,37,38,42,43,44,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,67,68,69,70,71,72,73,74,75,76,77,80,83,84,85,89,90,91,93,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,122,123,124,125,130,131,132,133,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,159,160,162,163,166,167,171,172,173,174,175,176,177,178,181,182,183,186,187,188,189,190,191,194,195,196,197,],[15,15,-2,-4,-5,15,15,-11,-12,-13,-14,-15,-10,-3,-8,15,44,-16,44,-6,-8,44,-81,15,97,-27,-74,-75,-76,-41,-43,44,44,44,-47,-57,-73,-77,-54,-55,-56,-58,-59,-60,-61,15,44,-94,-96,-97,-98,-99,-100,-101,-102,-103,-57,-112,44,44,97,-41,-7,-61,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-67,-68,-69,-70,-71,-72,44,44,-50,-51,-41,-41,-27,44,-95,-104,44,44,44,-57,44,44,44,-28,-29,97,97,97,97,97,97,97,97,97,97,97,-61,44,-57,-61,-61,-57,-57,-113,-114,-27,-48,-49,44,44,44,44,44,-61,-107,-109,-115,-116,44,44,44,-108,44,44,-110,-111,]),'ID':([0,2,3,4,5,7,9,10,11,12,13,15,17,19,20,26,27,30,31,32,33,36,37,38,44,45,46,50,51,52,55,56,67,68,69,70,71,72,73,74,75,76,77,83,84,85,91,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,125,130,131,132,133,134,137,138,139,154,166,167,174,175,176,177,178,182,183,186,187,188,189,190,191,194,195,196,197,],[16,16,-2,-4,-5,16,16,-11,-12,-13,-14,-15,-3,-8,16,16,16,-16,16,-6,-8,16,-81,16,-74,-75,-76,16,16,16,-73,-77,16,16,-94,-96,-97,-98,-99,-100,-101,-102,-103,-112,16,16,-7,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-67,-68,-69,-70,-71,-72,16,16,16,-95,-104,16,16,16,16,16,16,16,-113,-114,16,16,16,16,16,-107,-109,-115,-116,16,16,16,-108,16,16,-110,-111,]),'$end':([1,2,3,4,5,17,32,37,68,69,70,71,72,73,74,75,76,77,83,91,130,131,166,167,182,183,186,187,191,196,197,],[0,-1,-2,-4,-5,-3,-6,-81,-93,-94,-96,-97,-98,-99,-100,-101,-102,-103,-112,-7,-95,-104,-113,-114,-107,-109,-115,-116,-108,-110,-111,]),'LBRACKET':([6,8,14,16,21,28,29,34,42,43,47,49,53,54,57,58,59,60,61,62,63,80,89,90,93,96,120,121,122,123,124,126,128,129,136,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,159,160,162,163,171,172,173,181,],[-20,26,-19,-10,-20,26,-20,-20,-65,-27,-41,118,-47,-57,-54,-55,-56,-58,-59,-60,-61,-57,-65,-41,-61,-21,-50,-51,-41,-41,-27,-22,-23,-20,-57,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-61,-57,-61,-61,-57,-57,-27,-48,-49,-61,]),'LPAREN':([6,8,14,16,19,21,26,28,29,31,33,34,36,37,42,43,44,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,76,77,79,80,81,82,83,84,85,86,87,89,90,93,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,159,160,162,163,166,167,171,172,173,174,175,176,177,178,181,182,183,186,187,188,189,190,191,194,195,196,197,],[-20,27,-19,-10,-8,-20,48,27,-20,48,-8,-20,48,-81,-65,-27,-74,-75,-76,-41,119,48,48,48,-47,-57,-73,-77,-54,-55,-56,-58,-59,-60,-61,48,-94,-96,-97,-98,-99,-100,-101,-102,-103,132,-57,133,134,-112,48,48,137,138,-65,-41,-61,-21,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-67,-68,-69,-70,-71,-72,48,48,-50,-51,-41,-41,-27,48,-22,-23,-20,-95,-104,48,48,48,-57,48,48,48,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-61,48,-57,-61,-61,-57,-57,-113,-114,-27,-48,-49,48,48,48,48,48,-61,-107,-109,-115,-116,48,48,48,-108,48,48,-110,-111,]),'SEMI':([7,8,10,11,12,13,14,16,19,20,21,22,23,24,25,28,29,31,33,34,37,43,47,49,53,54,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,76,77,78,80,83,84,88,89,90,92,93,94,95,96,120,121,122,123,124,126,128,130,131,134,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,164,165,166,167,170,171,172,173,175,176,177,178,179,180,182,183,184,185,186,187,188,191,194,195,196,197,],[-117,-17,-11,-12,-13,-14,-19,-10,-8,-117,-20,37,-82,-83,-84,-17,-20,-117,-8,-20,-81,-27,-41,-43,-47,-57,-54,-55,-56,-58,-59,-60,-61,-93,-94,-96,-97,-98,-99,-100,-101,-102,-103,131,-57,-112,-117,-106,-65,-41,-87,-61,-89,-85,-21,-50,-51,-41,-41,-27,-22,-23,-95,-104,-117,166,167,-90,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-61,-61,177,178,-113,-114,-91,-27,-48,-49,-117,-117,-117,-117,186,187,-107,-109,189,190,-115,-116,-117,-108,-117,-117,-110,-111,]),'EQUALS':([8,14,16,21,28,29,34,42,43,47,49,53,54,57,58,59,60,61,62,63,80,89,90,93,96,120,121,122,123,124,126,128,136,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,159,160,162,163,171,172,173,181,],[-17,-19,-10,36,-17,-20,36,-65,-27,111,-43,-47,-57,-54,-55,-56,-58,-59,-60,-61,-57,-65,111,-61,-21,-50,-51,111,111,-27,-22,-23,-57,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-61,-57,-61,-61,-57,-57,-27,-48,-49,-61,]),'COMMA':([8,14,16,21,23,25,28,29,34,42,43,47,49,53,54,57,58,59,60,61,62,63,64,66,80,89,90,92,93,94,95,96,120,121,122,123,124,126,128,129,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,159,160,161,162,163,169,170,171,172,173,181,],[-17,-19,-10,-20,38,-84,-17,-20,-20,-65,-27,-41,-43,-47,125,-54,-55,-56,-58,-59,-60,-61,127,-78,125,-65,-41,-87,-61,139,-85,-21,-50,-51,-41,-41,-27,-22,-23,-20,125,-90,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-61,125,174,-61,-61,-79,125,125,174,-91,-27,-48,-49,-61,]),'RPAREN':([8,10,11,12,13,14,16,28,29,43,47,49,53,54,57,58,59,60,61,62,63,64,65,66,80,88,89,90,96,117,119,120,121,122,123,124,126,128,129,137,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,157,158,159,160,161,162,163,168,169,171,172,173,181,189,190,192,193,],[-17,-11,-12,-13,-14,-19,-10,-17,-20,-27,-41,-43,-47,-57,-54,-55,-56,-58,-59,-60,-61,126,128,-78,-57,-106,-65,-41,-21,154,-117,-50,-51,-41,-41,-27,-22,-23,-20,-117,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-61,173,-52,-53,-61,-61,-79,175,176,179,180,-27,-48,-49,-61,-117,-117,194,195,]),'DIVIDE':([16,42,43,47,49,53,54,57,58,59,60,61,62,63,80,89,90,93,120,121,122,123,124,136,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,159,160,162,163,171,172,173,181,],[-10,98,-27,-41,-43,-47,-57,-54,-55,-56,-58,-59,-60,-61,-57,98,-41,-61,-50,-51,-41,-41,-27,-57,-28,-29,98,98,98,98,98,98,98,98,98,98,98,-61,-57,-61,-61,-57,-57,-27,-48,-49,-61,]),'MOD':([16,42,43,47,49,53,54,57,58,59,60,61,62,63,80,89,90,93,120,121,122,123,124,136,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,159,160,162,163,171,172,173,181,],[-10,99,-27,-41,-43,-47,-57,-54,-55,-56,-58,-59,-60,-61,-57,99,-41,-61,-50,-51,-41,-41,-27,-57,-28,-29,99,-31,-32,-33,99,-35,99,99,99,99,99,-61,-57,-61,-61,-57,-57,-27,-48,-49,-61,]),'PLUS':([16,19,26,31,33,36,37,42,43,44,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,76,77,80,83,84,85,89,90,93,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,122,123,124,125,130,131,132,133,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,159,160,162,163,166,167,171,172,173,174,175,176,177,178,181,182,183,186,187,188,189,190,191,194,195,196,197,],[-10,-8,45,45,-8,45,-81,100,-27,-74,-75,-76,-41,-43,45,45,45,-47,-57,-73,-77,-54,-55,-56,-58,-59,-60,-61,45,-94,-96,-97,-98,-99,-100,-101,-102,-103,-57,-112,45,45,100,-41,-61,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-67,-68,-69,-70,-71,-72,45,45,-50,-51,-41,-41,-27,45,-95,-104,45,45,45,-57,45,45,45,-28,-29,100,-31,-32,100,100,100,100,100,100,100,100,-61,45,-57,-61,-61,-57,-57,-113,-114,-27,-48,-49,45,45,45,45,45,-61,-107,-109,-115,-116,45,45,45,-108,45,45,-110,-111,]),'MINUS':([16,19,26,31,33,36,37,42,43,44,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,76,77,80,83,84,85,89,90,93,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,122,123,124,125,130,131,132,133,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,159,160,162,163,166,167,171,172,173,174,175,176,177,178,181,182,183,186,187,188,189,190,191,194,195,196,197,],[-10,-8,46,46,-8,46,-81,101,-27,-74,-75,-76,-41,-43,46,46,46,-47,-57,-73,-77,-54,-55,-56,-58,-59,-60,-61,46,-94,-96,-97,-98,-99,-100,-101,-102,-103,-57,-112,46,46,101,-41,-61,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-67,-68,-69,-70,-71,-72,46,46,-50,-51,-41,-41,-27,46,-95,-104,46,46,46,-57,46,46,46,-28,-29,101,-31,-32,101,101,101,101,101,101,101,101,-61,46,-57,-61,-61,-57,-57,-113,-114,-27,-48,-49,46,46,46,46,46,-61,-107,-109,-115,-116,46,46,46,-108,46,46,-110,-111,]),'LT':([16,42,43,47,49,53,54,57,58,59,60,61,62,63,80,89,90,93,120,121,122,123,124,136,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,159,160,162,163,171,172,173,181,],[-10,102,-27,-41,-43,-47,-57,-54,-55,-56,-58,-59,-60,-61,-57,102,-41,-61,-50,-51,-41,-41,-27,-57,-28,-29,102,-31,-32,-65,102,-65,102,102,102,102,102,-61,-57,-61,-61,-57,-57,-27,-48,-49,-61,]),'LE':([16,42,43,47,49,53,54,57,58,59,60,61,62,63,80,89,90,93,120,121,122,123,124,136,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,159,160,162,163,171,172,173,181,],[-10,103,-27,-41,-43,-47,-57,-54,-55,-56,-58,-59,-60,-61,-57,103,-41,-61,-50,-51,-41,-41,-27,-57,-28,-29,103,-31,-32,-33,103,-35,103,103,103,103,103,-61,-57,-61,-61,-57,-57,-27,-48,-49,-61,]),'GT':([16,42,43,47,49,53,54,57,58,59,60,61,62,63,80,89,90,93,120,121,122,123,124,136,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,159,160,162,163,171,172,173,181,],[-10,104,-27,-41,-43,-47,-57,-54,-55,-56,-58,-59,-60,-61,-57,104,-41,-61,-50,-51,-41,-41,-27,-57,-28,-29,104,-31,-32,-65,104,-65,104,104,104,104,104,-61,-57,-61,-61,-57,-57,-27,-48,-49,-61,]),'GE':([16,42,43,47,49,53,54,57,58,59,60,61,62,63,80,89,90,93,120,121,122,123,124,136,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,159,160,162,163,171,172,173,181,],[-10,105,-27,-41,-43,-47,-57,-54,-55,-56,-58,-59,-60,-61,-57,105,-41,-61,-50,-51,-41,-41,-27,-57,-28,-29,105,-31,-32,-33,105,-35,105,105,105,105,105,-61,-57,-61,-61,-57,-57,-27,-48,-49,-61,]),'EQ':([16,42,43,47,49,53,54,57,58,59,60,61,62,63,80,89,90,93,120,121,122,123,124,136,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,159,160,162,163,171,172,173,181,],[-10,106,-27,-41,-43,-47,-57,-54,-55,-56,-58,-59,-60,-61,-57,106,-41,-61,-50,-51,-41,-41,-27,-57,-28,-29,106,-31,-32,-33,106,-35,106,106,106,106,106,-61,-57,-61,-61,-57,-57,-27,-48,-49,-61,]),'NQ':([16,42,43,47,49,53,54,57,58,59,60,61,62,63,80,89,90,93,120,121,122,123,124,136,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,159,160,162,163,171,172,173,181,],[-10,107,-27,-41,-43,-47,-57,-54,-55,-56,-58,-59,-60,-61,-57,107,-41,-61,-50,-51,-41,-41,-27,-57,-28,-29,107,-31,-32,-33,107,-35,107,107,107,107,107,-61,-57,-61,-61,-57,-57,-27,-48,-49,-61,]),'AND':([16,42,43,47,49,53,54,57,58,59,60,61,62,63,80,89,90,93,120,121,122,123,124,136,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,159,160,162,163,171,172,173,181,],[-10,108,-27,-41,-43,-47,-57,-54,-55,-56,-58,-59,-60,-61,-57,108,-41,-61,-50,-51,-41,-41,-27,-57,-28,-29,108,-31,-32,-33,108,-35,108,108,108,108,108,-61,-57,-61,-61,-57,-57,-27,-48,-49,-61,]),'OR':([16,42,43,47,49,53,54,57,58,59,60,61,62,63,80,89,90,93,120,121,122,123,124,136,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,159,160,162,163,171,172,173,181,],[-10,109,-27,-41,-43,-47,-57,-54,-55,-56,-58,-59,-60,-61,-57,109,-41,-61,-50,-51,-41,-41,-27,-57,-28,-29,109,-31,-32,-33,109,-35,109,109,109,109,109,-61,-57,-61,-61,-57,-57,-27,-48,-49,-61,]),'RBRACKET':([16,26,39,40,41,42,43,47,49,53,54,57,58,59,60,61,62,63,89,90,120,121,122,123,124,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,160,171,172,173,],[-10,-117,96,-24,-25,-26,-27,-41,-43,-47,-57,-54,-55,-56,-58,-59,-60,-61,-65,-41,-50,-51,-41,-41,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-61,172,-61,-27,-48,-49,]),'INCREASE':([16,19,26,31,33,36,37,42,43,44,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,76,77,80,83,84,85,89,90,93,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,122,123,124,125,130,131,132,133,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,159,160,162,163,166,167,171,172,173,174,175,176,177,178,181,182,183,186,187,188,189,190,191,194,195,196,197,],[-10,-8,50,50,-8,50,-81,-65,-27,-74,-75,-76,-41,120,50,50,50,-47,-57,-73,-77,-54,-55,-56,-58,-59,-60,-61,50,-94,-96,-97,-98,-99,-100,-101,-102,-103,-57,-112,50,50,-65,-41,-61,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-67,-68,-69,-70,-71,-72,50,50,-50,-51,-41,-41,-27,50,-95,-104,50,50,50,-57,50,50,50,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-61,50,-57,-61,-61,-57,-57,-113,-114,-27,-48,-49,50,50,50,50,50,-61,-107,-109,-115,-116,50,50,50,-108,50,50,-110,-111,]),'DECREASE':([16,19,26,31,33,36,37,42,43,44,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,68,69,70,71,72,73,74,75,76,77,80,83,84,85,89,90,93,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,122,123,124,125,130,131,132,133,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,159,160,162,163,166,167,171,172,173,174,175,176,177,178,181,182,183,186,187,188,189,190,191,194,195,196,197,],[-10,-8,51,51,-8,51,-81,-65,-27,-74,-75,-76,-41,121,51,51,51,-47,-57,-73,-77,-54,-55,-56,-58,-59,-60,-61,51,-94,-96,-97,-98,-99,-100,-101,-102,-103,-57,-112,51,51,-65,-41,-61,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-67,-68,-69,-70,-71,-72,51,51,-50,-51,-41,-41,-27,51,-95,-104,51,51,51,-57,51,51,51,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-61,51,-57,-61,-61,-57,-57,-113,-114,-27,-48,-49,51,51,51,51,51,-61,-107,-109,-115,-116,51,51,51,-108,51,51,-110,-111,]),'EQTIMES':([16,42,43,47,49,53,54,57,58,59,60,61,62,63,80,89,90,93,120,121,122,123,124,136,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,159,160,162,163,171,172,173,181,],[-10,-65,-27,112,-43,-47,-57,-54,-55,-56,-58,-59,-60,-61,-57,-65,112,-61,-50,-51,112,112,-27,-57,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-61,-57,-61,-61,-57,-57,-27,-48,-49,-61,]),'EQDIV':([16,42,43,47,49,53,54,57,58,59,60,61,62,63,80,89,90,93,120,121,122,123,124,136,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,159,160,162,163,171,172,173,181,],[-10,-65,-27,113,-43,-47,-57,-54,-55,-56,-58,-59,-60,-61,-57,-65,113,-61,-50,-51,113,113,-27,-57,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-61,-57,-61,-61,-57,-57,-27,-48,-49,-61,]),'EQMOD':([16,42,43,47,49,53,54,57,58,59,60,61,62,63,80,89,90,93,120,121,122,123,124,136,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,159,160,162,163,171,172,173,181,],[-10,-65,-27,114,-43,-47,-57,-54,-55,-56,-58,-59,-60,-61,-57,-65,114,-61,-50,-51,114,114,-27,-57,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-61,-57,-61,-61,-57,-57,-27,-48,-49,-61,]),'EQPLUS':([16,42,43,47,49,53,54,57,58,59,60,61,62,63,80,89,90,93,120,121,122,123,124,136,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,159,160,162,163,171,172,173,181,],[-10,-65,-27,115,-43,-47,-57,-54,-55,-56,-58,-59,-60,-61,-57,-65,115,-61,-50,-51,115,115,-27,-57,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-61,-57,-61,-61,-57,-57,-27,-48,-49,-61,]),'EQMINUS':([16,42,43,47,49,53,54,57,58,59,60,61,62,63,80,89,90,93,120,121,122,123,124,136,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,159,160,162,163,171,172,173,181,],[-10,-65,-27,116,-43,-47,-57,-54,-55,-56,-58,-59,-60,-61,-57,-65,116,-61,-50,-51,116,116,-27,-57,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-61,-57,-61,-61,-57,-57,-27,-48,-49,-61,]),'IF':([19,31,33,37,68,69,70,71,72,73,74,75,76,77,83,130,131,166,167,175,176,182,183,186,187,188,191,194,195,196,197,],[-8,79,-8,-81,79,-94,-96,-97,-98,-99,-100,-101,-102,-103,-112,-95,-104,-113,-114,79,79,-107,-109,-115,-116,79,-108,79,79,-110,-111,]),'WHILE':([19,31,33,37,68,69,70,71,72,73,74,75,76,77,83,130,131,166,167,175,176,182,183,186,187,188,191,194,195,196,197,],[-8,81,-8,-81,81,-94,-96,-97,-98,-99,-100,-101,-102,-103,-112,-95,-104,-113,-114,81,81,-107,-109,-115,-116,81,-108,81,81,-110,-111,]),'FOR':([19,31,33,37,68,69,70,71,72,73,74,75,76,77,83,130,131,166,167,175,176,182,183,186,187,188,191,194,195,196,197,],[-8,82,-8,-81,82,-94,-96,-97,-98,-99,-100,-101,-102,-103,-112,-95,-104,-113,-114,82,82,-107,-109,-115,-116,82,-108,82,82,-110,-111,]),'BREAK':([19,31,33,37,68,69,70,71,72,73,74,75,76,77,83,130,131,166,167,175,176,182,183,186,187,188,191,194,195,196,197,],[-8,83,-8,-81,83,-94,-96,-97,-98,-99,-100,-101,-102,-103,-112,-95,-104,-113,-114,83,83,-107,-109,-115,-116,83,-108,83,83,-110,-111,]),'RETURN':([19,31,33,37,68,69,70,71,72,73,74,75,76,77,83,130,131,166,167,175,176,182,183,186,187,188,191,194,195,196,197,],[-8,84,-8,-81,84,-94,-96,-97,-98,-99,-100,-101,-102,-103,-112,-95,-104,-113,-114,84,84,-107,-109,-115,-116,84,-108,84,84,-110,-111,]),'ASSERT':([19,31,33,37,68,69,70,71,72,73,74,75,76,77,83,130,131,166,167,175,176,182,183,186,187,188,191,194,195,196,197,],[-8,85,-8,-81,85,-94,-96,-97,-98,-99,-100,-101,-102,-103,-112,-95,-104,-113,-114,85,85,-107,-109,-115,-116,85,-108,85,85,-110,-111,]),'PRINT':([19,31,33,37,68,69,70,71,72,73,74,75,76,77,83,130,131,166,167,175,176,182,183,186,187,188,191,194,195,196,197,],[-8,86,-8,-81,86,-94,-96,-97,-98,-99,-100,-101,-102,-103,-112,-95,-104,-113,-114,86,86,-107,-109,-115,-116,86,-108,86,86,-110,-111,]),'READ':([19,31,33,37,68,69,70,71,72,73,74,75,76,77,83,130,131,166,167,175,176,182,183,186,187,188,191,194,195,196,197,],[-8,87,-8,-81,87,-94,-96,-97,-98,-99,-100,-101,-102,-103,-112,-95,-104,-113,-114,87,87,-107,-109,-115,-116,87,-108,87,87,-110,-111,]),'ADDRESS':([19,26,31,33,36,37,44,45,46,50,51,52,55,56,68,69,70,71,72,73,74,75,76,77,83,84,85,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,125,130,131,132,133,134,137,138,139,154,166,167,174,175,176,177,178,182,183,186,187,188,189,190,191,194,195,196,197,],[-8,55,55,-8,55,-81,-74,-75,-76,55,55,55,-73,-77,55,-94,-96,-97,-98,-99,-100,-101,-102,-103,-112,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-67,-68,-69,-70,-71,-72,55,55,55,-95,-104,55,55,55,55,55,55,55,-113,-114,55,55,55,55,55,-107,-109,-115,-116,55,55,55,-108,55,55,-110,-111,]),'NOT':([19,26,31,33,36,37,44,45,46,50,51,52,55,56,68,69,70,71,72,73,74,75,76,77,83,84,85,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,125,130,131,132,133,134,137,138,139,154,166,167,174,175,176,177,178,182,183,186,187,188,189,190,191,194,195,196,197,],[-8,56,56,-8,56,-81,-74,-75,-76,56,56,56,-73,-77,56,-94,-96,-97,-98,-99,-100,-101,-102,-103,-112,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-67,-68,-69,-70,-71,-72,56,56,56,-95,-104,56,56,56,56,56,56,56,-113,-114,56,56,56,56,56,-107,-109,-115,-116,56,56,56,-108,56,56,-110,-111,]),'STRING':([19,26,31,33,36,37,44,45,46,50,51,52,55,56,68,69,70,71,72,73,74,75,76,77,83,84,85,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,125,130,131,132,133,134,137,138,139,154,166,167,174,175,176,177,178,182,183,186,187,188,189,190,191,194,195,196,197,],[-8,59,59,-8,59,-81,-74,-75,-76,59,59,59,-73,-77,59,-94,-96,-97,-98,-99,-100,-101,-102,-103,-112,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-67,-68,-69,-70,-71,-72,59,59,59,-95,-104,59,59,59,59,59,59,59,-113,-114,59,59,59,59,59,-107,-109,-115,-116,59,59,59,-108,59,59,-110,-111,]),'INT_CONST':([19,26,31,33,36,37,44,45,46,50,51,52,55,56,68,69,70,71,72,73,74,75,76,77,83,84,85,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,125,130,131,132,133,134,137,138,139,154,166,167,174,175,176,177,178,182,183,186,187,188,189,190,191,194,195,196,197,],[-8,60,60,-8,60,-81,-74,-75,-76,60,60,60,-73,-77,60,-94,-96,-97,-98,-99,-100,-101,-102,-103,-112,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-67,-68,-69,-70,-71,-72,60,60,60,-95,-104,60,60,60,60,60,60,60,-113,-114,60,60,60,60,60,-107,-109,-115,-116,60,60,60,-108,60,60,-110,-111,]),'CHAR_CONST':([19,26,31,33,36,37,44,45,46,50,51,52,55,56,68,69,70,71,72,73,74,75,76,77,83,84,85,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,125,130,131,132,133,134,137,138,139,154,166,167,174,175,176,177,178,182,183,186,187,188,189,190,191,194,195,196,197,],[-8,61,61,-8,61,-81,-74,-75,-76,61,61,61,-73,-77,61,-94,-96,-97,-98,-99,-100,-101,-102,-103,-112,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-67,-68,-69,-70,-71,-72,61,61,61,-95,-104,61,61,61,61,61,61,61,-113,-114,61,61,61,61,61,-107,-109,-115,-116,61,61,61,-108,61,61,-110,-111,]),'FLOAT_CONST':([19,26,31,33,36,37,44,45,46,50,51,52,55,56,68,69,70,71,72,73,74,75,76,77,83,84,85,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,125,130,131,132,133,134,137,138,139,154,166,167,174,175,176,177,178,182,183,186,187,188,189,190,191,194,195,196,197,],[-8,62,62,-8,62,-81,-74,-75,-76,62,62,62,-73,-77,62,-94,-96,-97,-98,-99,-100,-101,-102,-103,-112,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-67,-68,-69,-70,-71,-72,62,62,62,-95,-104,62,62,62,62,62,62,62,-113,-114,62,62,62,62,62,-107,-109,-115,-116,62,62,62,-108,62,62,-110,-111,]),'ELSE':([68,69,70,71,72,73,74,75,76,77,83,130,131,166,167,182,183,186,187,191,196,197,],[-93,-94,-96,-97,-98,-99,-100,-101,-102,-103,-112,-95,-104,-113,-114,188,-109,-115,-116,-108,-110,-111,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_declaration_list':([0,],[2,]),'global_declaration':([0,2,],[3,17,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,6,18,21,31,35,68,134,175,176,188,194,195,],[5,5,19,33,19,33,33,19,165,19,19,19,19,19,]),'declarator':([0,2,7,9,20,38,67,],[6,6,21,29,34,34,129,]),'type_specifier':([0,2,6,18,21,27,31,35,48,68,127,134,175,176,188,194,195,],[7,7,20,20,20,67,20,20,117,20,67,20,20,20,20,20,20,]),'direct_declarator':([0,2,7,9,20,38,67,],[8,8,8,28,8,8,8,]),'pointer':([0,2,7,9,15,20,38,67,],[9,9,9,9,30,9,9,9,]),'identifier':([0,2,7,9,20,26,27,31,36,38,50,51,52,67,68,84,85,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,119,125,132,133,134,137,138,139,154,174,175,176,177,178,188,189,190,194,195,],[14,14,14,14,14,57,65,57,57,14,57,57,57,14,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'declaration_list':([6,18,21,31,35,68,175,176,188,194,195,],[18,31,35,31,31,31,31,31,31,31,31,]),'init_declarator_list_opt':([7,20,],[22,22,]),'init_declarator_list':([7,20,],[23,23,]),'empty':([7,20,26,31,68,84,119,134,137,175,176,177,178,188,189,190,194,195,],[24,24,41,88,88,88,158,88,88,88,88,88,88,88,88,88,88,88,]),'init_declarator':([7,20,38,],[25,25,95,]),'compound_statement':([18,31,35,68,175,176,188,194,195,],[32,71,91,71,71,71,71,71,71,]),'constant_expression_opt':([26,],[39,]),'constant_expression':([26,],[40,]),'binary_expression':([26,31,36,50,51,52,68,84,85,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,119,125,132,133,134,137,138,139,154,174,175,176,177,178,188,189,190,194,195,],[42,89,89,89,89,89,89,89,89,140,141,142,143,144,145,146,147,148,149,150,151,152,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'cast_expression':([26,31,36,50,51,52,68,84,85,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,119,125,132,133,134,137,138,139,154,174,175,176,177,178,188,189,190,194,195,],[43,43,43,43,43,124,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,171,43,43,43,43,43,43,43,43,43,43,]),'unary_expression':([26,31,36,50,51,52,68,84,85,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,119,125,132,133,134,137,138,139,154,174,175,176,177,178,188,189,190,194,195,],[47,90,90,122,123,47,90,90,90,47,47,47,47,47,47,47,47,47,47,47,47,47,90,90,90,90,90,90,90,90,90,90,47,90,90,90,90,90,90,90,90,90,90,]),'postfix_expression':([26,31,36,50,51,52,68,84,85,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,119,125,132,133,134,137,138,139,154,174,175,176,177,178,188,189,190,194,195,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'unary_operator':([26,31,36,50,51,52,68,84,85,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,119,125,132,133,134,137,138,139,154,174,175,176,177,178,188,189,190,194,195,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'primary_expression':([26,31,36,50,51,52,68,84,85,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,119,125,132,133,134,137,138,139,154,174,175,176,177,178,188,189,190,194,195,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'expression':([26,31,36,50,51,52,68,84,85,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,119,125,132,133,134,137,138,139,154,174,175,176,177,178,188,189,190,194,195,],[54,80,54,54,54,54,80,80,136,54,54,54,54,54,54,54,54,54,54,54,54,54,54,155,54,54,162,163,80,80,54,54,54,54,80,80,80,80,80,80,80,80,80,]),'constant':([26,31,36,50,51,52,68,84,85,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,119,125,132,133,134,137,138,139,154,174,175,176,177,178,188,189,190,194,195,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'assignment_expression':([26,31,36,50,51,52,68,84,85,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,119,125,132,133,134,137,138,139,154,174,175,176,177,178,188,189,190,194,195,],[63,63,93,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,153,63,159,160,63,63,63,63,159,93,63,181,63,63,63,63,63,63,63,63,63,]),'parameter_list':([27,],[64,]),'parameter_declaration':([27,127,],[66,161,]),'statement_list':([31,],[68,]),'statement':([31,68,175,176,188,194,195,],[69,130,182,183,191,196,197,]),'expression_statement':([31,68,175,176,188,194,195,],[70,70,70,70,70,70,70,]),'selection_statement':([31,68,175,176,188,194,195,],[72,72,72,72,72,72,72,]),'iteration_statement':([31,68,175,176,188,194,195,],[73,73,73,73,73,73,73,]),'jump_statement':([31,68,175,176,188,194,195,],[74,74,74,74,74,74,74,]),'assert_statement':([31,68,175,176,188,194,195,],[75,75,75,75,75,75,75,]),'print_statement':([31,68,175,176,188,194,195,],[76,76,76,76,76,76,76,]),'read_statement':([31,68,175,176,188,194,195,],[77,77,77,77,77,77,77,]),'expression_opt':([31,68,84,134,137,175,176,177,178,188,189,190,194,195,],[78,78,135,164,168,78,78,184,185,78,192,193,78,78,]),'initializer':([36,139,],[92,170,]),'initializer_list':([36,139,],[94,94,]),'assignment_operator':([47,90,122,123,],[110,110,110,110,]),'argument_expression_opt':([119,],[156,]),'argument_expression':([119,138,],[157,169,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_declaration_list','program',1,'p_program','uc_parser.py',21),
  ('global_declaration_list -> global_declaration','global_declaration_list',1,'p_global_declaration_list','uc_parser.py',26),
  ('global_declaration_list -> global_declaration_list global_declaration','global_declaration_list',2,'p_global_declaration_list','uc_parser.py',27),
  ('global_declaration -> function_definition','global_declaration',1,'p_global_declaration','uc_parser.py',32),
  ('global_declaration -> declaration','global_declaration',1,'p_global_declaration','uc_parser.py',33),
  ('function_definition -> declarator declaration_list compound_statement','function_definition',3,'p_function_definition','uc_parser.py',38),
  ('function_definition -> type_specifier declarator declaration_list compound_statement','function_definition',4,'p_function_definition','uc_parser.py',39),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','uc_parser.py',47),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','uc_parser.py',48),
  ('identifier -> ID','identifier',1,'p_identifier','uc_parser.py',57),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','uc_parser.py',61),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','uc_parser.py',62),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','uc_parser.py',63),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','uc_parser.py',64),
  ('pointer -> TIMES','pointer',1,'p_pointer','uc_parser.py',69),
  ('pointer -> TIMES pointer','pointer',2,'p_pointer','uc_parser.py',70),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','uc_parser.py',78),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','uc_parser.py',79),
  ('direct_declarator -> identifier','direct_declarator',1,'p_direct_declarator','uc_parser.py',87),
  ('direct_declarator -> declarator','direct_declarator',1,'p_direct_declarator','uc_parser.py',88),
  ('direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET','direct_declarator',4,'p_direct_declarator','uc_parser.py',89),
  ('direct_declarator -> direct_declarator LPAREN parameter_list RPAREN','direct_declarator',4,'p_direct_declarator','uc_parser.py',90),
  ('direct_declarator -> direct_declarator LPAREN identifier RPAREN','direct_declarator',4,'p_direct_declarator','uc_parser.py',91),
  ('constant_expression_opt -> constant_expression','constant_expression_opt',1,'p_constant_expression_opt','uc_parser.py',99),
  ('constant_expression_opt -> empty','constant_expression_opt',1,'p_constant_expression_opt','uc_parser.py',100),
  ('constant_expression -> binary_expression','constant_expression',1,'p_constant_expression','uc_parser.py',108),
  ('binary_expression -> cast_expression','binary_expression',1,'p_binary_expression','uc_parser.py',113),
  ('binary_expression -> binary_expression TIMES binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',114),
  ('binary_expression -> binary_expression DIVIDE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',115),
  ('binary_expression -> binary_expression MOD binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',116),
  ('binary_expression -> binary_expression PLUS binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',117),
  ('binary_expression -> binary_expression MINUS binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',118),
  ('binary_expression -> binary_expression LT binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',119),
  ('binary_expression -> binary_expression LE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',120),
  ('binary_expression -> binary_expression GT binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',121),
  ('binary_expression -> binary_expression GE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',122),
  ('binary_expression -> binary_expression EQ binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',123),
  ('binary_expression -> binary_expression NQ binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',124),
  ('binary_expression -> binary_expression AND binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',125),
  ('binary_expression -> binary_expression OR binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',126),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','uc_parser.py',170),
  ('cast_expression -> LPAREN type_specifier RPAREN cast_expression','cast_expression',4,'p_cast_expression','uc_parser.py',171),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','uc_parser.py',179),
  ('unary_expression -> INCREASE unary_expression','unary_expression',2,'p_unary_expression','uc_parser.py',180),
  ('unary_expression -> DECREASE unary_expression','unary_expression',2,'p_unary_expression','uc_parser.py',181),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','uc_parser.py',182),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','uc_parser.py',190),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression','uc_parser.py',191),
  ('postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN','postfix_expression',4,'p_postfix_expression','uc_parser.py',192),
  ('postfix_expression -> postfix_expression INCREASE','postfix_expression',2,'p_postfix_expression','uc_parser.py',193),
  ('postfix_expression -> postfix_expression DECREASE','postfix_expression',2,'p_postfix_expression','uc_parser.py',194),
  ('argument_expression_opt -> argument_expression','argument_expression_opt',1,'p_argument_expression_opt','uc_parser.py',205),
  ('argument_expression_opt -> empty','argument_expression_opt',1,'p_argument_expression_opt','uc_parser.py',206),
  ('primary_expression -> identifier','primary_expression',1,'p_primary_expression','uc_parser.py',214),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression','uc_parser.py',215),
  ('primary_expression -> STRING','primary_expression',1,'p_primary_expression','uc_parser.py',216),
  ('primary_expression -> expression','primary_expression',1,'p_primary_expression','uc_parser.py',217),
  ('constant -> INT_CONST','constant',1,'p_constant','uc_parser.py',222),
  ('constant -> CHAR_CONST','constant',1,'p_constant','uc_parser.py',223),
  ('constant -> FLOAT_CONST','constant',1,'p_constant','uc_parser.py',224),
  ('expression -> assignment_expression','expression',1,'p_expression','uc_parser.py',229),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','uc_parser.py',230),
  ('argument_expression -> assignment_expression','argument_expression',1,'p_argument_expression','uc_parser.py',239),
  ('argument_expression -> argument_expression COMMA assignment_expression','argument_expression',3,'p_argument_expression','uc_parser.py',240),
  ('assignment_expression -> binary_expression','assignment_expression',1,'p_assignment_expression','uc_parser.py',249),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','uc_parser.py',250),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','uc_parser.py',258),
  ('assignment_operator -> EQTIMES','assignment_operator',1,'p_assignment_operator','uc_parser.py',259),
  ('assignment_operator -> EQDIV','assignment_operator',1,'p_assignment_operator','uc_parser.py',260),
  ('assignment_operator -> EQMOD','assignment_operator',1,'p_assignment_operator','uc_parser.py',261),
  ('assignment_operator -> EQPLUS','assignment_operator',1,'p_assignment_operator','uc_parser.py',262),
  ('assignment_operator -> EQMINUS','assignment_operator',1,'p_assignment_operator','uc_parser.py',263),
  ('unary_operator -> ADDRESS','unary_operator',1,'p_unary_operator','uc_parser.py',268),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','uc_parser.py',269),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','uc_parser.py',270),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','uc_parser.py',271),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','uc_parser.py',272),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','uc_parser.py',277),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','uc_parser.py',278),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','uc_parser.py',287),
  ('declaration -> type_specifier init_declarator_list_opt SEMI','declaration',3,'p_declaration','uc_parser.py',292),
  ('init_declarator_list_opt -> init_declarator_list','init_declarator_list_opt',1,'p_init_declarator_list_opt','uc_parser.py',297),
  ('init_declarator_list_opt -> empty','init_declarator_list_opt',1,'p_init_declarator_list_opt','uc_parser.py',298),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','uc_parser.py',306),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','uc_parser.py',307),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','uc_parser.py',315),
  ('init_declarator -> declarator EQUALS initializer','init_declarator',3,'p_init_declarator','uc_parser.py',316),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','uc_parser.py',324),
  ('initializer -> initializer_list','initializer',1,'p_initializer','uc_parser.py',325),
  ('initializer -> initializer_list COMMA','initializer',2,'p_initializer','uc_parser.py',326),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','uc_parser.py',331),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','uc_parser.py',332),
  ('compound_statement -> declaration_list statement_list','compound_statement',2,'p_compound_statement','uc_parser.py',340),
  ('statement_list -> statement','statement_list',1,'p_statement_list','uc_parser.py',345),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','uc_parser.py',346),
  ('statement -> expression_statement','statement',1,'p_statement','uc_parser.py',354),
  ('statement -> compound_statement','statement',1,'p_statement','uc_parser.py',355),
  ('statement -> selection_statement','statement',1,'p_statement','uc_parser.py',356),
  ('statement -> iteration_statement','statement',1,'p_statement','uc_parser.py',357),
  ('statement -> jump_statement','statement',1,'p_statement','uc_parser.py',358),
  ('statement -> assert_statement','statement',1,'p_statement','uc_parser.py',359),
  ('statement -> print_statement','statement',1,'p_statement','uc_parser.py',360),
  ('statement -> read_statement','statement',1,'p_statement','uc_parser.py',361),
  ('expression_statement -> expression_opt SEMI','expression_statement',2,'p_expression_statement','uc_parser.py',366),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','uc_parser.py',371),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','uc_parser.py',372),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement','uc_parser.py',380),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement','uc_parser.py',381),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement','uc_parser.py',389),
  ('iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement','iteration_statement',9,'p_iteration_statement','uc_parser.py',390),
  ('iteration_statement -> FOR LPAREN declaration SEMI expression_opt SEMI expression_opt RPAREN statement','iteration_statement',9,'p_iteration_statement','uc_parser.py',391),
  ('jump_statement -> BREAK','jump_statement',1,'p_jump_statement','uc_parser.py',399),
  ('jump_statement -> RETURN expression_opt SEMI','jump_statement',3,'p_jump_statement','uc_parser.py',400),
  ('assert_statement -> ASSERT expression SEMI','assert_statement',3,'p_assert_statement','uc_parser.py',408),
  ('print_statement -> PRINT LPAREN expression_opt RPAREN SEMI','print_statement',5,'p_print_statement','uc_parser.py',413),
  ('read_statement -> READ LPAREN argument_expression RPAREN SEMI','read_statement',5,'p_read_statement','uc_parser.py',418),
  ('empty -> <empty>','empty',0,'p_empty','uc_parser.py',423),
]
