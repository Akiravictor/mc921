Outputting the AST to Files/teste0.ast.
I'm on parser! :D
I'm on lexer!
Inside p_global_declaration_list:
p[0] = None
p[1] = None
End
Inside p_type_specifier:
p[0] = None
p[1] = int
End
Inside p_pointer_opt:
p[0] = None
p[1] = None
End
Inside p_direct_declarator:
p[0] = None
p[1] = v
End
Inside p_constant_expression_opt:
p[0] = None
p[1] = None
End
Inside p_direct_declarator:
p[0] = None
p[1] = v
p[2] = [
p[3] = None
p[4] = ]
End
Inside p_declarator:
p[0] = None
p[1] = None
p[2] = ('Array', 'v', '')
End
Inside p_constant:
p[0] = None
p[1] = 1
End
Inside p_primary_expression:
p[0] = None
p[1] = 1
End
Inside p_postfix_expression:
p[0] = None
p[1] = 1
End
Inside p_unary_expression:
p[0] = None
p[1] = 1
End
Inside p_cast_expression:
p[0] = None
p[1] = 1
End
Inside p_binary_expression:
p[0] = None
p[1] = 1
End
Inside p_assignment_expression:
p[0] = None
p[1] = 1
End
Inside p_initializer:
p[0] = None
p[1] = 1
End
Inside p_initializer_list:
p[0] = None
p[1] = 1
End
Inside p_constant:
p[0] = None
p[1] = 2
End
Inside p_primary_expression:
p[0] = None
p[1] = 2
End
Inside p_postfix_expression:
p[0] = None
p[1] = 2
End
Inside p_unary_expression:
p[0] = None
p[1] = 2
End
Inside p_cast_expression:
p[0] = None
p[1] = 2
End
Inside p_binary_expression:
p[0] = None
p[1] = 2
End
Inside p_assignment_expression:
p[0] = None
p[1] = 2
End
Inside p_initializer:
p[0] = None
p[1] = 2
End
Inside p_initializer_list:
p[0] = None
p[1] = ['1']
p[2] = ,
p[3] = 2
End
Inside p_constant:
p[0] = None
p[1] = 3
End
Inside p_primary_expression:
p[0] = None
p[1] = 3
End
Inside p_postfix_expression:
p[0] = None
p[1] = 3
End
Inside p_unary_expression:
p[0] = None
p[1] = 3
End
Inside p_cast_expression:
p[0] = None
p[1] = 3
End
Inside p_binary_expression:
p[0] = None
p[1] = 3
End
Inside p_assignment_expression:
p[0] = None
p[1] = 3
End
Inside p_initializer:
p[0] = None
p[1] = 3
End
Inside p_initializer_list:
p[0] = None
p[1] = ['1', '2']
p[2] = ,
p[3] = 3
End
Inside p_constant:
p[0] = None
p[1] = 4
End
Inside p_primary_expression:
p[0] = None
p[1] = 4
End
Inside p_postfix_expression:
p[0] = None
p[1] = 4
End
Inside p_unary_expression:
p[0] = None
p[1] = 4
End
Inside p_cast_expression:
p[0] = None
p[1] = 4
End
Inside p_binary_expression:
p[0] = None
p[1] = 4
End
Inside p_assignment_expression:
p[0] = None
p[1] = 4
End
Inside p_initializer:
p[0] = None
p[1] = 4
End
Inside p_initializer_list:
p[0] = None
p[1] = ['1', '2', '3']
p[2] = ,
p[3] = 4
End
Inside p_initializer:
p[0] = None
p[1] = {
p[2] = ['1', '2', '3', '4']
p[3] = }
End
Inside p_init_declarator:
p[0] = None
p[1] = ('Array', 'v', '')
p[2] = =
p[3] = ['1', '2', '3', '4']
End
Inside p_init_declarator_list:
p[0] = None
p[1] = ('=', ('Array', 'v', ''), ['1', '2', '3', '4'])
End
Inside p_init_declarator_list_opt:
p[0] = None
p[1] = [('=', ('Array', 'v', ''), ['1', '2', '3', '4'])]
End
Inside p_declaration:
p[0] = None
p[1] = int
p[2] = [('=', ('Array', 'v', ''), ['1', '2', '3', '4'])]
p[3] = ;
End
Inside p_global_declaration:
p[0] = None
p[1] = ('int', [('=', ('Array', 'v', ''), ['1', '2', '3', '4'])])
End
Inside p_global_declaration_list:
p[0] = None
p[1] = []
p[2] = ('int', [('=', ('Array', 'v', ''), ['1', '2', '3', '4'])])
End
Inside p_type_specifier:
p[0] = None
p[1] = int
End
Inside p_pointer_opt:
p[0] = None
p[1] = None
End
Inside p_direct_declarator:
p[0] = None
p[1] = main
End
Inside p_id_list:
p[0] = None
p[1] = None
End
Inside p_direct_declarator:
p[0] = None
p[1] = main
p[2] = (
p[3] = []
p[4] = )
End
Inside p_declarator:
p[0] = None
p[1] = None
p[2] = ('main', [])
End
Inside p_declaration_list_opt:
p[0] = None
p[1] = None
End
Inside p_statement_list_opt:
p[0] = None
p[1] = None
End
Inside p_type_specifier:
p[0] = None
p[1] = int
End
Inside p_pointer_opt:
p[0] = None
p[1] = None
End
Inside p_direct_declarator:
p[0] = None
p[1] = i
End
Inside p_declarator:
p[0] = None
p[1] = None
p[2] = i
End
Inside p_constant:
p[0] = None
p[1] = 1
End
Inside p_primary_expression:
p[0] = None
p[1] = 1
End
Inside p_postfix_expression:
p[0] = None
p[1] = 1
End
Inside p_unary_expression:
p[0] = None
p[1] = 1
End
Inside p_cast_expression:
p[0] = None
p[1] = 1
End
Inside p_binary_expression:
p[0] = None
p[1] = 1
End
Inside p_assignment_expression:
p[0] = None
p[1] = 1
End
Inside p_initializer:
p[0] = None
p[1] = 1
End
Inside p_init_declarator:
p[0] = None
p[1] = i
p[2] = =
p[3] = 1
End
Inside p_primary_expression:
p[0] = None
p[1] = i
End
Inside p_postfix_expression:
p[0] = None
p[1] = i
End
Inside p_unary_expression:
p[0] = None
p[1] = i
End
Inside p_cast_expression:
p[0] = None
p[1] = i
End
Inside p_binary_expression:
p[0] = None
p[1] = i
End
Inside p_constant:
p[0] = None
p[1] = 4
End
Inside p_primary_expression:
p[0] = None
p[1] = 4
End
Inside p_postfix_expression:
p[0] = None
p[1] = 4
End
Inside p_unary_expression:
p[0] = None
p[1] = 4
End
Inside p_cast_expression:
p[0] = None
p[1] = 4
End
Inside p_binary_expression:
p[0] = None
p[1] = 4
End
Inside p_binary_expression:
p[0] = None
p[1] = i
p[2] = <=
p[3] = 4
End
Inside p_assignment_expression:
p[0] = None
p[1] = ('<=', 'i', '4')
End
Inside p_expression:
p[0] = None
p[1] = ('<=', 'i', '4')
End
Inside p_expression_opt:
p[0] = None
p[1] = ('<=', 'i', '4')
End
Inside p_primary_expression:
p[0] = None
p[1] = i
End
Inside p_postfix_expression:
p[0] = None
p[1] = i
End
Inside p_postfix_expression:
p[0] = None
p[1] = i
p[2] = ++
End
Inside p_unary_expression:
p[0] = None
p[1] = ('++', 'i')
End
Inside p_cast_expression:
p[0] = None
p[1] = ('++', 'i')
End
Inside p_binary_expression:
p[0] = None
p[1] = ('++', 'i')
End
Inside p_assignment_expression:
p[0] = None
p[1] = ('++', 'i')
End
Inside p_expression:
p[0] = None
p[1] = ('++', 'i')
End
Inside p_expression_opt:
p[0] = None
p[1] = ('++', 'i')
End
Inside p_declaration_list_opt:
p[0] = None
p[1] = None
End
Inside p_statement_list_opt:
p[0] = None
p[1] = None
End
Inside p_primary_expression:
p[0] = None
p[1] = v
End
Inside p_postfix_expression:
p[0] = None
p[1] = v
End
Inside p_primary_expression:
p[0] = None
p[1] = i
End
Inside p_postfix_expression:
p[0] = None
p[1] = i
End
Inside p_unary_expression:
p[0] = None
p[1] = i
End
Inside p_cast_expression:
p[0] = None
p[1] = i
End
Inside p_binary_expression:
p[0] = None
p[1] = i
End
Inside p_assignment_expression:
p[0] = None
p[1] = i
End
Inside p_expression:
p[0] = None
p[1] = i
End
Inside p_postfix_expression:
p[0] = None
p[1] = v
p[2] = [
p[3] = i
p[4] = ]
End
Inside p_unary_expression:
p[0] = None
p[1] = ('v', 'i')
End
Inside p_cast_expression:
p[0] = None
p[1] = ('v', 'i')
End
Inside p_binary_expression:
p[0] = None
p[1] = ('v', 'i')
End
Inside p_assignment_expression:
p[0] = None
p[1] = ('v', 'i')
End
Inside p_expression:
p[0] = None
p[1] = ('v', 'i')
End
Inside p_expression_opt:
p[0] = None
p[1] = ('v', 'i')
End
Inside p_print_statement:
p[0] = None
p[1] = print
p[2] = (
p[3] = ('v', 'i')
p[4] = )
p[5] = ;
End
Inside p_statement:
p[0] = None
p[1] = ('print', ('v', 'i'))
End
Inside p_statement_list_opt:
p[0] = None
p[1] = []
p[2] = ('print', ('v', 'i'))
End
Inside p_primary_expression:
p[0] = None
p[1] = i
End
Inside p_postfix_expression:
p[0] = None
p[1] = i
End
Inside p_unary_expression:
p[0] = None
p[1] = i
End
Inside p_cast_expression:
p[0] = None
p[1] = i
End
Inside p_binary_expression:
p[0] = None
p[1] = i
End
Inside p_assignment_expression:
p[0] = None
p[1] = i
End
Inside p_expression:
p[0] = None
p[1] = i
End
Inside p_expression_opt:
p[0] = None
p[1] = i
End
Inside p_print_statement:
p[0] = None
p[1] = print
p[2] = (
p[3] = i
p[4] = )
p[5] = ;
End
Inside p_statement:
p[0] = None
p[1] = ('print', 'i')
End
Inside p_statement_list_opt:
p[0] = None
p[1] = [('print', ('v', 'i'))]
p[2] = ('print', 'i')
End
Inside p_compound_statement:
p[0] = None
p[1] = {
p[2] = []
p[3] = [('print', ('v', 'i')), ('print', 'i')]
p[4] = }
End
Inside p_statement:
p[0] = None
p[1] = ([], [('print', ('v', 'i')), ('print', 'i')])
End
Inside p_iteration_statement:
p[0] = None
p[1] = for
p[2] = (
p[3] = int
p[4] = ('=', 'i', '1')
p[5] = ;
p[6] = ('<=', 'i', '4')
p[7] = ;
p[8] = ('++', 'i')
p[9] = )
p[10] = ([], [('print', ('v', 'i')), ('print', 'i')])
End
Inside p_statement:
p[0] = None
p[1] = ('for', 'int', ('=', 'i', '1'), ('<=', 'i', '4'), ('++', 'i'), ([], [('print', ('v', 'i')), ('print', 'i')]))
End
Inside p_statement_list_opt:
p[0] = None
p[1] = []
p[2] = ('for', 'int', ('=', 'i', '1'), ('<=', 'i', '4'), ('++', 'i'), ([], [('print', ('v', 'i')), ('print', 'i')]))
End
Inside p_jump_statement:
p[0] = None
p[1] = return
p[2] = ;
End
Inside p_statement:
p[0] = None
p[1] = None
End
Inside p_statement_list_opt:
p[0] = None
p[1] = [('for', 'int', ('=', 'i', '1'), ('<=', 'i', '4'), ('++', 'i'), ([], [('print', ('v', 'i')), ('print', 'i')]))]
p[2] = None
End
Inside p_compound_statement:
p[0] = None
p[1] = {
p[2] = []
p[3] = [('for', 'int', ('=', 'i', '1'), ('<=', 'i', '4'), ('++', 'i'), ([], [('print', ('v', 'i')), ('print', 'i')]))]
p[4] = }
End
Inside p_function_definition:
p[0] = None
p[1] = int
p[2] = ('main', [])
p[3] = ([], [('for', 'int', ('=', 'i', '1'), ('<=', 'i', '4'), ('++', 'i'), ([], [('print', ('v', 'i')), ('print', 'i')]))])
End
Inside p_global_declaration:
p[0] = None
p[1] = ('int', ('main', []), ([], [('for', 'int', ('=', 'i', '1'), ('<=', 'i', '4'), ('++', 'i'), ([], [('print', ('v', 'i')), ('print', 'i')]))]))
End
Inside p_global_declaration_list:
p[0] = None
p[1] = [('int', [('=', ('Array', 'v', ''), ['1', '2', '3', '4'])])]
p[2] = ('int', ('main', []), ([], [('for', 'int', ('=', 'i', '1'), ('<=', 'i', '4'), ('++', 'i'), ([], [('print', ('v', 'i')), ('print', 'i')]))]))
End
Inside p_program:
p[0] = None
p[1] = [('int', [('=', ('Array', 'v', ''), ['1', '2', '3', '4'])]), ('int', ('main', []), ([], [('for', 'int', ('=', 'i', '1'), ('<=', 'i', '4'), ('++', 'i'), ([], [('print', ('v', 'i')), ('print', 'i')]))]))]
End
[('int', [('=', ('Array', 'v', ''), ['1', '2', '3', '4'])]), ('int', ('main', []), ([], [('for', 'int', ('=', 'i', '1'), ('<=', 'i', '4'), ('++', 'i'), ([], [('print', ('v', 'i')), ('print', 'i')]))]))]
I'm on show
