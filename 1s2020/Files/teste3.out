Outputting the AST to Files/teste3.ast.
I'm on parser! :D
I'm on lexer!
Inside p_global_declaration_list:
p[0] = None
p[1] = None
End
Inside p_type_specifier:
p[0] = None
p[1] = int
End
Inside p_pointer_opt:
p[0] = None
p[1] = None
End
Inside p_direct_declarator:
p[0] = None
p[1] = main
End
Inside p_id_list:
p[0] = None
p[1] = None
End
Inside p_direct_declarator:
p[0] = None
p[1] = main
p[2] = (
p[3] = []
p[4] = )
End
Inside p_declarator:
p[0] = None
p[1] = None
p[2] = ('main', [])
End
Inside p_declaration_list_opt:
p[0] = None
p[1] = None
End
Inside p_type_specifier:
p[0] = None
p[1] = int
End
Inside p_pointer_opt:
p[0] = None
p[1] = None
End
Inside p_direct_declarator:
p[0] = None
p[1] = i
End
Inside p_declarator:
p[0] = None
p[1] = None
p[2] = i
End
Inside p_init_declarator:
p[0] = None
p[1] = i
End
Inside p_init_declarator_list:
p[0] = None
p[1] = i
End
Inside p_pointer_opt:
p[0] = None
p[1] = None
End
Inside p_direct_declarator:
p[0] = None
p[1] = n
End
Inside p_declarator:
p[0] = None
p[1] = None
p[2] = n
End
Inside p_init_declarator:
p[0] = None
p[1] = n
End
Inside p_init_declarator_list:
p[0] = None
p[1] = ['i']
p[2] = ,
p[3] = n
End
Inside p_pointer_opt:
p[0] = None
p[1] = None
End
Inside p_direct_declarator:
p[0] = None
p[1] = t1
End
Inside p_declarator:
p[0] = None
p[1] = None
p[2] = t1
End
Inside p_constant:
p[0] = None
p[1] = 0
End
Inside p_primary_expression:
p[0] = None
p[1] = 0
End
Inside p_postfix_expression:
p[0] = None
p[1] = 0
End
Inside p_unary_expression:
p[0] = None
p[1] = 0
End
Inside p_cast_expression:
p[0] = None
p[1] = 0
End
Inside p_binary_expression:
p[0] = None
p[1] = 0
End
Inside p_assignment_expression:
p[0] = None
p[1] = 0
End
Inside p_initializer:
p[0] = None
p[1] = 0
End
Inside p_init_declarator:
p[0] = None
p[1] = t1
p[2] = =
p[3] = 0
End
Inside p_init_declarator_list:
p[0] = None
p[1] = ['i', 'n']
p[2] = ,
p[3] = ('=', 't1', '0')
End
Inside p_pointer_opt:
p[0] = None
p[1] = None
End
Inside p_direct_declarator:
p[0] = None
p[1] = t2
End
Inside p_declarator:
p[0] = None
p[1] = None
p[2] = t2
End
Inside p_constant:
p[0] = None
p[1] = 1
End
Inside p_primary_expression:
p[0] = None
p[1] = 1
End
Inside p_postfix_expression:
p[0] = None
p[1] = 1
End
Inside p_unary_expression:
p[0] = None
p[1] = 1
End
Inside p_cast_expression:
p[0] = None
p[1] = 1
End
Inside p_binary_expression:
p[0] = None
p[1] = 1
End
Inside p_assignment_expression:
p[0] = None
p[1] = 1
End
Inside p_initializer:
p[0] = None
p[1] = 1
End
Inside p_init_declarator:
p[0] = None
p[1] = t2
p[2] = =
p[3] = 1
End
Inside p_init_declarator_list:
p[0] = None
p[1] = ['i', 'n', ('=', 't1', '0')]
p[2] = ,
p[3] = ('=', 't2', '1')
End
Inside p_pointer_opt:
p[0] = None
p[1] = None
End
Inside p_direct_declarator:
p[0] = None
p[1] = nextTerm
End
Inside p_declarator:
p[0] = None
p[1] = None
p[2] = nextTerm
End
Inside p_init_declarator:
p[0] = None
p[1] = nextTerm
End
Inside p_init_declarator_list:
p[0] = None
p[1] = ['i', 'n', ('=', 't1', '0'), ('=', 't2', '1')]
p[2] = ,
p[3] = nextTerm
End
Inside p_init_declarator_list_opt:
p[0] = None
p[1] = ['i', 'n', ('=', 't1', '0'), ('=', 't2', '1'), 'nextTerm']
End
Inside p_declaration:
p[0] = None
p[1] = int
p[2] = ['i', 'n', ('=', 't1', '0'), ('=', 't2', '1'), 'nextTerm']
p[3] = ;
End
Inside p_declaration_list_opt:
p[0] = None
p[1] = []
p[2] = ('int', ['i', 'n', ('=', 't1', '0'), ('=', 't2', '1'), 'nextTerm'])
End
Inside p_statement_list_opt:
p[0] = None
p[1] = None
End
Inside p_primary_expression:
p[0] = None
p[1] = "Enter the number of terms: "
End
Inside p_postfix_expression:
p[0] = None
p[1] = "Enter the number of terms: "
End
Inside p_unary_expression:
p[0] = None
p[1] = "Enter the number of terms: "
End
Inside p_cast_expression:
p[0] = None
p[1] = "Enter the number of terms: "
End
Inside p_binary_expression:
p[0] = None
p[1] = "Enter the number of terms: "
End
Inside p_assignment_expression:
p[0] = None
p[1] = "Enter the number of terms: "
End
Inside p_expression:
p[0] = None
p[1] = "Enter the number of terms: "
End
Inside p_expression_opt:
p[0] = None
p[1] = "Enter the number of terms: "
End
Inside p_print_statement:
p[0] = None
p[1] = print
p[2] = (
p[3] = "Enter the number of terms: "
p[4] = )
p[5] = ;
End
Inside p_statement:
p[0] = None
p[1] = ('print', '"Enter the number of terms: "')
End
Inside p_statement_list_opt:
p[0] = None
p[1] = []
p[2] = ('print', '"Enter the number of terms: "')
End
Inside p_primary_expression:
p[0] = None
p[1] = n
End
Inside p_postfix_expression:
p[0] = None
p[1] = n
End
Inside p_unary_expression:
p[0] = None
p[1] = n
End
Inside p_cast_expression:
p[0] = None
p[1] = n
End
Inside p_binary_expression:
p[0] = None
p[1] = n
End
Inside p_assignment_expression:
p[0] = None
p[1] = n
End
Inside p_argument_expression:
p[0] = None
p[1] = n
End
Inside p_read_statement:
p[0] = None
p[1] = read
p[2] = (
p[3] = n
p[4] = )
p[5] = ;
End
Inside p_statement:
p[0] = None
p[1] = ('read', 'n')
End
Inside p_statement_list_opt:
p[0] = None
p[1] = [('print', '"Enter the number of terms: "')]
p[2] = ('read', 'n')
End
Inside p_primary_expression:
p[0] = None
p[1] = "Fibonacci Series: "
End
Inside p_postfix_expression:
p[0] = None
p[1] = "Fibonacci Series: "
End
Inside p_unary_expression:
p[0] = None
p[1] = "Fibonacci Series: "
End
Inside p_cast_expression:
p[0] = None
p[1] = "Fibonacci Series: "
End
Inside p_binary_expression:
p[0] = None
p[1] = "Fibonacci Series: "
End
Inside p_assignment_expression:
p[0] = None
p[1] = "Fibonacci Series: "
End
Inside p_expression:
p[0] = None
p[1] = "Fibonacci Series: "
End
Inside p_expression_opt:
p[0] = None
p[1] = "Fibonacci Series: "
End
Inside p_print_statement:
p[0] = None
p[1] = print
p[2] = (
p[3] = "Fibonacci Series: "
p[4] = )
p[5] = ;
End
Inside p_statement:
p[0] = None
p[1] = ('print', '"Fibonacci Series: "')
End
Inside p_statement_list_opt:
p[0] = None
p[1] = [('print', '"Enter the number of terms: "'), ('read', 'n')]
p[2] = ('print', '"Fibonacci Series: "')
End
Inside p_pointer_opt:
p[0] = None
p[1] = None
End
Inside p_direct_declarator:
p[0] = None
p[1] = i
End
Inside p_declarator:
p[0] = None
p[1] = None
p[2] = i
End
Inside p_constant:
p[0] = None
p[1] = 1
End
Inside p_primary_expression:
p[0] = None
p[1] = 1
End
Inside p_postfix_expression:
p[0] = None
p[1] = 1
End
Inside p_unary_expression:
p[0] = None
p[1] = 1
End
Inside p_cast_expression:
p[0] = None
p[1] = 1
End
Inside p_binary_expression:
p[0] = None
p[1] = 1
End
Inside p_assignment_expression:
p[0] = None
p[1] = 1
End
Inside p_initializer:
p[0] = None
p[1] = 1
End
Inside p_init_declarator:
p[0] = None
p[1] = i
p[2] = =
p[3] = 1
End
Inside p_primary_expression:
p[0] = None
p[1] = i
End
Inside p_postfix_expression:
p[0] = None
p[1] = i
End
Inside p_unary_expression:
p[0] = None
p[1] = i
End
Inside p_cast_expression:
p[0] = None
p[1] = i
End
Inside p_binary_expression:
p[0] = None
p[1] = i
End
Inside p_primary_expression:
p[0] = None
p[1] = n
End
Inside p_postfix_expression:
p[0] = None
p[1] = n
End
Inside p_unary_expression:
p[0] = None
p[1] = n
End
Inside p_cast_expression:
p[0] = None
p[1] = n
End
Inside p_binary_expression:
p[0] = None
p[1] = n
End
Inside p_binary_expression:
p[0] = None
p[1] = i
p[2] = <=
p[3] = n
End
Inside p_assignment_expression:
p[0] = None
p[1] = ('<=', 'i', 'n')
End
Inside p_expression:
p[0] = None
p[1] = ('<=', 'i', 'n')
End
Inside p_expression_opt:
p[0] = None
p[1] = ('<=', 'i', 'n')
End
Inside p_primary_expression:
p[0] = None
p[1] = i
End
Inside p_postfix_expression:
p[0] = None
p[1] = i
End
Inside p_unary_expression:
p[0] = None
p[1] = i
End
Inside p_unary_expression:
p[0] = None
p[1] = ++
p[2] = i
End
Inside p_cast_expression:
p[0] = None
p[1] = ('++', 'i')
End
Inside p_binary_expression:
p[0] = None
p[1] = ('++', 'i')
End
Inside p_assignment_expression:
p[0] = None
p[1] = ('++', 'i')
End
Inside p_expression:
p[0] = None
p[1] = ('++', 'i')
End
Inside p_expression_opt:
p[0] = None
p[1] = ('++', 'i')
End
Inside p_declaration_list_opt:
p[0] = None
p[1] = None
End
Inside p_statement_list_opt:
p[0] = None
p[1] = None
End
Inside p_primary_expression:
p[0] = None
p[1] = t1
End
Inside p_postfix_expression:
p[0] = None
p[1] = t1
End
Inside p_unary_expression:
p[0] = None
p[1] = t1
End
Inside p_cast_expression:
p[0] = None
p[1] = t1
End
Inside p_binary_expression:
p[0] = None
p[1] = t1
End
Inside p_assignment_expression:
p[0] = None
p[1] = t1
End
Inside p_expression:
p[0] = None
p[1] = t1
End
Inside p_primary_expression:
p[0] = None
p[1] = " "
End
Inside p_postfix_expression:
p[0] = None
p[1] = " "
End
Inside p_unary_expression:
p[0] = None
p[1] = " "
End
Inside p_cast_expression:
p[0] = None
p[1] = " "
End
Inside p_binary_expression:
p[0] = None
p[1] = " "
End
Inside p_assignment_expression:
p[0] = None
p[1] = " "
End
Inside p_expression:
p[0] = None
p[1] = t1
p[2] = ,
p[3] = " "
End
Inside p_expression_opt:
p[0] = None
p[1] = ('t1', '" "')
End
Inside p_print_statement:
p[0] = None
p[1] = print
p[2] = (
p[3] = ('t1', '" "')
p[4] = )
p[5] = ;
End
Inside p_statement:
p[0] = None
p[1] = ('print', ('t1', '" "'))
End
Inside p_statement_list_opt:
p[0] = None
p[1] = []
p[2] = ('print', ('t1', '" "'))
End
Inside p_primary_expression:
p[0] = None
p[1] = nextTerm
End
Inside p_postfix_expression:
p[0] = None
p[1] = nextTerm
End
Inside p_unary_expression:
p[0] = None
p[1] = nextTerm
End
Inside p_assignment_operator:
p[0] = None
p[1] = =
End
Inside p_primary_expression:
p[0] = None
p[1] = t1
End
Inside p_postfix_expression:
p[0] = None
p[1] = t1
End
Inside p_unary_expression:
p[0] = None
p[1] = t1
End
Inside p_cast_expression:
p[0] = None
p[1] = t1
End
Inside p_binary_expression:
p[0] = None
p[1] = t1
End
Inside p_primary_expression:
p[0] = None
p[1] = t2
End
Inside p_postfix_expression:
p[0] = None
p[1] = t2
End
Inside p_unary_expression:
p[0] = None
p[1] = t2
End
Inside p_cast_expression:
p[0] = None
p[1] = t2
End
Inside p_binary_expression:
p[0] = None
p[1] = t2
End
Inside p_binary_expression:
p[0] = None
p[1] = t1
p[2] = +
p[3] = t2
End
Inside p_assignment_expression:
p[0] = None
p[1] = ('+', 't1', 't2')
End
Inside p_assignment_expression:
p[0] = None
p[1] = nextTerm
p[2] = =
p[3] = ('+', 't1', 't2')
End
Inside p_expression:
p[0] = None
p[1] = ('=', 'nextTerm', ('+', 't1', 't2'))
End
Inside p_expression_opt:
p[0] = None
p[1] = ('=', 'nextTerm', ('+', 't1', 't2'))
End
Inside p_expression_statement:
p[0] = None
p[1] = ('=', 'nextTerm', ('+', 't1', 't2'))
p[2] = ;
End
Inside p_statement:
p[0] = None
p[1] = ('=', 'nextTerm', ('+', 't1', 't2'))
End
Inside p_statement_list_opt:
p[0] = None
p[1] = [('print', ('t1', '" "'))]
p[2] = ('=', 'nextTerm', ('+', 't1', 't2'))
End
Inside p_primary_expression:
p[0] = None
p[1] = t1
End
Inside p_postfix_expression:
p[0] = None
p[1] = t1
End
Inside p_unary_expression:
p[0] = None
p[1] = t1
End
Inside p_assignment_operator:
p[0] = None
p[1] = =
End
Inside p_primary_expression:
p[0] = None
p[1] = t2
End
Inside p_postfix_expression:
p[0] = None
p[1] = t2
End
Inside p_unary_expression:
p[0] = None
p[1] = t2
End
Inside p_cast_expression:
p[0] = None
p[1] = t2
End
Inside p_binary_expression:
p[0] = None
p[1] = t2
End
Inside p_assignment_expression:
p[0] = None
p[1] = t2
End
Inside p_assignment_expression:
p[0] = None
p[1] = t1
p[2] = =
p[3] = t2
End
Inside p_expression:
p[0] = None
p[1] = ('=', 't1', 't2')
End
Inside p_expression_opt:
p[0] = None
p[1] = ('=', 't1', 't2')
End
Inside p_expression_statement:
p[0] = None
p[1] = ('=', 't1', 't2')
p[2] = ;
End
Inside p_statement:
p[0] = None
p[1] = ('=', 't1', 't2')
End
Inside p_statement_list_opt:
p[0] = None
p[1] = [('print', ('t1', '" "')), ('=', 'nextTerm', ('+', 't1', 't2'))]
p[2] = ('=', 't1', 't2')
End
Inside p_primary_expression:
p[0] = None
p[1] = t2
End
Inside p_postfix_expression:
p[0] = None
p[1] = t2
End
Inside p_unary_expression:
p[0] = None
p[1] = t2
End
Inside p_assignment_operator:
p[0] = None
p[1] = =
End
Inside p_primary_expression:
p[0] = None
p[1] = nextTerm
End
Inside p_postfix_expression:
p[0] = None
p[1] = nextTerm
End
Inside p_unary_expression:
p[0] = None
p[1] = nextTerm
End
Inside p_cast_expression:
p[0] = None
p[1] = nextTerm
End
Inside p_binary_expression:
p[0] = None
p[1] = nextTerm
End
Inside p_assignment_expression:
p[0] = None
p[1] = nextTerm
End
Inside p_assignment_expression:
p[0] = None
p[1] = t2
p[2] = =
p[3] = nextTerm
End
Inside p_expression:
p[0] = None
p[1] = ('=', 't2', 'nextTerm')
End
Inside p_expression_opt:
p[0] = None
p[1] = ('=', 't2', 'nextTerm')
End
Inside p_expression_statement:
p[0] = None
p[1] = ('=', 't2', 'nextTerm')
p[2] = ;
End
Inside p_statement:
p[0] = None
p[1] = ('=', 't2', 'nextTerm')
End
Inside p_statement_list_opt:
p[0] = None
p[1] = [('print', ('t1', '" "')), ('=', 'nextTerm', ('+', 't1', 't2')), ('=', 't1', 't2')]
p[2] = ('=', 't2', 'nextTerm')
End
Inside p_compound_statement:
p[0] = None
p[1] = {
p[2] = []
p[3] = [('print', ('t1', '" "')), ('=', 'nextTerm', ('+', 't1', 't2')), ('=', 't1', 't2'), ('=', 't2', 'nextTerm')]
p[4] = }
End
Inside p_statement:
p[0] = None
p[1] = ([], [('print', ('t1', '" "')), ('=', 'nextTerm', ('+', 't1', 't2')), ('=', 't1', 't2'), ('=', 't2', 'nextTerm')])
End
Inside p_iteration_statement:
p[0] = None
p[1] = for
p[2] = (
p[3] = ('=', 'i', '1')
p[4] = ;
p[5] = ('<=', 'i', 'n')
p[6] = ;
p[7] = ('++', 'i')
p[8] = )
p[9] = ([], [('print', ('t1', '" "')), ('=', 'nextTerm', ('+', 't1', 't2')), ('=', 't1', 't2'), ('=', 't2', 'nextTerm')])
End
Inside p_statement:
p[0] = None
p[1] = ('for', ('=', 'i', '1'), ('<=', 'i', 'n'), ('++', 'i'), ([], [('print', ('t1', '" "')), ('=', 'nextTerm', ('+', 't1', 't2')), ('=', 't1', 't2'), ('=', 't2', 'nextTerm')]))
End
Inside p_statement_list_opt:
p[0] = None
p[1] = [('print', '"Enter the number of terms: "'), ('read', 'n'), ('print', '"Fibonacci Series: "')]
p[2] = ('for', ('=', 'i', '1'), ('<=', 'i', 'n'), ('++', 'i'), ([], [('print', ('t1', '" "')), ('=', 'nextTerm', ('+', 't1', 't2')), ('=', 't1', 't2'), ('=', 't2', 'nextTerm')]))
End
Inside p_constant:
p[0] = None
p[1] = 0
End
Inside p_primary_expression:
p[0] = None
p[1] = 0
End
Inside p_postfix_expression:
p[0] = None
p[1] = 0
End
Inside p_unary_expression:
p[0] = None
p[1] = 0
End
Inside p_cast_expression:
p[0] = None
p[1] = 0
End
Inside p_binary_expression:
p[0] = None
p[1] = 0
End
Inside p_assignment_expression:
p[0] = None
p[1] = 0
End
Inside p_expression:
p[0] = None
p[1] = 0
End
Inside p_jump_statement:
p[0] = None
p[1] = return
p[2] = 0
p[3] = ;
End
Inside p_statement:
p[0] = None
p[1] = 0
End
Inside p_statement_list_opt:
p[0] = None
p[1] = [('print', '"Enter the number of terms: "'), ('read', 'n'), ('print', '"Fibonacci Series: "'), ('for', ('=', 'i', '1'), ('<=', 'i', 'n'), ('++', 'i'), ([], [('print', ('t1', '" "')), ('=', 'nextTerm', ('+', 't1', 't2')), ('=', 't1', 't2'), ('=', 't2', 'nextTerm')]))]
p[2] = 0
End
Inside p_compound_statement:
p[0] = None
p[1] = {
p[2] = [('int', ['i', 'n', ('=', 't1', '0'), ('=', 't2', '1'), 'nextTerm'])]
p[3] = [('print', '"Enter the number of terms: "'), ('read', 'n'), ('print', '"Fibonacci Series: "'), ('for', ('=', 'i', '1'), ('<=', 'i', 'n'), ('++', 'i'), ([], [('print', ('t1', '" "')), ('=', 'nextTerm', ('+', 't1', 't2')), ('=', 't1', 't2'), ('=', 't2', 'nextTerm')])), '0']
p[4] = }
End
Inside p_function_definition:
p[0] = None
p[1] = int
p[2] = ('main', [])
p[3] = ([('int', ['i', 'n', ('=', 't1', '0'), ('=', 't2', '1'), 'nextTerm'])], [('print', '"Enter the number of terms: "'), ('read', 'n'), ('print', '"Fibonacci Series: "'), ('for', ('=', 'i', '1'), ('<=', 'i', 'n'), ('++', 'i'), ([], [('print', ('t1', '" "')), ('=', 'nextTerm', ('+', 't1', 't2')), ('=', 't1', 't2'), ('=', 't2', 'nextTerm')])), '0'])
End
Inside p_global_declaration:
p[0] = None
p[1] = ('int', ('main', []), ([('int', ['i', 'n', ('=', 't1', '0'), ('=', 't2', '1'), 'nextTerm'])], [('print', '"Enter the number of terms: "'), ('read', 'n'), ('print', '"Fibonacci Series: "'), ('for', ('=', 'i', '1'), ('<=', 'i', 'n'), ('++', 'i'), ([], [('print', ('t1', '" "')), ('=', 'nextTerm', ('+', 't1', 't2')), ('=', 't1', 't2'), ('=', 't2', 'nextTerm')])), '0']))
End
Inside p_global_declaration_list:
p[0] = None
p[1] = []
p[2] = ('int', ('main', []), ([('int', ['i', 'n', ('=', 't1', '0'), ('=', 't2', '1'), 'nextTerm'])], [('print', '"Enter the number of terms: "'), ('read', 'n'), ('print', '"Fibonacci Series: "'), ('for', ('=', 'i', '1'), ('<=', 'i', 'n'), ('++', 'i'), ([], [('print', ('t1', '" "')), ('=', 'nextTerm', ('+', 't1', 't2')), ('=', 't1', 't2'), ('=', 't2', 'nextTerm')])), '0']))
End
Inside p_program:
p[0] = None
p[1] = [('int', ('main', []), ([('int', ['i', 'n', ('=', 't1', '0'), ('=', 't2', '1'), 'nextTerm'])], [('print', '"Enter the number of terms: "'), ('read', 'n'), ('print', '"Fibonacci Series: "'), ('for', ('=', 'i', '1'), ('<=', 'i', 'n'), ('++', 'i'), ([], [('print', ('t1', '" "')), ('=', 'nextTerm', ('+', 't1', 't2')), ('=', 't1', 't2'), ('=', 't2', 'nextTerm')])), '0']))]
End
[('int', ('main', []), ([('int', ['i', 'n', ('=', 't1', '0'), ('=', 't2', '1'), 'nextTerm'])], [('print', '"Enter the number of terms: "'), ('read', 'n'), ('print', '"Fibonacci Series: "'), ('for', ('=', 'i', '1'), ('<=', 'i', 'n'), ('++', 'i'), ([], [('print', ('t1', '" "')), ('=', 'nextTerm', ('+', 't1', 't2')), ('=', 't1', 't2'), ('=', 't2', 'nextTerm')])), '0']))]
I'm on show
