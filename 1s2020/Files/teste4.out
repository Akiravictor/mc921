Outputting the AST to Files/teste4.ast.
I'm on parser! :D
I'm on lexer!
Inside p_global_declaration_list:
p[0] = None
p[1] = None
End
Inside p_type_specifier:
p[0] = None
p[1] = int
End
Inside p_pointer_opt:
p[0] = None
p[1] = None
End
Inside p_direct_declarator:
p[0] = None
p[1] = main
End
Inside p_id_list:
p[0] = None
p[1] = None
End
Inside p_direct_declarator:
p[0] = None
p[1] = main
p[2] = (
p[3] = []
p[4] = )
End
Inside p_declarator:
p[0] = None
p[1] = None
p[2] = ('main', [])
End
Inside p_declaration_list_opt:
p[0] = None
p[1] = None
End
Inside p_type_specifier:
p[0] = None
p[1] = int
End
Inside p_pointer_opt:
p[0] = None
p[1] = None
End
Inside p_direct_declarator:
p[0] = None
p[1] = n
End
Inside p_declarator:
p[0] = None
p[1] = None
p[2] = n
End
Inside p_init_declarator:
p[0] = None
p[1] = n
End
Inside p_init_declarator_list:
p[0] = None
p[1] = n
End
Inside p_pointer_opt:
p[0] = None
p[1] = None
End
Inside p_direct_declarator:
p[0] = None
p[1] = reverse
End
Inside p_declarator:
p[0] = None
p[1] = None
p[2] = reverse
End
Inside p_constant:
p[0] = None
p[1] = 0
End
Inside p_primary_expression:
p[0] = None
p[1] = 0
End
Inside p_postfix_expression:
p[0] = None
p[1] = 0
End
Inside p_unary_expression:
p[0] = None
p[1] = 0
End
Inside p_cast_expression:
p[0] = None
p[1] = 0
End
Inside p_binary_expression:
p[0] = None
p[1] = 0
End
Inside p_assignment_expression:
p[0] = None
p[1] = 0
End
Inside p_initializer:
p[0] = None
p[1] = 0
End
Inside p_init_declarator:
p[0] = None
p[1] = reverse
p[2] = =
p[3] = 0
End
Inside p_init_declarator_list:
p[0] = None
p[1] = ['n']
p[2] = ,
p[3] = ('=', 'reverse', '0')
End
Inside p_pointer_opt:
p[0] = None
p[1] = None
End
Inside p_direct_declarator:
p[0] = None
p[1] = rem
End
Inside p_declarator:
p[0] = None
p[1] = None
p[2] = rem
End
Inside p_init_declarator:
p[0] = None
p[1] = rem
End
Inside p_init_declarator_list:
p[0] = None
p[1] = ['n', ('=', 'reverse', '0')]
p[2] = ,
p[3] = rem
End
Inside p_init_declarator_list_opt:
p[0] = None
p[1] = ['n', ('=', 'reverse', '0'), 'rem']
End
Inside p_declaration:
p[0] = None
p[1] = int
p[2] = ['n', ('=', 'reverse', '0'), 'rem']
p[3] = ;
End
Inside p_declaration_list_opt:
p[0] = None
p[1] = []
p[2] = ('int', ['n', ('=', 'reverse', '0'), 'rem'])
End
Inside p_statement_list_opt:
p[0] = None
p[1] = None
End
Inside p_primary_expression:
p[0] = None
p[1] = "Enter a number: "
End
Inside p_postfix_expression:
p[0] = None
p[1] = "Enter a number: "
End
Inside p_unary_expression:
p[0] = None
p[1] = "Enter a number: "
End
Inside p_cast_expression:
p[0] = None
p[1] = "Enter a number: "
End
Inside p_binary_expression:
p[0] = None
p[1] = "Enter a number: "
End
Inside p_assignment_expression:
p[0] = None
p[1] = "Enter a number: "
End
Inside p_expression:
p[0] = None
p[1] = "Enter a number: "
End
Inside p_expression_opt:
p[0] = None
p[1] = "Enter a number: "
End
Inside p_print_statement:
p[0] = None
p[1] = print
p[2] = (
p[3] = "Enter a number: "
p[4] = )
p[5] = ;
End
Inside p_statement:
p[0] = None
p[1] = ('print', '"Enter a number: "')
End
Inside p_statement_list_opt:
p[0] = None
p[1] = []
p[2] = ('print', '"Enter a number: "')
End
Inside p_primary_expression:
p[0] = None
p[1] = n
End
Inside p_postfix_expression:
p[0] = None
p[1] = n
End
Inside p_unary_expression:
p[0] = None
p[1] = n
End
Inside p_cast_expression:
p[0] = None
p[1] = n
End
Inside p_binary_expression:
p[0] = None
p[1] = n
End
Inside p_assignment_expression:
p[0] = None
p[1] = n
End
Inside p_argument_expression:
p[0] = None
p[1] = n
End
Inside p_read_statement:
p[0] = None
p[1] = read
p[2] = (
p[3] = n
p[4] = )
p[5] = ;
End
Inside p_statement:
p[0] = None
p[1] = ('read', 'n')
End
Inside p_statement_list_opt:
p[0] = None
p[1] = [('print', '"Enter a number: "')]
p[2] = ('read', 'n')
End
Inside p_primary_expression:
p[0] = None
p[1] = n
End
Inside p_postfix_expression:
p[0] = None
p[1] = n
End
Inside p_unary_expression:
p[0] = None
p[1] = n
End
Inside p_cast_expression:
p[0] = None
p[1] = n
End
Inside p_binary_expression:
p[0] = None
p[1] = n
End
Inside p_constant:
p[0] = None
p[1] = 0
End
Inside p_primary_expression:
p[0] = None
p[1] = 0
End
Inside p_postfix_expression:
p[0] = None
p[1] = 0
End
Inside p_unary_expression:
p[0] = None
p[1] = 0
End
Inside p_cast_expression:
p[0] = None
p[1] = 0
End
Inside p_binary_expression:
p[0] = None
p[1] = 0
End
Inside p_binary_expression:
p[0] = None
p[1] = n
p[2] = !=
p[3] = 0
End
Inside p_assignment_expression:
p[0] = None
p[1] = ('!=', 'n', '0')
End
Inside p_expression:
p[0] = None
p[1] = ('!=', 'n', '0')
End
Inside p_declaration_list_opt:
p[0] = None
p[1] = None
End
Inside p_statement_list_opt:
p[0] = None
p[1] = None
End
Inside p_primary_expression:
p[0] = None
p[1] = rem
End
Inside p_postfix_expression:
p[0] = None
p[1] = rem
End
Inside p_unary_expression:
p[0] = None
p[1] = rem
End
Inside p_assignment_operator:
p[0] = None
p[1] = =
End
Inside p_primary_expression:
p[0] = None
p[1] = n
End
Inside p_postfix_expression:
p[0] = None
p[1] = n
End
Inside p_unary_expression:
p[0] = None
p[1] = n
End
Inside p_cast_expression:
p[0] = None
p[1] = n
End
Inside p_binary_expression:
p[0] = None
p[1] = n
End
Inside p_constant:
p[0] = None
p[1] = 10
End
Inside p_primary_expression:
p[0] = None
p[1] = 10
End
Inside p_postfix_expression:
p[0] = None
p[1] = 10
End
Inside p_unary_expression:
p[0] = None
p[1] = 10
End
Inside p_cast_expression:
p[0] = None
p[1] = 10
End
Inside p_binary_expression:
p[0] = None
p[1] = 10
End
Inside p_binary_expression:
p[0] = None
p[1] = n
p[2] = %
p[3] = 10
End
Inside p_assignment_expression:
p[0] = None
p[1] = ('%', 'n', '10')
End
Inside p_assignment_expression:
p[0] = None
p[1] = rem
p[2] = =
p[3] = ('%', 'n', '10')
End
Inside p_expression:
p[0] = None
p[1] = ('=', 'rem', ('%', 'n', '10'))
End
Inside p_expression_opt:
p[0] = None
p[1] = ('=', 'rem', ('%', 'n', '10'))
End
Inside p_expression_statement:
p[0] = None
p[1] = ('=', 'rem', ('%', 'n', '10'))
p[2] = ;
End
Inside p_statement:
p[0] = None
p[1] = ('=', 'rem', ('%', 'n', '10'))
End
Inside p_statement_list_opt:
p[0] = None
p[1] = []
p[2] = ('=', 'rem', ('%', 'n', '10'))
End
Inside p_primary_expression:
p[0] = None
p[1] = reverse
End
Inside p_postfix_expression:
p[0] = None
p[1] = reverse
End
Inside p_unary_expression:
p[0] = None
p[1] = reverse
End
Inside p_assignment_operator:
p[0] = None
p[1] = =
End
Inside p_primary_expression:
p[0] = None
p[1] = reverse
End
Inside p_postfix_expression:
p[0] = None
p[1] = reverse
End
Inside p_unary_expression:
p[0] = None
p[1] = reverse
End
Inside p_cast_expression:
p[0] = None
p[1] = reverse
End
Inside p_binary_expression:
p[0] = None
p[1] = reverse
End
Inside p_constant:
p[0] = None
p[1] = 10
End
Inside p_primary_expression:
p[0] = None
p[1] = 10
End
Inside p_postfix_expression:
p[0] = None
p[1] = 10
End
Inside p_unary_expression:
p[0] = None
p[1] = 10
End
Inside p_cast_expression:
p[0] = None
p[1] = 10
End
Inside p_binary_expression:
p[0] = None
p[1] = 10
End
Inside p_binary_expression:
p[0] = None
p[1] = reverse
p[2] = *
p[3] = 10
End
Inside p_primary_expression:
p[0] = None
p[1] = rem
End
Inside p_postfix_expression:
p[0] = None
p[1] = rem
End
Inside p_unary_expression:
p[0] = None
p[1] = rem
End
Inside p_cast_expression:
p[0] = None
p[1] = rem
End
Inside p_binary_expression:
p[0] = None
p[1] = rem
End
Inside p_binary_expression:
p[0] = None
p[1] = ('*', 'reverse', '10')
p[2] = +
p[3] = rem
End
Inside p_assignment_expression:
p[0] = None
p[1] = ('+', ('*', 'reverse', '10'), 'rem')
End
Inside p_assignment_expression:
p[0] = None
p[1] = reverse
p[2] = =
p[3] = ('+', ('*', 'reverse', '10'), 'rem')
End
Inside p_expression:
p[0] = None
p[1] = ('=', 'reverse', ('+', ('*', 'reverse', '10'), 'rem'))
End
Inside p_expression_opt:
p[0] = None
p[1] = ('=', 'reverse', ('+', ('*', 'reverse', '10'), 'rem'))
End
Inside p_expression_statement:
p[0] = None
p[1] = ('=', 'reverse', ('+', ('*', 'reverse', '10'), 'rem'))
p[2] = ;
End
Inside p_statement:
p[0] = None
p[1] = ('=', 'reverse', ('+', ('*', 'reverse', '10'), 'rem'))
End
Inside p_statement_list_opt:
p[0] = None
p[1] = [('=', 'rem', ('%', 'n', '10'))]
p[2] = ('=', 'reverse', ('+', ('*', 'reverse', '10'), 'rem'))
End
Inside p_primary_expression:
p[0] = None
p[1] = n
End
Inside p_postfix_expression:
p[0] = None
p[1] = n
End
Inside p_unary_expression:
p[0] = None
p[1] = n
End
Inside p_assignment_operator:
p[0] = None
p[1] = /=
End
Inside p_constant:
p[0] = None
p[1] = 10
End
Inside p_primary_expression:
p[0] = None
p[1] = 10
End
Inside p_postfix_expression:
p[0] = None
p[1] = 10
End
Inside p_unary_expression:
p[0] = None
p[1] = 10
End
Inside p_cast_expression:
p[0] = None
p[1] = 10
End
Inside p_binary_expression:
p[0] = None
p[1] = 10
End
Inside p_assignment_expression:
p[0] = None
p[1] = 10
End
Inside p_assignment_expression:
p[0] = None
p[1] = n
p[2] = /=
p[3] = 10
End
Inside p_expression:
p[0] = None
p[1] = ('/=', 'n', '10')
End
Inside p_expression_opt:
p[0] = None
p[1] = ('/=', 'n', '10')
End
Inside p_expression_statement:
p[0] = None
p[1] = ('/=', 'n', '10')
p[2] = ;
End
Inside p_statement:
p[0] = None
p[1] = ('/=', 'n', '10')
End
Inside p_statement_list_opt:
p[0] = None
p[1] = [('=', 'rem', ('%', 'n', '10')), ('=', 'reverse', ('+', ('*', 'reverse', '10'), 'rem'))]
p[2] = ('/=', 'n', '10')
End
Inside p_compound_statement:
p[0] = None
p[1] = {
p[2] = []
p[3] = [('=', 'rem', ('%', 'n', '10')), ('=', 'reverse', ('+', ('*', 'reverse', '10'), 'rem')), ('/=', 'n', '10')]
p[4] = }
End
Inside p_statement:
p[0] = None
p[1] = ([], [('=', 'rem', ('%', 'n', '10')), ('=', 'reverse', ('+', ('*', 'reverse', '10'), 'rem')), ('/=', 'n', '10')])
End
Inside p_iteration_statement:
p[0] = None
p[1] = while
p[2] = (
p[3] = ('!=', 'n', '0')
p[4] = )
p[5] = ([], [('=', 'rem', ('%', 'n', '10')), ('=', 'reverse', ('+', ('*', 'reverse', '10'), 'rem')), ('/=', 'n', '10')])
End
Inside p_statement:
p[0] = None
p[1] = ('while', ('!=', 'n', '0'), ([], [('=', 'rem', ('%', 'n', '10')), ('=', 'reverse', ('+', ('*', 'reverse', '10'), 'rem')), ('/=', 'n', '10')]))
End
Inside p_statement_list_opt:
p[0] = None
p[1] = [('print', '"Enter a number: "'), ('read', 'n')]
p[2] = ('while', ('!=', 'n', '0'), ([], [('=', 'rem', ('%', 'n', '10')), ('=', 'reverse', ('+', ('*', 'reverse', '10'), 'rem')), ('/=', 'n', '10')]))
End
Inside p_primary_expression:
p[0] = None
p[1] = "Reversed Number: "
End
Inside p_postfix_expression:
p[0] = None
p[1] = "Reversed Number: "
End
Inside p_unary_expression:
p[0] = None
p[1] = "Reversed Number: "
End
Inside p_cast_expression:
p[0] = None
p[1] = "Reversed Number: "
End
Inside p_binary_expression:
p[0] = None
p[1] = "Reversed Number: "
End
Inside p_assignment_expression:
p[0] = None
p[1] = "Reversed Number: "
End
Inside p_expression:
p[0] = None
p[1] = "Reversed Number: "
End
Inside p_primary_expression:
p[0] = None
p[1] = reverse
End
Inside p_postfix_expression:
p[0] = None
p[1] = reverse
End
Inside p_unary_expression:
p[0] = None
p[1] = reverse
End
Inside p_cast_expression:
p[0] = None
p[1] = reverse
End
Inside p_binary_expression:
p[0] = None
p[1] = reverse
End
Inside p_assignment_expression:
p[0] = None
p[1] = reverse
End
Inside p_expression:
p[0] = None
p[1] = "Reversed Number: "
p[2] = ,
p[3] = reverse
End
Inside p_expression_opt:
p[0] = None
p[1] = ('"Reversed Number: "', 'reverse')
End
Inside p_print_statement:
p[0] = None
p[1] = print
p[2] = (
p[3] = ('"Reversed Number: "', 'reverse')
p[4] = )
p[5] = ;
End
Inside p_statement:
p[0] = None
p[1] = ('print', ('"Reversed Number: "', 'reverse'))
End
Inside p_statement_list_opt:
p[0] = None
p[1] = [('print', '"Enter a number: "'), ('read', 'n'), ('while', ('!=', 'n', '0'), ([], [('=', 'rem', ('%', 'n', '10')), ('=', 'reverse', ('+', ('*', 'reverse', '10'), 'rem')), ('/=', 'n', '10')]))]
p[2] = ('print', ('"Reversed Number: "', 'reverse'))
End
Inside p_constant:
p[0] = None
p[1] = 0
End
Inside p_primary_expression:
p[0] = None
p[1] = 0
End
Inside p_postfix_expression:
p[0] = None
p[1] = 0
End
Inside p_unary_expression:
p[0] = None
p[1] = 0
End
Inside p_cast_expression:
p[0] = None
p[1] = 0
End
Inside p_binary_expression:
p[0] = None
p[1] = 0
End
Inside p_assignment_expression:
p[0] = None
p[1] = 0
End
Inside p_expression:
p[0] = None
p[1] = 0
End
Inside p_jump_statement:
p[0] = None
p[1] = return
p[2] = 0
p[3] = ;
End
Inside p_statement:
p[0] = None
p[1] = 0
End
Inside p_statement_list_opt:
p[0] = None
p[1] = [('print', '"Enter a number: "'), ('read', 'n'), ('while', ('!=', 'n', '0'), ([], [('=', 'rem', ('%', 'n', '10')), ('=', 'reverse', ('+', ('*', 'reverse', '10'), 'rem')), ('/=', 'n', '10')])), ('print', ('"Reversed Number: "', 'reverse'))]
p[2] = 0
End
Inside p_compound_statement:
p[0] = None
p[1] = {
p[2] = [('int', ['n', ('=', 'reverse', '0'), 'rem'])]
p[3] = [('print', '"Enter a number: "'), ('read', 'n'), ('while', ('!=', 'n', '0'), ([], [('=', 'rem', ('%', 'n', '10')), ('=', 'reverse', ('+', ('*', 'reverse', '10'), 'rem')), ('/=', 'n', '10')])), ('print', ('"Reversed Number: "', 'reverse')), '0']
p[4] = }
End
Inside p_function_definition:
p[0] = None
p[1] = int
p[2] = ('main', [])
p[3] = ([('int', ['n', ('=', 'reverse', '0'), 'rem'])], [('print', '"Enter a number: "'), ('read', 'n'), ('while', ('!=', 'n', '0'), ([], [('=', 'rem', ('%', 'n', '10')), ('=', 'reverse', ('+', ('*', 'reverse', '10'), 'rem')), ('/=', 'n', '10')])), ('print', ('"Reversed Number: "', 'reverse')), '0'])
End
Inside p_global_declaration:
p[0] = None
p[1] = ('int', ('main', []), ([('int', ['n', ('=', 'reverse', '0'), 'rem'])], [('print', '"Enter a number: "'), ('read', 'n'), ('while', ('!=', 'n', '0'), ([], [('=', 'rem', ('%', 'n', '10')), ('=', 'reverse', ('+', ('*', 'reverse', '10'), 'rem')), ('/=', 'n', '10')])), ('print', ('"Reversed Number: "', 'reverse')), '0']))
End
Inside p_global_declaration_list:
p[0] = None
p[1] = []
p[2] = ('int', ('main', []), ([('int', ['n', ('=', 'reverse', '0'), 'rem'])], [('print', '"Enter a number: "'), ('read', 'n'), ('while', ('!=', 'n', '0'), ([], [('=', 'rem', ('%', 'n', '10')), ('=', 'reverse', ('+', ('*', 'reverse', '10'), 'rem')), ('/=', 'n', '10')])), ('print', ('"Reversed Number: "', 'reverse')), '0']))
End
Inside p_program:
p[0] = None
p[1] = [('int', ('main', []), ([('int', ['n', ('=', 'reverse', '0'), 'rem'])], [('print', '"Enter a number: "'), ('read', 'n'), ('while', ('!=', 'n', '0'), ([], [('=', 'rem', ('%', 'n', '10')), ('=', 'reverse', ('+', ('*', 'reverse', '10'), 'rem')), ('/=', 'n', '10')])), ('print', ('"Reversed Number: "', 'reverse')), '0']))]
End
[('int', ('main', []), ([('int', ['n', ('=', 'reverse', '0'), 'rem'])], [('print', '"Enter a number: "'), ('read', 'n'), ('while', ('!=', 'n', '0'), ([], [('=', 'rem', ('%', 'n', '10')), ('=', 'reverse', ('+', ('*', 'reverse', '10'), 'rem')), ('/=', 'n', '10')])), ('print', ('"Reversed Number: "', 'reverse')), '0']))]
I'm on show
